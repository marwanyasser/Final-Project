
Final-Project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  000020f2  00002166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001e78  00000000  00000000  00002210  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e2e  00000000  00000000  00004088  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005166  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006daf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008e35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009603  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 0f 0c 	call	0x181e	; 0x181e <main>
      7a:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 ef       	ldi	r26, 0xF3	; 243
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 17 10 	jmp	0x202e	; 0x202e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 07 10 	jmp	0x200e	; 0x200e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 07 10 	jmp	0x200e	; 0x200e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	83 ef       	ldi	r24, 0xF3	; 243
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 17 10 	jmp	0x202e	; 0x202e <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 07 10 	jmp	0x200e	; 0x200e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 07 10 	jmp	0x200e	; 0x200e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 07 10 	jmp	0x200e	; 0x200e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 27 10 	jmp	0x204e	; 0x204e <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <KeyPad_getPressedKey+0x6>
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     b40:	1a 82       	std	Y+2, r1	; 0x02
     b42:	4c c0       	rjmp	.+152    	; 0xbdc <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
     b44:	ea e3       	ldi	r30, 0x3A	; 58
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	8a 81       	ldd	r24, Y+2	; 0x02
     b4a:	28 2f       	mov	r18, r24
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	80 e1       	ldi	r24, 0x10	; 16
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <KeyPad_getPressedKey+0x22>
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	2a 95       	dec	r18
     b5a:	e2 f7       	brpl	.-8      	; 0xb54 <KeyPad_getPressedKey+0x1e>
     b5c:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
     b5e:	eb e3       	ldi	r30, 0x3B	; 59
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	80 e1       	ldi	r24, 0x10	; 16
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	02 2e       	mov	r0, r18
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <KeyPad_getPressedKey+0x3e>
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	0a 94       	dec	r0
     b76:	e2 f7       	brpl	.-8      	; 0xb70 <KeyPad_getPressedKey+0x3a>
     b78:	80 95       	com	r24
     b7a:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
     b7c:	19 82       	std	Y+1, r1	; 0x01
     b7e:	28 c0       	rjmp	.+80     	; 0xbd0 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
     b80:	e9 e3       	ldi	r30, 0x39	; 57
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	28 2f       	mov	r18, r24
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a9 01       	movw	r20, r18
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <KeyPad_getPressedKey+0x62>
     b94:	55 95       	asr	r21
     b96:	47 95       	ror	r20
     b98:	8a 95       	dec	r24
     b9a:	e2 f7       	brpl	.-8      	; 0xb94 <KeyPad_getPressedKey+0x5e>
     b9c:	ca 01       	movw	r24, r20
     b9e:	81 70       	andi	r24, 0x01	; 1
     ba0:	90 70       	andi	r25, 0x00	; 0
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	91 f4       	brne	.+36     	; 0xbca <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	88 2f       	mov	r24, r24
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	98 2f       	mov	r25, r24
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	89 0f       	add	r24, r25
     bba:	8f 5f       	subi	r24, 0xFF	; 255
     bbc:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	8f 5f       	subi	r24, 0xFF	; 255
     bce:	89 83       	std	Y+1, r24	; 0x01
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	84 30       	cpi	r24, 0x04	; 4
     bd4:	a8 f2       	brcs	.-86     	; 0xb80 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	8f 5f       	subi	r24, 0xFF	; 255
     bda:	8a 83       	std	Y+2, r24	; 0x02
     bdc:	8a 81       	ldd	r24, Y+2	; 0x02
     bde:	84 30       	cpi	r24, 0x04	; 4
     be0:	08 f4       	brcc	.+2      	; 0xbe4 <KeyPad_getPressedKey+0xae>
     be2:	b0 cf       	rjmp	.-160    	; 0xb44 <KeyPad_getPressedKey+0xe>
     be4:	ad cf       	rjmp	.-166    	; 0xb40 <KeyPad_getPressedKey+0xa>

00000be6 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	00 d0       	rcall	.+0      	; 0xbec <KeyPad_4x4_adjustKeyNumber+0x6>
     bec:	00 d0       	rcall	.+0      	; 0xbee <KeyPad_4x4_adjustKeyNumber+0x8>
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
     bf2:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	28 2f       	mov	r18, r24
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	3c 83       	std	Y+4, r19	; 0x04
     bfc:	2b 83       	std	Y+3, r18	; 0x03
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	9c 81       	ldd	r25, Y+4	; 0x04
     c02:	88 30       	cpi	r24, 0x08	; 8
     c04:	91 05       	cpc	r25, r1
     c06:	09 f4       	brne	.+2      	; 0xc0a <KeyPad_4x4_adjustKeyNumber+0x24>
     c08:	70 c0       	rjmp	.+224    	; 0xcea <KeyPad_4x4_adjustKeyNumber+0x104>
     c0a:	2b 81       	ldd	r18, Y+3	; 0x03
     c0c:	3c 81       	ldd	r19, Y+4	; 0x04
     c0e:	29 30       	cpi	r18, 0x09	; 9
     c10:	31 05       	cpc	r19, r1
     c12:	5c f5       	brge	.+86     	; 0xc6a <KeyPad_4x4_adjustKeyNumber+0x84>
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	9c 81       	ldd	r25, Y+4	; 0x04
     c18:	84 30       	cpi	r24, 0x04	; 4
     c1a:	91 05       	cpc	r25, r1
     c1c:	09 f4       	brne	.+2      	; 0xc20 <KeyPad_4x4_adjustKeyNumber+0x3a>
     c1e:	59 c0       	rjmp	.+178    	; 0xcd2 <KeyPad_4x4_adjustKeyNumber+0xec>
     c20:	2b 81       	ldd	r18, Y+3	; 0x03
     c22:	3c 81       	ldd	r19, Y+4	; 0x04
     c24:	25 30       	cpi	r18, 0x05	; 5
     c26:	31 05       	cpc	r19, r1
     c28:	9c f4       	brge	.+38     	; 0xc50 <KeyPad_4x4_adjustKeyNumber+0x6a>
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	9c 81       	ldd	r25, Y+4	; 0x04
     c2e:	82 30       	cpi	r24, 0x02	; 2
     c30:	91 05       	cpc	r25, r1
     c32:	09 f4       	brne	.+2      	; 0xc36 <KeyPad_4x4_adjustKeyNumber+0x50>
     c34:	48 c0       	rjmp	.+144    	; 0xcc6 <KeyPad_4x4_adjustKeyNumber+0xe0>
     c36:	2b 81       	ldd	r18, Y+3	; 0x03
     c38:	3c 81       	ldd	r19, Y+4	; 0x04
     c3a:	23 30       	cpi	r18, 0x03	; 3
     c3c:	31 05       	cpc	r19, r1
     c3e:	0c f0       	brlt	.+2      	; 0xc42 <KeyPad_4x4_adjustKeyNumber+0x5c>
     c40:	45 c0       	rjmp	.+138    	; 0xccc <KeyPad_4x4_adjustKeyNumber+0xe6>
     c42:	8b 81       	ldd	r24, Y+3	; 0x03
     c44:	9c 81       	ldd	r25, Y+4	; 0x04
     c46:	81 30       	cpi	r24, 0x01	; 1
     c48:	91 05       	cpc	r25, r1
     c4a:	09 f4       	brne	.+2      	; 0xc4e <KeyPad_4x4_adjustKeyNumber+0x68>
     c4c:	39 c0       	rjmp	.+114    	; 0xcc0 <KeyPad_4x4_adjustKeyNumber+0xda>
     c4e:	67 c0       	rjmp	.+206    	; 0xd1e <KeyPad_4x4_adjustKeyNumber+0x138>
     c50:	2b 81       	ldd	r18, Y+3	; 0x03
     c52:	3c 81       	ldd	r19, Y+4	; 0x04
     c54:	26 30       	cpi	r18, 0x06	; 6
     c56:	31 05       	cpc	r19, r1
     c58:	09 f4       	brne	.+2      	; 0xc5c <KeyPad_4x4_adjustKeyNumber+0x76>
     c5a:	41 c0       	rjmp	.+130    	; 0xcde <KeyPad_4x4_adjustKeyNumber+0xf8>
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	9c 81       	ldd	r25, Y+4	; 0x04
     c60:	87 30       	cpi	r24, 0x07	; 7
     c62:	91 05       	cpc	r25, r1
     c64:	0c f0       	brlt	.+2      	; 0xc68 <KeyPad_4x4_adjustKeyNumber+0x82>
     c66:	3e c0       	rjmp	.+124    	; 0xce4 <KeyPad_4x4_adjustKeyNumber+0xfe>
     c68:	37 c0       	rjmp	.+110    	; 0xcd8 <KeyPad_4x4_adjustKeyNumber+0xf2>
     c6a:	2b 81       	ldd	r18, Y+3	; 0x03
     c6c:	3c 81       	ldd	r19, Y+4	; 0x04
     c6e:	2c 30       	cpi	r18, 0x0C	; 12
     c70:	31 05       	cpc	r19, r1
     c72:	09 f4       	brne	.+2      	; 0xc76 <KeyPad_4x4_adjustKeyNumber+0x90>
     c74:	46 c0       	rjmp	.+140    	; 0xd02 <KeyPad_4x4_adjustKeyNumber+0x11c>
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	9c 81       	ldd	r25, Y+4	; 0x04
     c7a:	8d 30       	cpi	r24, 0x0D	; 13
     c7c:	91 05       	cpc	r25, r1
     c7e:	5c f4       	brge	.+22     	; 0xc96 <KeyPad_4x4_adjustKeyNumber+0xb0>
     c80:	2b 81       	ldd	r18, Y+3	; 0x03
     c82:	3c 81       	ldd	r19, Y+4	; 0x04
     c84:	2a 30       	cpi	r18, 0x0A	; 10
     c86:	31 05       	cpc	r19, r1
     c88:	b1 f1       	breq	.+108    	; 0xcf6 <KeyPad_4x4_adjustKeyNumber+0x110>
     c8a:	8b 81       	ldd	r24, Y+3	; 0x03
     c8c:	9c 81       	ldd	r25, Y+4	; 0x04
     c8e:	8b 30       	cpi	r24, 0x0B	; 11
     c90:	91 05       	cpc	r25, r1
     c92:	a4 f5       	brge	.+104    	; 0xcfc <KeyPad_4x4_adjustKeyNumber+0x116>
     c94:	2d c0       	rjmp	.+90     	; 0xcf0 <KeyPad_4x4_adjustKeyNumber+0x10a>
     c96:	2b 81       	ldd	r18, Y+3	; 0x03
     c98:	3c 81       	ldd	r19, Y+4	; 0x04
     c9a:	2e 30       	cpi	r18, 0x0E	; 14
     c9c:	31 05       	cpc	r19, r1
     c9e:	b9 f1       	breq	.+110    	; 0xd0e <KeyPad_4x4_adjustKeyNumber+0x128>
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	9c 81       	ldd	r25, Y+4	; 0x04
     ca4:	8e 30       	cpi	r24, 0x0E	; 14
     ca6:	91 05       	cpc	r25, r1
     ca8:	7c f1       	brlt	.+94     	; 0xd08 <KeyPad_4x4_adjustKeyNumber+0x122>
     caa:	2b 81       	ldd	r18, Y+3	; 0x03
     cac:	3c 81       	ldd	r19, Y+4	; 0x04
     cae:	2f 30       	cpi	r18, 0x0F	; 15
     cb0:	31 05       	cpc	r19, r1
     cb2:	79 f1       	breq	.+94     	; 0xd12 <KeyPad_4x4_adjustKeyNumber+0x12c>
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	9c 81       	ldd	r25, Y+4	; 0x04
     cb8:	80 31       	cpi	r24, 0x10	; 16
     cba:	91 05       	cpc	r25, r1
     cbc:	69 f1       	breq	.+90     	; 0xd18 <KeyPad_4x4_adjustKeyNumber+0x132>
     cbe:	2f c0       	rjmp	.+94     	; 0xd1e <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
     cc0:	97 e0       	ldi	r25, 0x07	; 7
     cc2:	9a 83       	std	Y+2, r25	; 0x02
     cc4:	2e c0       	rjmp	.+92     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
     cc6:	28 e0       	ldi	r18, 0x08	; 8
     cc8:	2a 83       	std	Y+2, r18	; 0x02
     cca:	2b c0       	rjmp	.+86     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
     ccc:	39 e0       	ldi	r19, 0x09	; 9
     cce:	3a 83       	std	Y+2, r19	; 0x02
     cd0:	28 c0       	rjmp	.+80     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
     cd2:	85 e2       	ldi	r24, 0x25	; 37
     cd4:	8a 83       	std	Y+2, r24	; 0x02
     cd6:	25 c0       	rjmp	.+74     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
     cd8:	94 e0       	ldi	r25, 0x04	; 4
     cda:	9a 83       	std	Y+2, r25	; 0x02
     cdc:	22 c0       	rjmp	.+68     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
     cde:	25 e0       	ldi	r18, 0x05	; 5
     ce0:	2a 83       	std	Y+2, r18	; 0x02
     ce2:	1f c0       	rjmp	.+62     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
     ce4:	36 e0       	ldi	r19, 0x06	; 6
     ce6:	3a 83       	std	Y+2, r19	; 0x02
     ce8:	1c c0       	rjmp	.+56     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
     cea:	8a e2       	ldi	r24, 0x2A	; 42
     cec:	8a 83       	std	Y+2, r24	; 0x02
     cee:	19 c0       	rjmp	.+50     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	9a 83       	std	Y+2, r25	; 0x02
     cf4:	16 c0       	rjmp	.+44     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
     cf6:	22 e0       	ldi	r18, 0x02	; 2
     cf8:	2a 83       	std	Y+2, r18	; 0x02
     cfa:	13 c0       	rjmp	.+38     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
     cfc:	33 e0       	ldi	r19, 0x03	; 3
     cfe:	3a 83       	std	Y+2, r19	; 0x02
     d00:	10 c0       	rjmp	.+32     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
     d02:	8d e2       	ldi	r24, 0x2D	; 45
     d04:	8a 83       	std	Y+2, r24	; 0x02
     d06:	0d c0       	rjmp	.+26     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
     d08:	9d e0       	ldi	r25, 0x0D	; 13
     d0a:	9a 83       	std	Y+2, r25	; 0x02
     d0c:	0a c0       	rjmp	.+20     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
     d0e:	1a 82       	std	Y+2, r1	; 0x02
     d10:	08 c0       	rjmp	.+16     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
     d12:	2d e3       	ldi	r18, 0x3D	; 61
     d14:	2a 83       	std	Y+2, r18	; 0x02
     d16:	05 c0       	rjmp	.+10     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
     d18:	3b e2       	ldi	r19, 0x2B	; 43
     d1a:	3a 83       	std	Y+2, r19	; 0x02
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	8a 83       	std	Y+2, r24	; 0x02
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret

00000d32 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
     d3a:	e4 e3       	ldi	r30, 0x34	; 52
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	8f ef       	ldi	r24, 0xFF	; 255
     d40:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     d42:	a1 e3       	ldi	r26, 0x31	; 49
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e1 e3       	ldi	r30, 0x31	; 49
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	80 67       	ori	r24, 0x70	; 112
     d4e:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
     d50:	88 e3       	ldi	r24, 0x38	; 56
     d52:	0e 94 b4 06 	call	0xd68	; 0xd68 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     d56:	8c e0       	ldi	r24, 0x0C	; 12
     d58:	0e 94 b4 06 	call	0xd68	; 0xd68 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	0e 94 b4 06 	call	0xd68	; 0xd68 <LCD_sendCommand>
}
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	e9 97       	sbiw	r28, 0x39	; 57
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     d7e:	a2 e3       	ldi	r26, 0x32	; 50
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e2 e3       	ldi	r30, 0x32	; 50
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	8f 7e       	andi	r24, 0xEF	; 239
     d8a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     d8c:	a2 e3       	ldi	r26, 0x32	; 50
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e2 e3       	ldi	r30, 0x32	; 50
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	8f 7d       	andi	r24, 0xDF	; 223
     d98:	8c 93       	st	X, r24
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	a0 e8       	ldi	r26, 0x80	; 128
     da0:	bf e3       	ldi	r27, 0x3F	; 63
     da2:	8d ab       	std	Y+53, r24	; 0x35
     da4:	9e ab       	std	Y+54, r25	; 0x36
     da6:	af ab       	std	Y+55, r26	; 0x37
     da8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     daa:	6d a9       	ldd	r22, Y+53	; 0x35
     dac:	7e a9       	ldd	r23, Y+54	; 0x36
     dae:	8f a9       	ldd	r24, Y+55	; 0x37
     db0:	98 ad       	ldd	r25, Y+56	; 0x38
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	4a ef       	ldi	r20, 0xFA	; 250
     db8:	54 e4       	ldi	r21, 0x44	; 68
     dba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	89 ab       	std	Y+49, r24	; 0x31
     dc4:	9a ab       	std	Y+50, r25	; 0x32
     dc6:	ab ab       	std	Y+51, r26	; 0x33
     dc8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     dca:	69 a9       	ldd	r22, Y+49	; 0x31
     dcc:	7a a9       	ldd	r23, Y+50	; 0x32
     dce:	8b a9       	ldd	r24, Y+51	; 0x33
     dd0:	9c a9       	ldd	r25, Y+52	; 0x34
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	40 e8       	ldi	r20, 0x80	; 128
     dd8:	5f e3       	ldi	r21, 0x3F	; 63
     dda:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     dde:	88 23       	and	r24, r24
     de0:	2c f4       	brge	.+10     	; 0xdec <LCD_sendCommand+0x84>
		__ticks = 1;
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	98 ab       	std	Y+48, r25	; 0x30
     de8:	8f a7       	std	Y+47, r24	; 0x2f
     dea:	3f c0       	rjmp	.+126    	; 0xe6a <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
     dec:	69 a9       	ldd	r22, Y+49	; 0x31
     dee:	7a a9       	ldd	r23, Y+50	; 0x32
     df0:	8b a9       	ldd	r24, Y+51	; 0x33
     df2:	9c a9       	ldd	r25, Y+52	; 0x34
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	3f ef       	ldi	r19, 0xFF	; 255
     df8:	4f e7       	ldi	r20, 0x7F	; 127
     dfa:	57 e4       	ldi	r21, 0x47	; 71
     dfc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e00:	18 16       	cp	r1, r24
     e02:	4c f5       	brge	.+82     	; 0xe56 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e04:	6d a9       	ldd	r22, Y+53	; 0x35
     e06:	7e a9       	ldd	r23, Y+54	; 0x36
     e08:	8f a9       	ldd	r24, Y+55	; 0x37
     e0a:	98 ad       	ldd	r25, Y+56	; 0x38
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	40 e2       	ldi	r20, 0x20	; 32
     e12:	51 e4       	ldi	r21, 0x41	; 65
     e14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	bc 01       	movw	r22, r24
     e1e:	cd 01       	movw	r24, r26
     e20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	98 ab       	std	Y+48, r25	; 0x30
     e2a:	8f a7       	std	Y+47, r24	; 0x2f
     e2c:	0f c0       	rjmp	.+30     	; 0xe4c <LCD_sendCommand+0xe4>
     e2e:	88 ec       	ldi	r24, 0xC8	; 200
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	9e a7       	std	Y+46, r25	; 0x2e
     e34:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e36:	8d a5       	ldd	r24, Y+45	; 0x2d
     e38:	9e a5       	ldd	r25, Y+46	; 0x2e
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	f1 f7       	brne	.-4      	; 0xe3a <LCD_sendCommand+0xd2>
     e3e:	9e a7       	std	Y+46, r25	; 0x2e
     e40:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e42:	8f a5       	ldd	r24, Y+47	; 0x2f
     e44:	98 a9       	ldd	r25, Y+48	; 0x30
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	98 ab       	std	Y+48, r25	; 0x30
     e4a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e4c:	8f a5       	ldd	r24, Y+47	; 0x2f
     e4e:	98 a9       	ldd	r25, Y+48	; 0x30
     e50:	00 97       	sbiw	r24, 0x00	; 0
     e52:	69 f7       	brne	.-38     	; 0xe2e <LCD_sendCommand+0xc6>
     e54:	14 c0       	rjmp	.+40     	; 0xe7e <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e56:	69 a9       	ldd	r22, Y+49	; 0x31
     e58:	7a a9       	ldd	r23, Y+50	; 0x32
     e5a:	8b a9       	ldd	r24, Y+51	; 0x33
     e5c:	9c a9       	ldd	r25, Y+52	; 0x34
     e5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	98 ab       	std	Y+48, r25	; 0x30
     e68:	8f a7       	std	Y+47, r24	; 0x2f
     e6a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e6c:	98 a9       	ldd	r25, Y+48	; 0x30
     e6e:	9c a7       	std	Y+44, r25	; 0x2c
     e70:	8b a7       	std	Y+43, r24	; 0x2b
     e72:	8b a5       	ldd	r24, Y+43	; 0x2b
     e74:	9c a5       	ldd	r25, Y+44	; 0x2c
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <LCD_sendCommand+0x10e>
     e7a:	9c a7       	std	Y+44, r25	; 0x2c
     e7c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
     e7e:	a2 e3       	ldi	r26, 0x32	; 50
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e2 e3       	ldi	r30, 0x32	; 50
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	80 64       	ori	r24, 0x40	; 64
     e8a:	8c 93       	st	X, r24
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	a0 e8       	ldi	r26, 0x80	; 128
     e92:	bf e3       	ldi	r27, 0x3F	; 63
     e94:	8f a3       	std	Y+39, r24	; 0x27
     e96:	98 a7       	std	Y+40, r25	; 0x28
     e98:	a9 a7       	std	Y+41, r26	; 0x29
     e9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9c:	6f a1       	ldd	r22, Y+39	; 0x27
     e9e:	78 a5       	ldd	r23, Y+40	; 0x28
     ea0:	89 a5       	ldd	r24, Y+41	; 0x29
     ea2:	9a a5       	ldd	r25, Y+42	; 0x2a
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	4a ef       	ldi	r20, 0xFA	; 250
     eaa:	54 e4       	ldi	r21, 0x44	; 68
     eac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	8b a3       	std	Y+35, r24	; 0x23
     eb6:	9c a3       	std	Y+36, r25	; 0x24
     eb8:	ad a3       	std	Y+37, r26	; 0x25
     eba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ebc:	6b a1       	ldd	r22, Y+35	; 0x23
     ebe:	7c a1       	ldd	r23, Y+36	; 0x24
     ec0:	8d a1       	ldd	r24, Y+37	; 0x25
     ec2:	9e a1       	ldd	r25, Y+38	; 0x26
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5f e3       	ldi	r21, 0x3F	; 63
     ecc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	2c f4       	brge	.+10     	; 0xede <LCD_sendCommand+0x176>
		__ticks = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9a a3       	std	Y+34, r25	; 0x22
     eda:	89 a3       	std	Y+33, r24	; 0x21
     edc:	3f c0       	rjmp	.+126    	; 0xf5c <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
     ede:	6b a1       	ldd	r22, Y+35	; 0x23
     ee0:	7c a1       	ldd	r23, Y+36	; 0x24
     ee2:	8d a1       	ldd	r24, Y+37	; 0x25
     ee4:	9e a1       	ldd	r25, Y+38	; 0x26
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	3f ef       	ldi	r19, 0xFF	; 255
     eea:	4f e7       	ldi	r20, 0x7F	; 127
     eec:	57 e4       	ldi	r21, 0x47	; 71
     eee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ef2:	18 16       	cp	r1, r24
     ef4:	4c f5       	brge	.+82     	; 0xf48 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef6:	6f a1       	ldd	r22, Y+39	; 0x27
     ef8:	78 a5       	ldd	r23, Y+40	; 0x28
     efa:	89 a5       	ldd	r24, Y+41	; 0x29
     efc:	9a a5       	ldd	r25, Y+42	; 0x2a
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 e2       	ldi	r20, 0x20	; 32
     f04:	51 e4       	ldi	r21, 0x41	; 65
     f06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	bc 01       	movw	r22, r24
     f10:	cd 01       	movw	r24, r26
     f12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	9a a3       	std	Y+34, r25	; 0x22
     f1c:	89 a3       	std	Y+33, r24	; 0x21
     f1e:	0f c0       	rjmp	.+30     	; 0xf3e <LCD_sendCommand+0x1d6>
     f20:	88 ec       	ldi	r24, 0xC8	; 200
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	98 a3       	std	Y+32, r25	; 0x20
     f26:	8f 8f       	std	Y+31, r24	; 0x1f
     f28:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f2a:	98 a1       	ldd	r25, Y+32	; 0x20
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <LCD_sendCommand+0x1c4>
     f30:	98 a3       	std	Y+32, r25	; 0x20
     f32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f34:	89 a1       	ldd	r24, Y+33	; 0x21
     f36:	9a a1       	ldd	r25, Y+34	; 0x22
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	9a a3       	std	Y+34, r25	; 0x22
     f3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3e:	89 a1       	ldd	r24, Y+33	; 0x21
     f40:	9a a1       	ldd	r25, Y+34	; 0x22
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	69 f7       	brne	.-38     	; 0xf20 <LCD_sendCommand+0x1b8>
     f46:	14 c0       	rjmp	.+40     	; 0xf70 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f48:	6b a1       	ldd	r22, Y+35	; 0x23
     f4a:	7c a1       	ldd	r23, Y+36	; 0x24
     f4c:	8d a1       	ldd	r24, Y+37	; 0x25
     f4e:	9e a1       	ldd	r25, Y+38	; 0x26
     f50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	9a a3       	std	Y+34, r25	; 0x22
     f5a:	89 a3       	std	Y+33, r24	; 0x21
     f5c:	89 a1       	ldd	r24, Y+33	; 0x21
     f5e:	9a a1       	ldd	r25, Y+34	; 0x22
     f60:	9e 8f       	std	Y+30, r25	; 0x1e
     f62:	8d 8f       	std	Y+29, r24	; 0x1d
     f64:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f66:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <LCD_sendCommand+0x200>
     f6c:	9e 8f       	std	Y+30, r25	; 0x1e
     f6e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
     f70:	e5 e3       	ldi	r30, 0x35	; 53
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	89 ad       	ldd	r24, Y+57	; 0x39
     f76:	80 83       	st	Z, r24
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	a0 e8       	ldi	r26, 0x80	; 128
     f7e:	bf e3       	ldi	r27, 0x3F	; 63
     f80:	89 8f       	std	Y+25, r24	; 0x19
     f82:	9a 8f       	std	Y+26, r25	; 0x1a
     f84:	ab 8f       	std	Y+27, r26	; 0x1b
     f86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f88:	69 8d       	ldd	r22, Y+25	; 0x19
     f8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	4a ef       	ldi	r20, 0xFA	; 250
     f96:	54 e4       	ldi	r21, 0x44	; 68
     f98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	8d 8b       	std	Y+21, r24	; 0x15
     fa2:	9e 8b       	std	Y+22, r25	; 0x16
     fa4:	af 8b       	std	Y+23, r26	; 0x17
     fa6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fa8:	6d 89       	ldd	r22, Y+21	; 0x15
     faa:	7e 89       	ldd	r23, Y+22	; 0x16
     fac:	8f 89       	ldd	r24, Y+23	; 0x17
     fae:	98 8d       	ldd	r25, Y+24	; 0x18
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e8       	ldi	r20, 0x80	; 128
     fb6:	5f e3       	ldi	r21, 0x3F	; 63
     fb8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     fbc:	88 23       	and	r24, r24
     fbe:	2c f4       	brge	.+10     	; 0xfca <LCD_sendCommand+0x262>
		__ticks = 1;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	9c 8b       	std	Y+20, r25	; 0x14
     fc6:	8b 8b       	std	Y+19, r24	; 0x13
     fc8:	3f c0       	rjmp	.+126    	; 0x1048 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
     fca:	6d 89       	ldd	r22, Y+21	; 0x15
     fcc:	7e 89       	ldd	r23, Y+22	; 0x16
     fce:	8f 89       	ldd	r24, Y+23	; 0x17
     fd0:	98 8d       	ldd	r25, Y+24	; 0x18
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	3f ef       	ldi	r19, 0xFF	; 255
     fd6:	4f e7       	ldi	r20, 0x7F	; 127
     fd8:	57 e4       	ldi	r21, 0x47	; 71
     fda:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     fde:	18 16       	cp	r1, r24
     fe0:	4c f5       	brge	.+82     	; 0x1034 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe2:	69 8d       	ldd	r22, Y+25	; 0x19
     fe4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fe6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fe8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e2       	ldi	r20, 0x20	; 32
     ff0:	51 e4       	ldi	r21, 0x41	; 65
     ff2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	bc 01       	movw	r22, r24
     ffc:	cd 01       	movw	r24, r26
     ffe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	9c 8b       	std	Y+20, r25	; 0x14
    1008:	8b 8b       	std	Y+19, r24	; 0x13
    100a:	0f c0       	rjmp	.+30     	; 0x102a <LCD_sendCommand+0x2c2>
    100c:	88 ec       	ldi	r24, 0xC8	; 200
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	9a 8b       	std	Y+18, r25	; 0x12
    1012:	89 8b       	std	Y+17, r24	; 0x11
    1014:	89 89       	ldd	r24, Y+17	; 0x11
    1016:	9a 89       	ldd	r25, Y+18	; 0x12
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <LCD_sendCommand+0x2b0>
    101c:	9a 8b       	std	Y+18, r25	; 0x12
    101e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1020:	8b 89       	ldd	r24, Y+19	; 0x13
    1022:	9c 89       	ldd	r25, Y+20	; 0x14
    1024:	01 97       	sbiw	r24, 0x01	; 1
    1026:	9c 8b       	std	Y+20, r25	; 0x14
    1028:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102a:	8b 89       	ldd	r24, Y+19	; 0x13
    102c:	9c 89       	ldd	r25, Y+20	; 0x14
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	69 f7       	brne	.-38     	; 0x100c <LCD_sendCommand+0x2a4>
    1032:	14 c0       	rjmp	.+40     	; 0x105c <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1034:	6d 89       	ldd	r22, Y+21	; 0x15
    1036:	7e 89       	ldd	r23, Y+22	; 0x16
    1038:	8f 89       	ldd	r24, Y+23	; 0x17
    103a:	98 8d       	ldd	r25, Y+24	; 0x18
    103c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	9c 8b       	std	Y+20, r25	; 0x14
    1046:	8b 8b       	std	Y+19, r24	; 0x13
    1048:	8b 89       	ldd	r24, Y+19	; 0x13
    104a:	9c 89       	ldd	r25, Y+20	; 0x14
    104c:	98 8b       	std	Y+16, r25	; 0x10
    104e:	8f 87       	std	Y+15, r24	; 0x0f
    1050:	8f 85       	ldd	r24, Y+15	; 0x0f
    1052:	98 89       	ldd	r25, Y+16	; 0x10
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <LCD_sendCommand+0x2ec>
    1058:	98 8b       	std	Y+16, r25	; 0x10
    105a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    105c:	a2 e3       	ldi	r26, 0x32	; 50
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e2 e3       	ldi	r30, 0x32	; 50
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8f 7b       	andi	r24, 0xBF	; 191
    1068:	8c 93       	st	X, r24
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	a0 e8       	ldi	r26, 0x80	; 128
    1070:	bf e3       	ldi	r27, 0x3F	; 63
    1072:	8b 87       	std	Y+11, r24	; 0x0b
    1074:	9c 87       	std	Y+12, r25	; 0x0c
    1076:	ad 87       	std	Y+13, r26	; 0x0d
    1078:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    107a:	6b 85       	ldd	r22, Y+11	; 0x0b
    107c:	7c 85       	ldd	r23, Y+12	; 0x0c
    107e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1080:	9e 85       	ldd	r25, Y+14	; 0x0e
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	4a ef       	ldi	r20, 0xFA	; 250
    1088:	54 e4       	ldi	r21, 0x44	; 68
    108a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	8f 83       	std	Y+7, r24	; 0x07
    1094:	98 87       	std	Y+8, r25	; 0x08
    1096:	a9 87       	std	Y+9, r26	; 0x09
    1098:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    109a:	6f 81       	ldd	r22, Y+7	; 0x07
    109c:	78 85       	ldd	r23, Y+8	; 0x08
    109e:	89 85       	ldd	r24, Y+9	; 0x09
    10a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e8       	ldi	r20, 0x80	; 128
    10a8:	5f e3       	ldi	r21, 0x3F	; 63
    10aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10ae:	88 23       	and	r24, r24
    10b0:	2c f4       	brge	.+10     	; 0x10bc <LCD_sendCommand+0x354>
		__ticks = 1;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	9e 83       	std	Y+6, r25	; 0x06
    10b8:	8d 83       	std	Y+5, r24	; 0x05
    10ba:	3f c0       	rjmp	.+126    	; 0x113a <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    10bc:	6f 81       	ldd	r22, Y+7	; 0x07
    10be:	78 85       	ldd	r23, Y+8	; 0x08
    10c0:	89 85       	ldd	r24, Y+9	; 0x09
    10c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	3f ef       	ldi	r19, 0xFF	; 255
    10c8:	4f e7       	ldi	r20, 0x7F	; 127
    10ca:	57 e4       	ldi	r21, 0x47	; 71
    10cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10d0:	18 16       	cp	r1, r24
    10d2:	4c f5       	brge	.+82     	; 0x1126 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10da:	9e 85       	ldd	r25, Y+14	; 0x0e
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	40 e2       	ldi	r20, 0x20	; 32
    10e2:	51 e4       	ldi	r21, 0x41	; 65
    10e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	bc 01       	movw	r22, r24
    10ee:	cd 01       	movw	r24, r26
    10f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	9e 83       	std	Y+6, r25	; 0x06
    10fa:	8d 83       	std	Y+5, r24	; 0x05
    10fc:	0f c0       	rjmp	.+30     	; 0x111c <LCD_sendCommand+0x3b4>
    10fe:	88 ec       	ldi	r24, 0xC8	; 200
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9c 83       	std	Y+4, r25	; 0x04
    1104:	8b 83       	std	Y+3, r24	; 0x03
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	f1 f7       	brne	.-4      	; 0x110a <LCD_sendCommand+0x3a2>
    110e:	9c 83       	std	Y+4, r25	; 0x04
    1110:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1112:	8d 81       	ldd	r24, Y+5	; 0x05
    1114:	9e 81       	ldd	r25, Y+6	; 0x06
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	9e 83       	std	Y+6, r25	; 0x06
    111a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111c:	8d 81       	ldd	r24, Y+5	; 0x05
    111e:	9e 81       	ldd	r25, Y+6	; 0x06
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	69 f7       	brne	.-38     	; 0x10fe <LCD_sendCommand+0x396>
    1124:	14 c0       	rjmp	.+40     	; 0x114e <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1126:	6f 81       	ldd	r22, Y+7	; 0x07
    1128:	78 85       	ldd	r23, Y+8	; 0x08
    112a:	89 85       	ldd	r24, Y+9	; 0x09
    112c:	9a 85       	ldd	r25, Y+10	; 0x0a
    112e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	9e 83       	std	Y+6, r25	; 0x06
    1138:	8d 83       	std	Y+5, r24	; 0x05
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	9e 81       	ldd	r25, Y+6	; 0x06
    113e:	9a 83       	std	Y+2, r25	; 0x02
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	9a 81       	ldd	r25, Y+2	; 0x02
    1146:	01 97       	sbiw	r24, 0x01	; 1
    1148:	f1 f7       	brne	.-4      	; 0x1146 <LCD_sendCommand+0x3de>
    114a:	9a 83       	std	Y+2, r25	; 0x02
    114c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    114e:	e9 96       	adiw	r28, 0x39	; 57
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	e9 97       	sbiw	r28, 0x39	; 57
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1176:	a2 e3       	ldi	r26, 0x32	; 50
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e2 e3       	ldi	r30, 0x32	; 50
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	80 61       	ori	r24, 0x10	; 16
    1182:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1184:	a2 e3       	ldi	r26, 0x32	; 50
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e2 e3       	ldi	r30, 0x32	; 50
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	8f 7d       	andi	r24, 0xDF	; 223
    1190:	8c 93       	st	X, r24
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	a0 e8       	ldi	r26, 0x80	; 128
    1198:	bf e3       	ldi	r27, 0x3F	; 63
    119a:	8d ab       	std	Y+53, r24	; 0x35
    119c:	9e ab       	std	Y+54, r25	; 0x36
    119e:	af ab       	std	Y+55, r26	; 0x37
    11a0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a2:	6d a9       	ldd	r22, Y+53	; 0x35
    11a4:	7e a9       	ldd	r23, Y+54	; 0x36
    11a6:	8f a9       	ldd	r24, Y+55	; 0x37
    11a8:	98 ad       	ldd	r25, Y+56	; 0x38
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	4a ef       	ldi	r20, 0xFA	; 250
    11b0:	54 e4       	ldi	r21, 0x44	; 68
    11b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	89 ab       	std	Y+49, r24	; 0x31
    11bc:	9a ab       	std	Y+50, r25	; 0x32
    11be:	ab ab       	std	Y+51, r26	; 0x33
    11c0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11c2:	69 a9       	ldd	r22, Y+49	; 0x31
    11c4:	7a a9       	ldd	r23, Y+50	; 0x32
    11c6:	8b a9       	ldd	r24, Y+51	; 0x33
    11c8:	9c a9       	ldd	r25, Y+52	; 0x34
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e8       	ldi	r20, 0x80	; 128
    11d0:	5f e3       	ldi	r21, 0x3F	; 63
    11d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    11d6:	88 23       	and	r24, r24
    11d8:	2c f4       	brge	.+10     	; 0x11e4 <LCD_displayCharacter+0x84>
		__ticks = 1;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	98 ab       	std	Y+48, r25	; 0x30
    11e0:	8f a7       	std	Y+47, r24	; 0x2f
    11e2:	3f c0       	rjmp	.+126    	; 0x1262 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    11e4:	69 a9       	ldd	r22, Y+49	; 0x31
    11e6:	7a a9       	ldd	r23, Y+50	; 0x32
    11e8:	8b a9       	ldd	r24, Y+51	; 0x33
    11ea:	9c a9       	ldd	r25, Y+52	; 0x34
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	3f ef       	ldi	r19, 0xFF	; 255
    11f0:	4f e7       	ldi	r20, 0x7F	; 127
    11f2:	57 e4       	ldi	r21, 0x47	; 71
    11f4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    11f8:	18 16       	cp	r1, r24
    11fa:	4c f5       	brge	.+82     	; 0x124e <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11fc:	6d a9       	ldd	r22, Y+53	; 0x35
    11fe:	7e a9       	ldd	r23, Y+54	; 0x36
    1200:	8f a9       	ldd	r24, Y+55	; 0x37
    1202:	98 ad       	ldd	r25, Y+56	; 0x38
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	40 e2       	ldi	r20, 0x20	; 32
    120a:	51 e4       	ldi	r21, 0x41	; 65
    120c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	bc 01       	movw	r22, r24
    1216:	cd 01       	movw	r24, r26
    1218:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	98 ab       	std	Y+48, r25	; 0x30
    1222:	8f a7       	std	Y+47, r24	; 0x2f
    1224:	0f c0       	rjmp	.+30     	; 0x1244 <LCD_displayCharacter+0xe4>
    1226:	88 ec       	ldi	r24, 0xC8	; 200
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	9e a7       	std	Y+46, r25	; 0x2e
    122c:	8d a7       	std	Y+45, r24	; 0x2d
    122e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1230:	9e a5       	ldd	r25, Y+46	; 0x2e
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	f1 f7       	brne	.-4      	; 0x1232 <LCD_displayCharacter+0xd2>
    1236:	9e a7       	std	Y+46, r25	; 0x2e
    1238:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    123a:	8f a5       	ldd	r24, Y+47	; 0x2f
    123c:	98 a9       	ldd	r25, Y+48	; 0x30
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	98 ab       	std	Y+48, r25	; 0x30
    1242:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1244:	8f a5       	ldd	r24, Y+47	; 0x2f
    1246:	98 a9       	ldd	r25, Y+48	; 0x30
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	69 f7       	brne	.-38     	; 0x1226 <LCD_displayCharacter+0xc6>
    124c:	14 c0       	rjmp	.+40     	; 0x1276 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    124e:	69 a9       	ldd	r22, Y+49	; 0x31
    1250:	7a a9       	ldd	r23, Y+50	; 0x32
    1252:	8b a9       	ldd	r24, Y+51	; 0x33
    1254:	9c a9       	ldd	r25, Y+52	; 0x34
    1256:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	98 ab       	std	Y+48, r25	; 0x30
    1260:	8f a7       	std	Y+47, r24	; 0x2f
    1262:	8f a5       	ldd	r24, Y+47	; 0x2f
    1264:	98 a9       	ldd	r25, Y+48	; 0x30
    1266:	9c a7       	std	Y+44, r25	; 0x2c
    1268:	8b a7       	std	Y+43, r24	; 0x2b
    126a:	8b a5       	ldd	r24, Y+43	; 0x2b
    126c:	9c a5       	ldd	r25, Y+44	; 0x2c
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	f1 f7       	brne	.-4      	; 0x126e <LCD_displayCharacter+0x10e>
    1272:	9c a7       	std	Y+44, r25	; 0x2c
    1274:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1276:	a2 e3       	ldi	r26, 0x32	; 50
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e2 e3       	ldi	r30, 0x32	; 50
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	80 64       	ori	r24, 0x40	; 64
    1282:	8c 93       	st	X, r24
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	a0 e8       	ldi	r26, 0x80	; 128
    128a:	bf e3       	ldi	r27, 0x3F	; 63
    128c:	8f a3       	std	Y+39, r24	; 0x27
    128e:	98 a7       	std	Y+40, r25	; 0x28
    1290:	a9 a7       	std	Y+41, r26	; 0x29
    1292:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1294:	6f a1       	ldd	r22, Y+39	; 0x27
    1296:	78 a5       	ldd	r23, Y+40	; 0x28
    1298:	89 a5       	ldd	r24, Y+41	; 0x29
    129a:	9a a5       	ldd	r25, Y+42	; 0x2a
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	4a ef       	ldi	r20, 0xFA	; 250
    12a2:	54 e4       	ldi	r21, 0x44	; 68
    12a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	8b a3       	std	Y+35, r24	; 0x23
    12ae:	9c a3       	std	Y+36, r25	; 0x24
    12b0:	ad a3       	std	Y+37, r26	; 0x25
    12b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12b4:	6b a1       	ldd	r22, Y+35	; 0x23
    12b6:	7c a1       	ldd	r23, Y+36	; 0x24
    12b8:	8d a1       	ldd	r24, Y+37	; 0x25
    12ba:	9e a1       	ldd	r25, Y+38	; 0x26
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e8       	ldi	r20, 0x80	; 128
    12c2:	5f e3       	ldi	r21, 0x3F	; 63
    12c4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12c8:	88 23       	and	r24, r24
    12ca:	2c f4       	brge	.+10     	; 0x12d6 <LCD_displayCharacter+0x176>
		__ticks = 1;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	9a a3       	std	Y+34, r25	; 0x22
    12d2:	89 a3       	std	Y+33, r24	; 0x21
    12d4:	3f c0       	rjmp	.+126    	; 0x1354 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    12d6:	6b a1       	ldd	r22, Y+35	; 0x23
    12d8:	7c a1       	ldd	r23, Y+36	; 0x24
    12da:	8d a1       	ldd	r24, Y+37	; 0x25
    12dc:	9e a1       	ldd	r25, Y+38	; 0x26
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	3f ef       	ldi	r19, 0xFF	; 255
    12e2:	4f e7       	ldi	r20, 0x7F	; 127
    12e4:	57 e4       	ldi	r21, 0x47	; 71
    12e6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12ea:	18 16       	cp	r1, r24
    12ec:	4c f5       	brge	.+82     	; 0x1340 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ee:	6f a1       	ldd	r22, Y+39	; 0x27
    12f0:	78 a5       	ldd	r23, Y+40	; 0x28
    12f2:	89 a5       	ldd	r24, Y+41	; 0x29
    12f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e2       	ldi	r20, 0x20	; 32
    12fc:	51 e4       	ldi	r21, 0x41	; 65
    12fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	bc 01       	movw	r22, r24
    1308:	cd 01       	movw	r24, r26
    130a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	9a a3       	std	Y+34, r25	; 0x22
    1314:	89 a3       	std	Y+33, r24	; 0x21
    1316:	0f c0       	rjmp	.+30     	; 0x1336 <LCD_displayCharacter+0x1d6>
    1318:	88 ec       	ldi	r24, 0xC8	; 200
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	98 a3       	std	Y+32, r25	; 0x20
    131e:	8f 8f       	std	Y+31, r24	; 0x1f
    1320:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1322:	98 a1       	ldd	r25, Y+32	; 0x20
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	f1 f7       	brne	.-4      	; 0x1324 <LCD_displayCharacter+0x1c4>
    1328:	98 a3       	std	Y+32, r25	; 0x20
    132a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132c:	89 a1       	ldd	r24, Y+33	; 0x21
    132e:	9a a1       	ldd	r25, Y+34	; 0x22
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	9a a3       	std	Y+34, r25	; 0x22
    1334:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1336:	89 a1       	ldd	r24, Y+33	; 0x21
    1338:	9a a1       	ldd	r25, Y+34	; 0x22
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	69 f7       	brne	.-38     	; 0x1318 <LCD_displayCharacter+0x1b8>
    133e:	14 c0       	rjmp	.+40     	; 0x1368 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1340:	6b a1       	ldd	r22, Y+35	; 0x23
    1342:	7c a1       	ldd	r23, Y+36	; 0x24
    1344:	8d a1       	ldd	r24, Y+37	; 0x25
    1346:	9e a1       	ldd	r25, Y+38	; 0x26
    1348:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	9a a3       	std	Y+34, r25	; 0x22
    1352:	89 a3       	std	Y+33, r24	; 0x21
    1354:	89 a1       	ldd	r24, Y+33	; 0x21
    1356:	9a a1       	ldd	r25, Y+34	; 0x22
    1358:	9e 8f       	std	Y+30, r25	; 0x1e
    135a:	8d 8f       	std	Y+29, r24	; 0x1d
    135c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    135e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	f1 f7       	brne	.-4      	; 0x1360 <LCD_displayCharacter+0x200>
    1364:	9e 8f       	std	Y+30, r25	; 0x1e
    1366:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    1368:	e5 e3       	ldi	r30, 0x35	; 53
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	89 ad       	ldd	r24, Y+57	; 0x39
    136e:	80 83       	st	Z, r24
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	a0 e8       	ldi	r26, 0x80	; 128
    1376:	bf e3       	ldi	r27, 0x3F	; 63
    1378:	89 8f       	std	Y+25, r24	; 0x19
    137a:	9a 8f       	std	Y+26, r25	; 0x1a
    137c:	ab 8f       	std	Y+27, r26	; 0x1b
    137e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1380:	69 8d       	ldd	r22, Y+25	; 0x19
    1382:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1384:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1386:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	4a ef       	ldi	r20, 0xFA	; 250
    138e:	54 e4       	ldi	r21, 0x44	; 68
    1390:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	8d 8b       	std	Y+21, r24	; 0x15
    139a:	9e 8b       	std	Y+22, r25	; 0x16
    139c:	af 8b       	std	Y+23, r26	; 0x17
    139e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13a0:	6d 89       	ldd	r22, Y+21	; 0x15
    13a2:	7e 89       	ldd	r23, Y+22	; 0x16
    13a4:	8f 89       	ldd	r24, Y+23	; 0x17
    13a6:	98 8d       	ldd	r25, Y+24	; 0x18
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e8       	ldi	r20, 0x80	; 128
    13ae:	5f e3       	ldi	r21, 0x3F	; 63
    13b0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13b4:	88 23       	and	r24, r24
    13b6:	2c f4       	brge	.+10     	; 0x13c2 <LCD_displayCharacter+0x262>
		__ticks = 1;
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	9c 8b       	std	Y+20, r25	; 0x14
    13be:	8b 8b       	std	Y+19, r24	; 0x13
    13c0:	3f c0       	rjmp	.+126    	; 0x1440 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    13c2:	6d 89       	ldd	r22, Y+21	; 0x15
    13c4:	7e 89       	ldd	r23, Y+22	; 0x16
    13c6:	8f 89       	ldd	r24, Y+23	; 0x17
    13c8:	98 8d       	ldd	r25, Y+24	; 0x18
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	3f ef       	ldi	r19, 0xFF	; 255
    13ce:	4f e7       	ldi	r20, 0x7F	; 127
    13d0:	57 e4       	ldi	r21, 0x47	; 71
    13d2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13d6:	18 16       	cp	r1, r24
    13d8:	4c f5       	brge	.+82     	; 0x142c <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13da:	69 8d       	ldd	r22, Y+25	; 0x19
    13dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e2       	ldi	r20, 0x20	; 32
    13e8:	51 e4       	ldi	r21, 0x41	; 65
    13ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	bc 01       	movw	r22, r24
    13f4:	cd 01       	movw	r24, r26
    13f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	9c 8b       	std	Y+20, r25	; 0x14
    1400:	8b 8b       	std	Y+19, r24	; 0x13
    1402:	0f c0       	rjmp	.+30     	; 0x1422 <LCD_displayCharacter+0x2c2>
    1404:	88 ec       	ldi	r24, 0xC8	; 200
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	9a 8b       	std	Y+18, r25	; 0x12
    140a:	89 8b       	std	Y+17, r24	; 0x11
    140c:	89 89       	ldd	r24, Y+17	; 0x11
    140e:	9a 89       	ldd	r25, Y+18	; 0x12
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	f1 f7       	brne	.-4      	; 0x1410 <LCD_displayCharacter+0x2b0>
    1414:	9a 8b       	std	Y+18, r25	; 0x12
    1416:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1418:	8b 89       	ldd	r24, Y+19	; 0x13
    141a:	9c 89       	ldd	r25, Y+20	; 0x14
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	9c 8b       	std	Y+20, r25	; 0x14
    1420:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1422:	8b 89       	ldd	r24, Y+19	; 0x13
    1424:	9c 89       	ldd	r25, Y+20	; 0x14
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	69 f7       	brne	.-38     	; 0x1404 <LCD_displayCharacter+0x2a4>
    142a:	14 c0       	rjmp	.+40     	; 0x1454 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142c:	6d 89       	ldd	r22, Y+21	; 0x15
    142e:	7e 89       	ldd	r23, Y+22	; 0x16
    1430:	8f 89       	ldd	r24, Y+23	; 0x17
    1432:	98 8d       	ldd	r25, Y+24	; 0x18
    1434:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	9c 8b       	std	Y+20, r25	; 0x14
    143e:	8b 8b       	std	Y+19, r24	; 0x13
    1440:	8b 89       	ldd	r24, Y+19	; 0x13
    1442:	9c 89       	ldd	r25, Y+20	; 0x14
    1444:	98 8b       	std	Y+16, r25	; 0x10
    1446:	8f 87       	std	Y+15, r24	; 0x0f
    1448:	8f 85       	ldd	r24, Y+15	; 0x0f
    144a:	98 89       	ldd	r25, Y+16	; 0x10
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	f1 f7       	brne	.-4      	; 0x144c <LCD_displayCharacter+0x2ec>
    1450:	98 8b       	std	Y+16, r25	; 0x10
    1452:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1454:	a2 e3       	ldi	r26, 0x32	; 50
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e2 e3       	ldi	r30, 0x32	; 50
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	8f 7b       	andi	r24, 0xBF	; 191
    1460:	8c 93       	st	X, r24
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	a0 e8       	ldi	r26, 0x80	; 128
    1468:	bf e3       	ldi	r27, 0x3F	; 63
    146a:	8b 87       	std	Y+11, r24	; 0x0b
    146c:	9c 87       	std	Y+12, r25	; 0x0c
    146e:	ad 87       	std	Y+13, r26	; 0x0d
    1470:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1472:	6b 85       	ldd	r22, Y+11	; 0x0b
    1474:	7c 85       	ldd	r23, Y+12	; 0x0c
    1476:	8d 85       	ldd	r24, Y+13	; 0x0d
    1478:	9e 85       	ldd	r25, Y+14	; 0x0e
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	4a ef       	ldi	r20, 0xFA	; 250
    1480:	54 e4       	ldi	r21, 0x44	; 68
    1482:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	8f 83       	std	Y+7, r24	; 0x07
    148c:	98 87       	std	Y+8, r25	; 0x08
    148e:	a9 87       	std	Y+9, r26	; 0x09
    1490:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1492:	6f 81       	ldd	r22, Y+7	; 0x07
    1494:	78 85       	ldd	r23, Y+8	; 0x08
    1496:	89 85       	ldd	r24, Y+9	; 0x09
    1498:	9a 85       	ldd	r25, Y+10	; 0x0a
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e8       	ldi	r20, 0x80	; 128
    14a0:	5f e3       	ldi	r21, 0x3F	; 63
    14a2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14a6:	88 23       	and	r24, r24
    14a8:	2c f4       	brge	.+10     	; 0x14b4 <LCD_displayCharacter+0x354>
		__ticks = 1;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	9e 83       	std	Y+6, r25	; 0x06
    14b0:	8d 83       	std	Y+5, r24	; 0x05
    14b2:	3f c0       	rjmp	.+126    	; 0x1532 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    14b4:	6f 81       	ldd	r22, Y+7	; 0x07
    14b6:	78 85       	ldd	r23, Y+8	; 0x08
    14b8:	89 85       	ldd	r24, Y+9	; 0x09
    14ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	3f ef       	ldi	r19, 0xFF	; 255
    14c0:	4f e7       	ldi	r20, 0x7F	; 127
    14c2:	57 e4       	ldi	r21, 0x47	; 71
    14c4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14c8:	18 16       	cp	r1, r24
    14ca:	4c f5       	brge	.+82     	; 0x151e <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e2       	ldi	r20, 0x20	; 32
    14da:	51 e4       	ldi	r21, 0x41	; 65
    14dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	bc 01       	movw	r22, r24
    14e6:	cd 01       	movw	r24, r26
    14e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	9e 83       	std	Y+6, r25	; 0x06
    14f2:	8d 83       	std	Y+5, r24	; 0x05
    14f4:	0f c0       	rjmp	.+30     	; 0x1514 <LCD_displayCharacter+0x3b4>
    14f6:	88 ec       	ldi	r24, 0xC8	; 200
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	9c 83       	std	Y+4, r25	; 0x04
    14fc:	8b 83       	std	Y+3, r24	; 0x03
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	f1 f7       	brne	.-4      	; 0x1502 <LCD_displayCharacter+0x3a2>
    1506:	9c 83       	std	Y+4, r25	; 0x04
    1508:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150a:	8d 81       	ldd	r24, Y+5	; 0x05
    150c:	9e 81       	ldd	r25, Y+6	; 0x06
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	9e 83       	std	Y+6, r25	; 0x06
    1512:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	69 f7       	brne	.-38     	; 0x14f6 <LCD_displayCharacter+0x396>
    151c:	14 c0       	rjmp	.+40     	; 0x1546 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151e:	6f 81       	ldd	r22, Y+7	; 0x07
    1520:	78 85       	ldd	r23, Y+8	; 0x08
    1522:	89 85       	ldd	r24, Y+9	; 0x09
    1524:	9a 85       	ldd	r25, Y+10	; 0x0a
    1526:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	9e 83       	std	Y+6, r25	; 0x06
    1530:	8d 83       	std	Y+5, r24	; 0x05
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	9e 81       	ldd	r25, Y+6	; 0x06
    1536:	9a 83       	std	Y+2, r25	; 0x02
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <LCD_displayCharacter+0x3de>
    1542:	9a 83       	std	Y+2, r25	; 0x02
    1544:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    1546:	e9 96       	adiw	r28, 0x39	; 57
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	00 d0       	rcall	.+0      	; 0x155e <LCD_displayString+0x6>
    155e:	0f 92       	push	r0
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	9b 83       	std	Y+3, r25	; 0x03
    1566:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1568:	19 82       	std	Y+1, r1	; 0x01
    156a:	0e c0       	rjmp	.+28     	; 0x1588 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	9b 81       	ldd	r25, Y+3	; 0x03
    1576:	fc 01       	movw	r30, r24
    1578:	e2 0f       	add	r30, r18
    157a:	f3 1f       	adc	r31, r19
    157c:	80 81       	ld	r24, Z
    157e:	0e 94 b0 08 	call	0x1160	; 0x1160 <LCD_displayCharacter>
		i++;
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	8f 5f       	subi	r24, 0xFF	; 255
    1586:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	9b 81       	ldd	r25, Y+3	; 0x03
    1592:	fc 01       	movw	r30, r24
    1594:	e2 0f       	add	r30, r18
    1596:	f3 1f       	adc	r31, r19
    1598:	80 81       	ld	r24, Z
    159a:	88 23       	and	r24, r24
    159c:	39 f7       	brne	.-50     	; 0x156c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <LCD_goToRowColumn+0x6>
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <LCD_goToRowColumn+0x8>
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	8a 83       	std	Y+2, r24	; 0x02
    15ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	3d 83       	std	Y+5, r19	; 0x05
    15c4:	2c 83       	std	Y+4, r18	; 0x04
    15c6:	8c 81       	ldd	r24, Y+4	; 0x04
    15c8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ca:	81 30       	cpi	r24, 0x01	; 1
    15cc:	91 05       	cpc	r25, r1
    15ce:	c1 f0       	breq	.+48     	; 0x1600 <LCD_goToRowColumn+0x56>
    15d0:	2c 81       	ldd	r18, Y+4	; 0x04
    15d2:	3d 81       	ldd	r19, Y+5	; 0x05
    15d4:	22 30       	cpi	r18, 0x02	; 2
    15d6:	31 05       	cpc	r19, r1
    15d8:	2c f4       	brge	.+10     	; 0x15e4 <LCD_goToRowColumn+0x3a>
    15da:	8c 81       	ldd	r24, Y+4	; 0x04
    15dc:	9d 81       	ldd	r25, Y+5	; 0x05
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	61 f0       	breq	.+24     	; 0x15fa <LCD_goToRowColumn+0x50>
    15e2:	19 c0       	rjmp	.+50     	; 0x1616 <LCD_goToRowColumn+0x6c>
    15e4:	2c 81       	ldd	r18, Y+4	; 0x04
    15e6:	3d 81       	ldd	r19, Y+5	; 0x05
    15e8:	22 30       	cpi	r18, 0x02	; 2
    15ea:	31 05       	cpc	r19, r1
    15ec:	69 f0       	breq	.+26     	; 0x1608 <LCD_goToRowColumn+0x5e>
    15ee:	8c 81       	ldd	r24, Y+4	; 0x04
    15f0:	9d 81       	ldd	r25, Y+5	; 0x05
    15f2:	83 30       	cpi	r24, 0x03	; 3
    15f4:	91 05       	cpc	r25, r1
    15f6:	61 f0       	breq	.+24     	; 0x1610 <LCD_goToRowColumn+0x66>
    15f8:	0e c0       	rjmp	.+28     	; 0x1616 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	0b c0       	rjmp	.+22     	; 0x1616 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	80 5c       	subi	r24, 0xC0	; 192
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	07 c0       	rjmp	.+14     	; 0x1616 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	80 5f       	subi	r24, 0xF0	; 240
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	03 c0       	rjmp	.+6      	; 0x1616 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	80 5b       	subi	r24, 0xB0	; 176
    1614:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	80 68       	ori	r24, 0x80	; 128
    161a:	0e 94 b4 06 	call	0xd68	; 0xd68 <LCD_sendCommand>
}
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	00 d0       	rcall	.+0      	; 0x1634 <LCD_displayStringRowColumn+0x6>
    1634:	00 d0       	rcall	.+0      	; 0x1636 <LCD_displayStringRowColumn+0x8>
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	6a 83       	std	Y+2, r22	; 0x02
    163e:	5c 83       	std	Y+4, r21	; 0x04
    1640:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	6a 81       	ldd	r22, Y+2	; 0x02
    1646:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	9c 81       	ldd	r25, Y+4	; 0x04
    164e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>
}
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	62 97       	sbiw	r28, 0x12	; 18
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	9a 8b       	std	Y+18, r25	; 0x12
    1676:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1678:	89 89       	ldd	r24, Y+17	; 0x11
    167a:	9a 89       	ldd	r25, Y+18	; 0x12
    167c:	9e 01       	movw	r18, r28
    167e:	2f 5f       	subi	r18, 0xFF	; 255
    1680:	3f 4f       	sbci	r19, 0xFF	; 255
    1682:	b9 01       	movw	r22, r18
    1684:	4a e0       	ldi	r20, 0x0A	; 10
    1686:	50 e0       	ldi	r21, 0x00	; 0
    1688:	0e 94 32 10 	call	0x2064	; 0x2064 <itoa>
   LCD_displayString(buff);
    168c:	ce 01       	movw	r24, r28
    168e:	01 96       	adiw	r24, 0x01	; 1
    1690:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>
}
    1694:	62 96       	adiw	r28, 0x12	; 18
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	0e 94 b4 06 	call	0xd68	; 0xd68 <LCD_sendCommand>
}
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <printoutmessage_takeinput>:
 * Description : Function to output a question/message that requires user to input a passcode
 *     1. display the message
 *     2. keep looping until u get a number between 1 and 10
 *     3.
 */
void printoutmessage_takeinput(char* string, uint8* arr) { //printout the message on the lcd screen then take input from user
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <printoutmessage_takeinput+0xa>
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <printoutmessage_takeinput+0xc>
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <printoutmessage_takeinput+0xe>
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	9c 83       	std	Y+4, r25	; 0x04
    16ce:	8b 83       	std	Y+3, r24	; 0x03
    16d0:	7e 83       	std	Y+6, r23	; 0x06
    16d2:	6d 83       	std	Y+5, r22	; 0x05
	int i = 0;
    16d4:	1a 82       	std	Y+2, r1	; 0x02
    16d6:	19 82       	std	Y+1, r1	; 0x01
	LCD_displayString(string);
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	9c 81       	ldd	r25, Y+4	; 0x04
    16dc:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>
	LCD_goToRowColumn(1,0);// changing the lcd position
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	60 e0       	ldi	r22, 0x00	; 0
    16e4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_goToRowColumn>
	for(i= 0; i < PASSWORD_LENGTH; i++) {
    16e8:	1a 82       	std	Y+2, r1	; 0x02
    16ea:	19 82       	std	Y+1, r1	; 0x01
    16ec:	1a c0       	rjmp	.+52     	; 0x1722 <printoutmessage_takeinput+0x68>
not_number:                //if user pressed any key we go back here
		if(KeyPad_getPressedKey() < 10) { //no + or - or weird characters
    16ee:	0e 94 9b 05 	call	0xb36	; 0xb36 <KeyPad_getPressedKey>
    16f2:	8a 30       	cpi	r24, 0x0A	; 10
    16f4:	e0 f7       	brcc	.-8      	; 0x16ee <printoutmessage_takeinput+0x34>
			arr[i] = KeyPad_getPressedKey();
    16f6:	29 81       	ldd	r18, Y+1	; 0x01
    16f8:	3a 81       	ldd	r19, Y+2	; 0x02
    16fa:	8d 81       	ldd	r24, Y+5	; 0x05
    16fc:	9e 81       	ldd	r25, Y+6	; 0x06
    16fe:	8c 01       	movw	r16, r24
    1700:	02 0f       	add	r16, r18
    1702:	13 1f       	adc	r17, r19
    1704:	0e 94 9b 05 	call	0xb36	; 0xb36 <KeyPad_getPressedKey>
    1708:	f8 01       	movw	r30, r16
    170a:	80 83       	st	Z, r24
			LCD_displayCharacter('*');//to make it more user friendly and give feedback that a click is saved
    170c:	8a e2       	ldi	r24, 0x2A	; 42
    170e:	0e 94 b0 08 	call	0x1160	; 0x1160 <LCD_displayCharacter>
			delay_10xN(60);
    1712:	8c e3       	ldi	r24, 0x3C	; 60
    1714:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <delay_10xN>
 */
void printoutmessage_takeinput(char* string, uint8* arr) { //printout the message on the lcd screen then take input from user
	int i = 0;
	LCD_displayString(string);
	LCD_goToRowColumn(1,0);// changing the lcd position
	for(i= 0; i < PASSWORD_LENGTH; i++) {
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	9a 81       	ldd	r25, Y+2	; 0x02
    171c:	01 96       	adiw	r24, 0x01	; 1
    171e:	9a 83       	std	Y+2, r25	; 0x02
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	9a 81       	ldd	r25, Y+2	; 0x02
    1726:	85 30       	cpi	r24, 0x05	; 5
    1728:	91 05       	cpc	r25, r1
    172a:	0c f3       	brlt	.-62     	; 0x16ee <printoutmessage_takeinput+0x34>
		}
		else {
			goto not_number;
		}
	}
}
    172c:	26 96       	adiw	r28, 0x06	; 6
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	de bf       	out	0x3e, r29	; 62
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	cd bf       	out	0x3d, r28	; 61
    1738:	cf 91       	pop	r28
    173a:	df 91       	pop	r29
    173c:	1f 91       	pop	r17
    173e:	0f 91       	pop	r16
    1740:	08 95       	ret

00001742 <sendPassword>:
/*
 * Description : Function to send password to MC2
 *     1. send byte by byte the password
 */
void sendPassword(const uint8* arr) { //loop and send the entire password to microcontroller2
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	00 d0       	rcall	.+0      	; 0x1748 <sendPassword+0x6>
    1748:	00 d0       	rcall	.+0      	; 0x174a <sendPassword+0x8>
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	9c 83       	std	Y+4, r25	; 0x04
    1750:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i = 0; i < PASSWORD_LENGTH; i++) {
    1752:	1a 82       	std	Y+2, r1	; 0x02
    1754:	19 82       	std	Y+1, r1	; 0x01
    1756:	0f c0       	rjmp	.+30     	; 0x1776 <sendPassword+0x34>
		UART_sendByte(arr[i]);
    1758:	29 81       	ldd	r18, Y+1	; 0x01
    175a:	3a 81       	ldd	r19, Y+2	; 0x02
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	9c 81       	ldd	r25, Y+4	; 0x04
    1760:	fc 01       	movw	r30, r24
    1762:	e2 0f       	add	r30, r18
    1764:	f3 1f       	adc	r31, r19
    1766:	80 81       	ld	r24, Z
    1768:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <UART_sendByte>
 * Description : Function to send password to MC2
 *     1. send byte by byte the password
 */
void sendPassword(const uint8* arr) { //loop and send the entire password to microcontroller2
	int i;
	for(i = 0; i < PASSWORD_LENGTH; i++) {
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	9a 81       	ldd	r25, Y+2	; 0x02
    1770:	01 96       	adiw	r24, 0x01	; 1
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	9a 81       	ldd	r25, Y+2	; 0x02
    177a:	85 30       	cpi	r24, 0x05	; 5
    177c:	91 05       	cpc	r25, r1
    177e:	64 f3       	brlt	.-40     	; 0x1758 <sendPassword+0x16>
		UART_sendByte(arr[i]);
	}
}
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <recievePassword>:
/*
 * Description : Function to get password from MC2
 *     1. recieve byte by byte the password
 */
void recievePassword(uint8* arr) { //loop and send the entire password to microcontroller2
    178e:	0f 93       	push	r16
    1790:	1f 93       	push	r17
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	00 d0       	rcall	.+0      	; 0x1798 <recievePassword+0xa>
    1798:	00 d0       	rcall	.+0      	; 0x179a <recievePassword+0xc>
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	9c 83       	std	Y+4, r25	; 0x04
    17a0:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i = 0; i < PASSWORD_LENGTH; i++) {
    17a2:	1a 82       	std	Y+2, r1	; 0x02
    17a4:	19 82       	std	Y+1, r1	; 0x01
    17a6:	10 c0       	rjmp	.+32     	; 0x17c8 <recievePassword+0x3a>
		arr[i]= UART_recieveByte();
    17a8:	29 81       	ldd	r18, Y+1	; 0x01
    17aa:	3a 81       	ldd	r19, Y+2	; 0x02
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	9c 81       	ldd	r25, Y+4	; 0x04
    17b0:	8c 01       	movw	r16, r24
    17b2:	02 0f       	add	r16, r18
    17b4:	13 1f       	adc	r17, r19
    17b6:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <UART_recieveByte>
    17ba:	f8 01       	movw	r30, r16
    17bc:	80 83       	st	Z, r24
 * Description : Function to get password from MC2
 *     1. recieve byte by byte the password
 */
void recievePassword(uint8* arr) { //loop and send the entire password to microcontroller2
	int i;
	for(i = 0; i < PASSWORD_LENGTH; i++) {
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	9a 81       	ldd	r25, Y+2	; 0x02
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	9a 83       	std	Y+2, r25	; 0x02
    17c6:	89 83       	std	Y+1, r24	; 0x01
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	9a 81       	ldd	r25, Y+2	; 0x02
    17cc:	85 30       	cpi	r24, 0x05	; 5
    17ce:	91 05       	cpc	r25, r1
    17d0:	5c f3       	brlt	.-42     	; 0x17a8 <recievePassword+0x1a>
		arr[i]= UART_recieveByte();
	}
}
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	1f 91       	pop	r17
    17e0:	0f 91       	pop	r16
    17e2:	08 95       	ret

000017e4 <confirmPasscode>:
 * MC2
 *     1. recieve the password from MC1
 *     2. get the current password from the eeprom
 *     3. if they are the same return true else false
 */
void confirmPasscode(uint8* arr) {
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <confirmPasscode+0x6>
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	9a 83       	std	Y+2, r25	; 0x02
    17f0:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
    17f2:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <LCD_clearScreen>
	LCD_goToRowColumn(0,0);
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	60 e0       	ldi	r22, 0x00	; 0
    17fa:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_goToRowColumn>
	printoutmessage_takeinput("CONFIRM PASSCODE:", arr);
    17fe:	80 e6       	ldi	r24, 0x60	; 96
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	29 81       	ldd	r18, Y+1	; 0x01
    1804:	3a 81       	ldd	r19, Y+2	; 0x02
    1806:	b9 01       	movw	r22, r18
    1808:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <printoutmessage_takeinput>
	sendPassword(arr);
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	9a 81       	ldd	r25, Y+2	; 0x02
    1810:	0e 94 a1 0b 	call	0x1742	; 0x1742 <sendPassword>
}
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <main>:
/*******************************************************************************
 *                              Main Function                                  *
 *******************************************************************************/
int main(void) {
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	68 97       	sbiw	r28, 0x18	; 24
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
	//variables declarations
	uint8 arr[PASSWORD_LENGTH];
	uint8 uC_Message;
	uint8 i;
	// preferals initializations
	LCD_init(); //initialize the lcd
    1832:	0e 94 99 06 	call	0xd32	; 0xd32 <LCD_init>
	UART_config uart_config = {FALSE, FALSE, FALSE, TRUE, FALSE, Even, Async, onebit, FALLING, eight, 9600}; //uart configuration structure
    1836:	ce 01       	movw	r24, r28
    1838:	08 96       	adiw	r24, 0x08	; 8
    183a:	9d 8b       	std	Y+21, r25	; 0x15
    183c:	8c 8b       	std	Y+20, r24	; 0x14
    183e:	eb ef       	ldi	r30, 0xFB	; 251
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	ff 8b       	std	Y+23, r31	; 0x17
    1844:	ee 8b       	std	Y+22, r30	; 0x16
    1846:	fc e0       	ldi	r31, 0x0C	; 12
    1848:	f8 8f       	std	Y+24, r31	; 0x18
    184a:	ee 89       	ldd	r30, Y+22	; 0x16
    184c:	ff 89       	ldd	r31, Y+23	; 0x17
    184e:	00 80       	ld	r0, Z
    1850:	8e 89       	ldd	r24, Y+22	; 0x16
    1852:	9f 89       	ldd	r25, Y+23	; 0x17
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	9f 8b       	std	Y+23, r25	; 0x17
    1858:	8e 8b       	std	Y+22, r24	; 0x16
    185a:	ec 89       	ldd	r30, Y+20	; 0x14
    185c:	fd 89       	ldd	r31, Y+21	; 0x15
    185e:	00 82       	st	Z, r0
    1860:	8c 89       	ldd	r24, Y+20	; 0x14
    1862:	9d 89       	ldd	r25, Y+21	; 0x15
    1864:	01 96       	adiw	r24, 0x01	; 1
    1866:	9d 8b       	std	Y+21, r25	; 0x15
    1868:	8c 8b       	std	Y+20, r24	; 0x14
    186a:	98 8d       	ldd	r25, Y+24	; 0x18
    186c:	91 50       	subi	r25, 0x01	; 1
    186e:	98 8f       	std	Y+24, r25	; 0x18
    1870:	e8 8d       	ldd	r30, Y+24	; 0x18
    1872:	ee 23       	and	r30, r30
    1874:	51 f7       	brne	.-44     	; 0x184a <main+0x2c>
	UART_init(&uart_config); // initialize the uart
    1876:	ce 01       	movw	r24, r28
    1878:	08 96       	adiw	r24, 0x08	; 8
    187a:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <UART_init>
	//first time the user uses our door lock system [No Password on the EEPROM]


//state0              ///checking here if we already saved a password on the EEPROM or this is the first time

		recievePassword(arr);
    187e:	ce 01       	movw	r24, r28
    1880:	03 96       	adiw	r24, 0x03	; 3
    1882:	0e 94 c7 0b 	call	0x178e	; 0x178e <recievePassword>
		for(i = 0; i < PASSWORD_LENGTH; i++) { //checking if the passcodes are the same
    1886:	19 82       	std	Y+1, r1	; 0x01
    1888:	12 c0       	rjmp	.+36     	; 0x18ae <main+0x90>
			if(arr[i] > 10) {					//MAXIMUM KEYPAD NUMBER
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	ce 01       	movw	r24, r28
    1892:	03 96       	adiw	r24, 0x03	; 3
    1894:	fc 01       	movw	r30, r24
    1896:	e2 0f       	add	r30, r18
    1898:	f3 1f       	adc	r31, r19
    189a:	80 81       	ld	r24, Z
    189c:	8b 30       	cpi	r24, 0x0B	; 11
    189e:	20 f0       	brcs	.+8      	; 0x18a8 <main+0x8a>
				UART_sendByte(PW_NOTFOUND);     //IF IT'S WRONG ONLY ONCE IS ENOUGH TO TELL THERE IS NO PASSWORD (0XFF) EMPTY EEPROM
    18a0:	8e e1       	ldi	r24, 0x1E	; 30
    18a2:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <UART_sendByte>
    18a6:	0a c0       	rjmp	.+20     	; 0x18bc <main+0x9e>


//state0              ///checking here if we already saved a password on the EEPROM or this is the first time

		recievePassword(arr);
		for(i = 0; i < PASSWORD_LENGTH; i++) { //checking if the passcodes are the same
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	8f 5f       	subi	r24, 0xFF	; 255
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	85 30       	cpi	r24, 0x05	; 5
    18b2:	58 f3       	brcs	.-42     	; 0x188a <main+0x6c>
			if(arr[i] > 10) {					//MAXIMUM KEYPAD NUMBER
				UART_sendByte(PW_NOTFOUND);     //IF IT'S WRONG ONLY ONCE IS ENOUGH TO TELL THERE IS NO PASSWORD (0XFF) EMPTY EEPROM
				goto state1;					//GO TO FIRST STAGE TO SETUP THE FIRST PASSWORD OF THIS DOOR
			}
		}
		UART_sendByte(PW_FOUND);				//IF WE DIDNT JUMP TO STATE1 SO WE KNOW THE INITIAL PASSWORD IS SAVED ON EEPROM
    18b4:	84 e1       	ldi	r24, 0x14	; 20
    18b6:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <UART_sendByte>
    18ba:	5e c0       	rjmp	.+188    	; 0x1978 <main+0x15a>
		goto main_menu;							//GO TO MAIN MENU (WE CONFIRM PASSWORD UPON ACTION NOT BOOTUP TO AVOID THEFT AFTER POWER OUTAGE


state1:                //treating the door like a finite-state machine throughout my code
		printoutmessage_takeinput("NEW PASSCODE:", arr);
    18bc:	82 e7       	ldi	r24, 0x72	; 114
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	9e 01       	movw	r18, r28
    18c2:	2d 5f       	subi	r18, 0xFD	; 253
    18c4:	3f 4f       	sbci	r19, 0xFF	; 255
    18c6:	b9 01       	movw	r22, r18
    18c8:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <printoutmessage_takeinput>
		sendPassword(arr);
    18cc:	ce 01       	movw	r24, r28
    18ce:	03 96       	adiw	r24, 0x03	; 3
    18d0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <sendPassword>
		LCD_clearScreen();
    18d4:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <LCD_clearScreen>
		LCD_goToRowColumn(0,0);
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_goToRowColumn>
		printoutmessage_takeinput("CONFIRM PASSCODE:", arr);
    18e0:	80 e6       	ldi	r24, 0x60	; 96
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9e 01       	movw	r18, r28
    18e6:	2d 5f       	subi	r18, 0xFD	; 253
    18e8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ea:	b9 01       	movw	r22, r18
    18ec:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <printoutmessage_takeinput>
		LCD_clearScreen();
    18f0:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <LCD_clearScreen>
		LCD_goToRowColumn(0,0);
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_goToRowColumn>
		LCD_displayString("CHECKING..."); // MAKING IT MORE USER FRIENDLY SHOWING MESSAGES THROUGHT THE RUNTIME USING DELAY BELOW
    18fc:	80 e8       	ldi	r24, 0x80	; 128
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>
		sendPassword(arr);
    1904:	ce 01       	movw	r24, r28
    1906:	03 96       	adiw	r24, 0x03	; 3
    1908:	0e 94 a1 0b 	call	0x1742	; 0x1742 <sendPassword>
		delay_10xN(200);					// DELAY TO ALERT THE USER ACTION IS BEING TAKEN
    190c:	88 ec       	ldi	r24, 0xC8	; 200
    190e:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <delay_10xN>


		//First Password Transaction is Complete and we are doing verification now
		uC_Message = UART_recieveByte(); //Microcontroller2 is ready verifying
    1912:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <UART_recieveByte>
    1916:	8a 83       	std	Y+2, r24	; 0x02
		LCD_clearScreen();
    1918:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <LCD_clearScreen>
		if(uC_Message == CONFIRM) {
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	41 f4       	brne	.+16     	; 0x1932 <main+0x114>
			LCD_displayString("CONFIRM"); //SHOWING THE USER THE PASSWORDS INDEED MATCH
    1922:	8c e8       	ldi	r24, 0x8C	; 140
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>
			delay_10xN(200);
    192a:	88 ec       	ldi	r24, 0xC8	; 200
    192c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <delay_10xN>
    1930:	23 c0       	rjmp	.+70     	; 0x1978 <main+0x15a>
			goto main_menu;					//JUMP TO MAIN MENU
		}
		else if(uC_Message == ERROR) {
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	88 23       	and	r24, r24
    1936:	91 f4       	brne	.+36     	; 0x195c <main+0x13e>
			LCD_displayString("PASSCODE");
    1938:	84 e9       	ldi	r24, 0x94	; 148
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>
			LCD_goToRowColumn(1,0);
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_goToRowColumn>
			LCD_displayString("MISMATCH");  //TELLING THE USER THERE IS A MISMATCH
    1948:	8d e9       	ldi	r24, 0x9D	; 157
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>
			delay_10xN(200);				// DELAY TO ALERT THE USER ACTION IS BEING TAKEN
    1950:	88 ec       	ldi	r24, 0xC8	; 200
    1952:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <delay_10xN>
			LCD_clearScreen();
    1956:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <LCD_clearScreen>
    195a:	b0 cf       	rjmp	.-160    	; 0x18bc <main+0x9e>
			goto state1;					//GO BACK TO INITIAL STATE
		}
		else if(uC_Message == REPEATED_MISTAKE) {	//REPEATED MISTAKE FREEZE THE TIMER UNTIL BUZZER IS OFF
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	82 30       	cpi	r24, 0x02	; 2
    1960:	59 f4       	brne	.+22     	; 0x1978 <main+0x15a>
			LCD_displayString("ERROR");				//ALERTING THE USER THAT THERE IS A MISTAKE
    1962:	86 ea       	ldi	r24, 0xA6	; 166
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>
			while(UART_recieveByte() != DONE) {}
    196a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <UART_recieveByte>
    196e:	87 30       	cpi	r24, 0x07	; 7
    1970:	e1 f7       	brne	.-8      	; 0x196a <main+0x14c>
			LCD_clearScreen();
    1972:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <LCD_clearScreen>
    1976:	a2 cf       	rjmp	.-188    	; 0x18bc <main+0x9e>
			goto state1;							//PEOPLE ARE ALERT WE CAN GO BACK TO INITIAL STATE
		}

main_menu:										//OUR MAIN STATE
		LCD_clearScreen();
    1978:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <LCD_clearScreen>
		LCD_displayString("+ NEW PASSCODE");
    197c:	8c ea       	ldi	r24, 0xAC	; 172
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>
		LCD_goToRowColumn(1,0);
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	60 e0       	ldi	r22, 0x00	; 0
    1988:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_goToRowColumn>
		LCD_displayString("- OPEN DOOR");
    198c:	8b eb       	ldi	r24, 0xBB	; 187
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>
		while(1) {
		if(KeyPad_getPressedKey() == '+') {
    1994:	0e 94 9b 05 	call	0xb36	; 0xb36 <KeyPad_getPressedKey>
    1998:	8b 32       	cpi	r24, 0x2B	; 43
    199a:	a9 f5       	brne	.+106    	; 0x1a06 <main+0x1e8>
			UART_sendByte(NEW_PASSCODE);
    199c:	85 e0       	ldi	r24, 0x05	; 5
    199e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <UART_sendByte>
NEWPASSCODE_CONFIRMATION:						//GO BACK LABEL IF THERE IS A MISMATCH
			confirmPasscode(arr);
    19a2:	ce 01       	movw	r24, r28
    19a4:	03 96       	adiw	r24, 0x03	; 3
    19a6:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <confirmPasscode>
			uC_Message = UART_recieveByte();
    19aa:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <UART_recieveByte>
    19ae:	8a 83       	std	Y+2, r24	; 0x02
			if(uC_Message == CONFIRM) {
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	81 30       	cpi	r24, 0x01	; 1
    19b4:	19 f4       	brne	.+6      	; 0x19bc <main+0x19e>
				LCD_clearScreen();
    19b6:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <LCD_clearScreen>
    19ba:	80 cf       	rjmp	.-256    	; 0x18bc <main+0x9e>
				goto state1;					//GO BACK TO INITIAL OUT OF THE BOX EXPERIENCE
			}
			else if(uC_Message == ERROR) {
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	88 23       	and	r24, r24
    19c0:	91 f4       	brne	.+36     	; 0x19e6 <main+0x1c8>
				LCD_clearScreen();
    19c2:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <LCD_clearScreen>
				LCD_displayString("WRONG");
    19c6:	87 ec       	ldi	r24, 0xC7	; 199
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>
				LCD_goToRowColumn(1,0);
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_goToRowColumn>
				LCD_displayString("PASSCODE");
    19d6:	84 e9       	ldi	r24, 0x94	; 148
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>
				delay_10xN(200);
    19de:	88 ec       	ldi	r24, 0xC8	; 200
    19e0:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <delay_10xN>
    19e4:	de cf       	rjmp	.-68     	; 0x19a2 <main+0x184>
				goto NEWPASSCODE_CONFIRMATION;		//GO BACK LABEL IF THERE IS A MISMATCH
			}
			else if(uC_Message == REPEATED_MISTAKE) {	//REPEATED MISTAKE BUZZER ON
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	82 30       	cpi	r24, 0x02	; 2
    19ea:	a1 f6       	brne	.-88     	; 0x1994 <main+0x176>
				LCD_clearScreen();
    19ec:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <LCD_clearScreen>
				LCD_displayString("ERROR");
    19f0:	86 ea       	ldi	r24, 0xA6	; 166
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>
				while(UART_recieveByte() != DONE) {}	//FREEZE UNTIL BUZZER IS OFF AND MC2 IS DONE
    19f8:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <UART_recieveByte>
    19fc:	87 30       	cpi	r24, 0x07	; 7
    19fe:	e1 f7       	brne	.-8      	; 0x19f8 <main+0x1da>
				LCD_clearScreen();
    1a00:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <LCD_clearScreen>
    1a04:	b9 cf       	rjmp	.-142    	; 0x1978 <main+0x15a>
				goto main_menu;							//BACK TO MAIN MENU
			}
		}
		else if(KeyPad_getPressedKey() == '-') {
    1a06:	0e 94 9b 05 	call	0xb36	; 0xb36 <KeyPad_getPressedKey>
    1a0a:	8d 32       	cpi	r24, 0x2D	; 45
    1a0c:	19 f6       	brne	.-122    	; 0x1994 <main+0x176>
			UART_sendByte(OPEN_DOOR);
    1a0e:	84 e0       	ldi	r24, 0x04	; 4
    1a10:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <UART_sendByte>
OPENDOOR_CONFIRMATION:									//GO BACK LABEL IF THERE IS A MISMATCH
			confirmPasscode(arr);
    1a14:	ce 01       	movw	r24, r28
    1a16:	03 96       	adiw	r24, 0x03	; 3
    1a18:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <confirmPasscode>
			uC_Message = UART_recieveByte();
    1a1c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <UART_recieveByte>
    1a20:	8a 83       	std	Y+2, r24	; 0x02
			if(uC_Message == CONFIRM) {
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	81 30       	cpi	r24, 0x01	; 1
    1a26:	79 f5       	brne	.+94     	; 0x1a86 <main+0x268>
				while(UART_recieveByte()!= DOOR_UNLOCKING) {}     //WAIT HANDSHAKE FROM MC2 THAT DOOR IS UNLOCKING
    1a28:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <UART_recieveByte>
    1a2c:	88 30       	cpi	r24, 0x08	; 8
    1a2e:	e1 f7       	brne	.-8      	; 0x1a28 <main+0x20a>
				LCD_clearScreen();
    1a30:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <LCD_clearScreen>
				LCD_goToRowColumn(0,0);
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_goToRowColumn>
				LCD_displayString("DOOR UNLOCKING");				//BETTER USER EXPERIENCE SHOWING IT THE DOOR IS UNLOCKING
    1a3c:	8d ec       	ldi	r24, 0xCD	; 205
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>


				while(UART_recieveByte()!= DOOR_STOP) {}			 //WAIT HANDSHAKE FROM MC2 THAT DOOR IS FULLY OPEN
    1a44:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <UART_recieveByte>
    1a48:	8a 30       	cpi	r24, 0x0A	; 10
    1a4a:	e1 f7       	brne	.-8      	; 0x1a44 <main+0x226>
				LCD_clearScreen();
    1a4c:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <LCD_clearScreen>
				LCD_goToRowColumn(0,0);
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	60 e0       	ldi	r22, 0x00	; 0
    1a54:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_goToRowColumn>
				LCD_displayString("DOOR OPEN");							//BETTER USER EXPERIENCE SHOWING IT THE DOOR IS FULLY OPEN
    1a58:	8c ed       	ldi	r24, 0xDC	; 220
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>

				while(UART_recieveByte()!= DOOR_LOCKING) {}				//WAIT HANDSHAKE FROM MC2 THAT DOOR IS CLOSING
    1a60:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <UART_recieveByte>
    1a64:	89 30       	cpi	r24, 0x09	; 9
    1a66:	e1 f7       	brne	.-8      	; 0x1a60 <main+0x242>
				LCD_clearScreen();
    1a68:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <LCD_clearScreen>
				LCD_goToRowColumn(0,0);
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_goToRowColumn>
				LCD_displayString("DOOR LOCKING");					//BETTER USER EXPERIENCE SHOWING IT THE DOOR IS CLOSING
    1a74:	86 ee       	ldi	r24, 0xE6	; 230
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>
				while(UART_recieveByte()!= DONE) {}
    1a7c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <UART_recieveByte>
    1a80:	87 30       	cpi	r24, 0x07	; 7
    1a82:	e1 f7       	brne	.-8      	; 0x1a7c <main+0x25e>
    1a84:	79 cf       	rjmp	.-270    	; 0x1978 <main+0x15a>
				goto main_menu;										//DOOR IS OPEN THEN CLOSED WE CAN GO BACK TO OUR MENU
			}

			else if(uC_Message == ERROR) {							//NORMAL ERROR
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	88 23       	and	r24, r24
    1a8a:	91 f4       	brne	.+36     	; 0x1ab0 <main+0x292>
				LCD_clearScreen();
    1a8c:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <LCD_clearScreen>
				LCD_displayString("WRONG");
    1a90:	87 ec       	ldi	r24, 0xC7	; 199
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>
				LCD_goToRowColumn(1,0);
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	60 e0       	ldi	r22, 0x00	; 0
    1a9c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_goToRowColumn>
				LCD_displayString("PASSCODE");
    1aa0:	84 e9       	ldi	r24, 0x94	; 148
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>
				delay_10xN(200);
    1aa8:	88 ec       	ldi	r24, 0xC8	; 200
    1aaa:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <delay_10xN>
    1aae:	b2 cf       	rjmp	.-156    	; 0x1a14 <main+0x1f6>
				goto OPENDOOR_CONFIRMATION;							//REPEAT STEPS THERE IS ANOTHER CHANCES
			}

			else if(uC_Message == REPEATED_MISTAKE) {				//REPEATED MISTAKE BUZZER IS ON
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	82 30       	cpi	r24, 0x02	; 2
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <main+0x29a>
    1ab6:	6e cf       	rjmp	.-292    	; 0x1994 <main+0x176>
				LCD_clearScreen();
    1ab8:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <LCD_clearScreen>
				LCD_displayString("ERROR");
    1abc:	86 ea       	ldi	r24, 0xA6	; 166
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_displayString>
				while(UART_recieveByte() != DONE) {}        		//MC1 FREEZE UNTILL BUZZER IS OFF
    1ac4:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <UART_recieveByte>
    1ac8:	87 30       	cpi	r24, 0x07	; 7
    1aca:	e1 f7       	brne	.-8      	; 0x1ac4 <main+0x2a6>
				LCD_clearScreen();
    1acc:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <LCD_clearScreen>
    1ad0:	53 cf       	rjmp	.-346    	; 0x1978 <main+0x15a>

00001ad2 <delay_10xN>:
#include "mydelay.h"


void delay_10xN (uint8 N) { //function to overcome the 32ms maximum delay possible by _delay_ms_ function on 8mhz clock
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	61 97       	sbiw	r28, 0x11	; 17
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	89 8b       	std	Y+17, r24	; 0x11
	for(int i = 0; i < N; i++) {
    1ae8:	18 8a       	std	Y+16, r1	; 0x10
    1aea:	1f 86       	std	Y+15, r1	; 0x0f
    1aec:	77 c0       	rjmp	.+238    	; 0x1bdc <delay_10xN+0x10a>
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	a0 e2       	ldi	r26, 0x20	; 32
    1af4:	b1 e4       	ldi	r27, 0x41	; 65
    1af6:	8b 87       	std	Y+11, r24	; 0x0b
    1af8:	9c 87       	std	Y+12, r25	; 0x0c
    1afa:	ad 87       	std	Y+13, r26	; 0x0d
    1afc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	4a ef       	ldi	r20, 0xFA	; 250
    1b0c:	54 e4       	ldi	r21, 0x44	; 68
    1b0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	8f 83       	std	Y+7, r24	; 0x07
    1b18:	98 87       	std	Y+8, r25	; 0x08
    1b1a:	a9 87       	std	Y+9, r26	; 0x09
    1b1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b20:	78 85       	ldd	r23, Y+8	; 0x08
    1b22:	89 85       	ldd	r24, Y+9	; 0x09
    1b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e8       	ldi	r20, 0x80	; 128
    1b2c:	5f e3       	ldi	r21, 0x3F	; 63
    1b2e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b32:	88 23       	and	r24, r24
    1b34:	2c f4       	brge	.+10     	; 0x1b40 <delay_10xN+0x6e>
		__ticks = 1;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9e 83       	std	Y+6, r25	; 0x06
    1b3c:	8d 83       	std	Y+5, r24	; 0x05
    1b3e:	3f c0       	rjmp	.+126    	; 0x1bbe <delay_10xN+0xec>
	else if (__tmp > 65535)
    1b40:	6f 81       	ldd	r22, Y+7	; 0x07
    1b42:	78 85       	ldd	r23, Y+8	; 0x08
    1b44:	89 85       	ldd	r24, Y+9	; 0x09
    1b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	3f ef       	ldi	r19, 0xFF	; 255
    1b4c:	4f e7       	ldi	r20, 0x7F	; 127
    1b4e:	57 e4       	ldi	r21, 0x47	; 71
    1b50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b54:	18 16       	cp	r1, r24
    1b56:	4c f5       	brge	.+82     	; 0x1baa <delay_10xN+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e2       	ldi	r20, 0x20	; 32
    1b66:	51 e4       	ldi	r21, 0x41	; 65
    1b68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	bc 01       	movw	r22, r24
    1b72:	cd 01       	movw	r24, r26
    1b74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	9e 83       	std	Y+6, r25	; 0x06
    1b7e:	8d 83       	std	Y+5, r24	; 0x05
    1b80:	0f c0       	rjmp	.+30     	; 0x1ba0 <delay_10xN+0xce>
    1b82:	88 ec       	ldi	r24, 0xC8	; 200
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	9c 83       	std	Y+4, r25	; 0x04
    1b88:	8b 83       	std	Y+3, r24	; 0x03
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <delay_10xN+0xbc>
    1b92:	9c 83       	std	Y+4, r25	; 0x04
    1b94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b96:	8d 81       	ldd	r24, Y+5	; 0x05
    1b98:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	9e 83       	std	Y+6, r25	; 0x06
    1b9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	69 f7       	brne	.-38     	; 0x1b82 <delay_10xN+0xb0>
    1ba8:	14 c0       	rjmp	.+40     	; 0x1bd2 <delay_10xN+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1baa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bac:	78 85       	ldd	r23, Y+8	; 0x08
    1bae:	89 85       	ldd	r24, Y+9	; 0x09
    1bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
    1bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc2:	9a 83       	std	Y+2, r25	; 0x02
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <delay_10xN+0xf8>
    1bce:	9a 83       	std	Y+2, r25	; 0x02
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    1bd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd4:	98 89       	ldd	r25, Y+16	; 0x10
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	98 8b       	std	Y+16, r25	; 0x10
    1bda:	8f 87       	std	Y+15, r24	; 0x0f
    1bdc:	89 89       	ldd	r24, Y+17	; 0x11
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be4:	98 89       	ldd	r25, Y+16	; 0x10
    1be6:	82 17       	cp	r24, r18
    1be8:	93 07       	cpc	r25, r19
    1bea:	0c f4       	brge	.+2      	; 0x1bee <delay_10xN+0x11c>
    1bec:	80 cf       	rjmp	.-256    	; 0x1aee <delay_10xN+0x1c>
		_delay_ms(10);
	}
}
    1bee:	61 96       	adiw	r28, 0x11	; 17
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void UART_init(const UART_config* config) {
    1c00:	0f 93       	push	r16
    1c02:	1f 93       	push	r17
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <UART_init+0xa>
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <UART_init+0xc>
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	9a 83       	std	Y+2, r25	; 0x02
    1c12:	89 83       	std	Y+1, r24	; 0x01
	//RESET
	UCSRA = 0;
    1c14:	eb e2       	ldi	r30, 0x2B	; 43
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	10 82       	st	Z, r1
	UCSRB = 0;
    1c1a:	ea e2       	ldi	r30, 0x2A	; 42
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	10 82       	st	Z, r1
	UCSRC = 0;
    1c20:	e0 e4       	ldi	r30, 0x40	; 64
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	10 82       	st	Z, r1

	//BAUDRATE
	UBRRL= (BAUD_PRESCALE);
    1c26:	09 e2       	ldi	r16, 0x29	; 41
    1c28:	10 e0       	ldi	r17, 0x00	; 0
    1c2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2e:	82 85       	ldd	r24, Z+10	; 0x0a
    1c30:	93 85       	ldd	r25, Z+11	; 0x0b
    1c32:	cc 01       	movw	r24, r24
    1c34:	a0 e0       	ldi	r26, 0x00	; 0
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	aa 1f       	adc	r26, r26
    1c3e:	bb 1f       	adc	r27, r27
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	aa 1f       	adc	r26, r26
    1c46:	bb 1f       	adc	r27, r27
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	aa 1f       	adc	r26, r26
    1c4e:	bb 1f       	adc	r27, r27
    1c50:	9c 01       	movw	r18, r24
    1c52:	ad 01       	movw	r20, r26
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	92 e1       	ldi	r25, 0x12	; 18
    1c58:	aa e7       	ldi	r26, 0x7A	; 122
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__udivmodsi4>
    1c64:	da 01       	movw	r26, r20
    1c66:	c9 01       	movw	r24, r18
    1c68:	81 50       	subi	r24, 0x01	; 1
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	80 83       	st	Z, r24
	UBRRH= (BAUD_PRESCALE>>8);
    1c6e:	00 e4       	ldi	r16, 0x40	; 64
    1c70:	10 e0       	ldi	r17, 0x00	; 0
    1c72:	e9 81       	ldd	r30, Y+1	; 0x01
    1c74:	fa 81       	ldd	r31, Y+2	; 0x02
    1c76:	82 85       	ldd	r24, Z+10	; 0x0a
    1c78:	93 85       	ldd	r25, Z+11	; 0x0b
    1c7a:	cc 01       	movw	r24, r24
    1c7c:	a0 e0       	ldi	r26, 0x00	; 0
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	aa 1f       	adc	r26, r26
    1c86:	bb 1f       	adc	r27, r27
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	aa 1f       	adc	r26, r26
    1c8e:	bb 1f       	adc	r27, r27
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	aa 1f       	adc	r26, r26
    1c96:	bb 1f       	adc	r27, r27
    1c98:	9c 01       	movw	r18, r24
    1c9a:	ad 01       	movw	r20, r26
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	92 e1       	ldi	r25, 0x12	; 18
    1ca0:	aa e7       	ldi	r26, 0x7A	; 122
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	bc 01       	movw	r22, r24
    1ca6:	cd 01       	movw	r24, r26
    1ca8:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__udivmodsi4>
    1cac:	da 01       	movw	r26, r20
    1cae:	c9 01       	movw	r24, r18
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	a1 09       	sbc	r26, r1
    1cb4:	b1 09       	sbc	r27, r1
    1cb6:	89 2f       	mov	r24, r25
    1cb8:	9a 2f       	mov	r25, r26
    1cba:	ab 2f       	mov	r26, r27
    1cbc:	bb 27       	eor	r27, r27
    1cbe:	f8 01       	movw	r30, r16
    1cc0:	80 83       	st	Z, r24
	//Asynchronus or Synchronus
	if(config->USART_MODE) {SET_BIT(UCSRC, UMSEL);}
    1cc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc6:	86 81       	ldd	r24, Z+6	; 0x06
    1cc8:	88 23       	and	r24, r24
    1cca:	39 f0       	breq	.+14     	; 0x1cda <UART_init+0xda>
    1ccc:	a0 e4       	ldi	r26, 0x40	; 64
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e0 e4       	ldi	r30, 0x40	; 64
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	80 64       	ori	r24, 0x40	; 64
    1cd8:	8c 93       	st	X, r24

	//Stop bit
	if(config->stopbit) {SET_BIT(UCSRC, USBS);}
    1cda:	e9 81       	ldd	r30, Y+1	; 0x01
    1cdc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cde:	87 81       	ldd	r24, Z+7	; 0x07
    1ce0:	88 23       	and	r24, r24
    1ce2:	39 f0       	breq	.+14     	; 0x1cf2 <UART_init+0xf2>
    1ce4:	a0 e4       	ldi	r26, 0x40	; 64
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e0 e4       	ldi	r30, 0x40	; 64
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	88 60       	ori	r24, 0x08	; 8
    1cf0:	8c 93       	st	X, r24

	//Parity Error
	if(config->ParityError) {SET_BIT(UCSRA, PE);}
    1cf2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf6:	80 81       	ld	r24, Z
    1cf8:	88 23       	and	r24, r24
    1cfa:	39 f0       	breq	.+14     	; 0x1d0a <UART_init+0x10a>
    1cfc:	ab e2       	ldi	r26, 0x2B	; 43
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	eb e2       	ldi	r30, 0x2B	; 43
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	84 60       	ori	r24, 0x04	; 4
    1d08:	8c 93       	st	X, r24

	//Data Overrun Error
	if(config->DataOverrunError) {SET_BIT(UCSRA, DOR);}
    1d0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0e:	82 81       	ldd	r24, Z+2	; 0x02
    1d10:	88 23       	and	r24, r24
    1d12:	39 f0       	breq	.+14     	; 0x1d22 <UART_init+0x122>
    1d14:	ab e2       	ldi	r26, 0x2B	; 43
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	eb e2       	ldi	r30, 0x2B	; 43
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	88 60       	ori	r24, 0x08	; 8
    1d20:	8c 93       	st	X, r24

	//Frame Error
	if(config->FrameError) {SET_BIT(UCSRA, FE);}
    1d22:	e9 81       	ldd	r30, Y+1	; 0x01
    1d24:	fa 81       	ldd	r31, Y+2	; 0x02
    1d26:	81 81       	ldd	r24, Z+1	; 0x01
    1d28:	88 23       	and	r24, r24
    1d2a:	39 f0       	breq	.+14     	; 0x1d3a <UART_init+0x13a>
    1d2c:	ab e2       	ldi	r26, 0x2B	; 43
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	eb e2       	ldi	r30, 0x2B	; 43
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	80 61       	ori	r24, 0x10	; 16
    1d38:	8c 93       	st	X, r24

	//Transmission Speed
	if(config->DoubleTransmission) {SET_BIT(UCSRA, U2X);}
    1d3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d3e:	83 81       	ldd	r24, Z+3	; 0x03
    1d40:	88 23       	and	r24, r24
    1d42:	39 f0       	breq	.+14     	; 0x1d52 <UART_init+0x152>
    1d44:	ab e2       	ldi	r26, 0x2B	; 43
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	eb e2       	ldi	r30, 0x2B	; 43
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	82 60       	ori	r24, 0x02	; 2
    1d50:	8c 93       	st	X, r24

	//Multi-Processor Communication
	if(config->MPCMmode) {SET_BIT(UCSRA, MPCM);}
    1d52:	e9 81       	ldd	r30, Y+1	; 0x01
    1d54:	fa 81       	ldd	r31, Y+2	; 0x02
    1d56:	84 81       	ldd	r24, Z+4	; 0x04
    1d58:	88 23       	and	r24, r24
    1d5a:	39 f0       	breq	.+14     	; 0x1d6a <UART_init+0x16a>
    1d5c:	ab e2       	ldi	r26, 0x2B	; 43
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	eb e2       	ldi	r30, 0x2B	; 43
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	81 60       	ori	r24, 0x01	; 1
    1d68:	8c 93       	st	X, r24

	UCSRB = (1<<RXEN) | (1<<TXEN);   //Enabling Transmission and Recieving
    1d6a:	ea e2       	ldi	r30, 0x2A	; 42
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	88 e1       	ldi	r24, 0x18	; 24
    1d70:	80 83       	st	Z, r24

	//Character Size
	switch (config->characterSize) {
    1d72:	e9 81       	ldd	r30, Y+1	; 0x01
    1d74:	fa 81       	ldd	r31, Y+2	; 0x02
    1d76:	81 85       	ldd	r24, Z+9	; 0x09
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	3c 83       	std	Y+4, r19	; 0x04
    1d7e:	2b 83       	std	Y+3, r18	; 0x03
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	9c 81       	ldd	r25, Y+4	; 0x04
    1d84:	82 30       	cpi	r24, 0x02	; 2
    1d86:	91 05       	cpc	r25, r1
    1d88:	f1 f0       	breq	.+60     	; 0x1dc6 <UART_init+0x1c6>
    1d8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d8e:	e3 30       	cpi	r30, 0x03	; 3
    1d90:	f1 05       	cpc	r31, r1
    1d92:	34 f4       	brge	.+12     	; 0x1da0 <UART_init+0x1a0>
    1d94:	2b 81       	ldd	r18, Y+3	; 0x03
    1d96:	3c 81       	ldd	r19, Y+4	; 0x04
    1d98:	21 30       	cpi	r18, 0x01	; 1
    1d9a:	31 05       	cpc	r19, r1
    1d9c:	61 f0       	breq	.+24     	; 0x1db6 <UART_init+0x1b6>
    1d9e:	3f c0       	rjmp	.+126    	; 0x1e1e <UART_init+0x21e>
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04
    1da4:	83 30       	cpi	r24, 0x03	; 3
    1da6:	91 05       	cpc	r25, r1
    1da8:	b1 f0       	breq	.+44     	; 0x1dd6 <UART_init+0x1d6>
    1daa:	eb 81       	ldd	r30, Y+3	; 0x03
    1dac:	fc 81       	ldd	r31, Y+4	; 0x04
    1dae:	e4 30       	cpi	r30, 0x04	; 4
    1db0:	f1 05       	cpc	r31, r1
    1db2:	01 f1       	breq	.+64     	; 0x1df4 <UART_init+0x1f4>
    1db4:	34 c0       	rjmp	.+104    	; 0x1e1e <UART_init+0x21e>
		case six:
			SET_BIT(UCSRC, UCSZ0);
    1db6:	a0 e4       	ldi	r26, 0x40	; 64
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e0 e4       	ldi	r30, 0x40	; 64
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	82 60       	ori	r24, 0x02	; 2
    1dc2:	8c 93       	st	X, r24
    1dc4:	2c c0       	rjmp	.+88     	; 0x1e1e <UART_init+0x21e>
			break;
		case seven:
			SET_BIT(UCSRC, UCSZ1);
    1dc6:	a0 e4       	ldi	r26, 0x40	; 64
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e0 e4       	ldi	r30, 0x40	; 64
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	84 60       	ori	r24, 0x04	; 4
    1dd2:	8c 93       	st	X, r24
    1dd4:	24 c0       	rjmp	.+72     	; 0x1e1e <UART_init+0x21e>
			break;
		case eight:
			SET_BIT(UCSRC, UCSZ1);
    1dd6:	a0 e4       	ldi	r26, 0x40	; 64
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e0 e4       	ldi	r30, 0x40	; 64
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	84 60       	ori	r24, 0x04	; 4
    1de2:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ0);
    1de4:	a0 e4       	ldi	r26, 0x40	; 64
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e0 e4       	ldi	r30, 0x40	; 64
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	82 60       	ori	r24, 0x02	; 2
    1df0:	8c 93       	st	X, r24
    1df2:	15 c0       	rjmp	.+42     	; 0x1e1e <UART_init+0x21e>
			break;
		case nine:
			SET_BIT(UCSRC, UCSZ1);
    1df4:	a0 e4       	ldi	r26, 0x40	; 64
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e0 e4       	ldi	r30, 0x40	; 64
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	84 60       	ori	r24, 0x04	; 4
    1e00:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ0);
    1e02:	a0 e4       	ldi	r26, 0x40	; 64
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e0 e4       	ldi	r30, 0x40	; 64
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	82 60       	ori	r24, 0x02	; 2
    1e0e:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ2);
    1e10:	a0 e4       	ldi	r26, 0x40	; 64
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e0 e4       	ldi	r30, 0x40	; 64
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	84 60       	ori	r24, 0x04	; 4
    1e1c:	8c 93       	st	X, r24
		default:
			break;
	}

	//Parity Mode
	if(config->parity) {SET_BIT(UCSRC, UPM1);}
    1e1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e20:	fa 81       	ldd	r31, Y+2	; 0x02
    1e22:	85 81       	ldd	r24, Z+5	; 0x05
    1e24:	88 23       	and	r24, r24
    1e26:	41 f0       	breq	.+16     	; 0x1e38 <UART_init+0x238>
    1e28:	a0 e4       	ldi	r26, 0x40	; 64
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e0 e4       	ldi	r30, 0x40	; 64
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	80 62       	ori	r24, 0x20	; 32
    1e34:	8c 93       	st	X, r24
    1e36:	13 c0       	rjmp	.+38     	; 0x1e5e <UART_init+0x25e>
	else if(config->parity) {SET_BIT(UCSRC, UPM1); SET_BIT(UCSRC, UPM0);}
    1e38:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3c:	85 81       	ldd	r24, Z+5	; 0x05
    1e3e:	88 23       	and	r24, r24
    1e40:	71 f0       	breq	.+28     	; 0x1e5e <UART_init+0x25e>
    1e42:	a0 e4       	ldi	r26, 0x40	; 64
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e0 e4       	ldi	r30, 0x40	; 64
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	80 62       	ori	r24, 0x20	; 32
    1e4e:	8c 93       	st	X, r24
    1e50:	a0 e4       	ldi	r26, 0x40	; 64
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e0 e4       	ldi	r30, 0x40	; 64
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	80 61       	ori	r24, 0x10	; 16
    1e5c:	8c 93       	st	X, r24

	//Clock Polarity
	if(config->clockPolarity == RISING) {SET_BIT(UCSRC, UCPOL);}
    1e5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e60:	fa 81       	ldd	r31, Y+2	; 0x02
    1e62:	80 85       	ldd	r24, Z+8	; 0x08
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	39 f4       	brne	.+14     	; 0x1e76 <UART_init+0x276>
    1e68:	a0 e4       	ldi	r26, 0x40	; 64
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e0 e4       	ldi	r30, 0x40	; 64
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	81 60       	ori	r24, 0x01	; 1
    1e74:	8c 93       	st	X, r24

}
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	1f 91       	pop	r17
    1e84:	0f 91       	pop	r16
    1e86:	08 95       	ret

00001e88 <UART_sendByte>:

void UART_sendByte(const uint8 data) {
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	0f 92       	push	r0
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1e94:	eb e2       	ldi	r30, 0x2B	; 43
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	88 2f       	mov	r24, r24
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	80 72       	andi	r24, 0x20	; 32
    1ea0:	90 70       	andi	r25, 0x00	; 0
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	b9 f3       	breq	.-18     	; 0x1e94 <UART_sendByte+0xc>
	UDR = data;
    1ea6:	ec e2       	ldi	r30, 0x2C	; 44
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	80 83       	st	Z, r24
}
    1eae:	0f 90       	pop	r0
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <UART_sendString>:


void UART_sendString(uint8 *str) {
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <UART_sendString+0x6>
    1ebc:	0f 92       	push	r0
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	9b 83       	std	Y+3, r25	; 0x03
    1ec4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1ec6:	19 82       	std	Y+1, r1	; 0x01
    1ec8:	0e c0       	rjmp	.+28     	; 0x1ee6 <UART_sendString+0x30>
	while(str[i] != '\0')
	{
		UART_sendByte(str[i]);
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	e2 0f       	add	r30, r18
    1ed8:	f3 1f       	adc	r31, r19
    1eda:	80 81       	ld	r24, Z
    1edc:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <UART_sendByte>
		i++;
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	8f 5f       	subi	r24, 0xFF	; 255
    1ee4:	89 83       	std	Y+1, r24	; 0x01
}


void UART_sendString(uint8 *str) {
	uint8 i = 0;
	while(str[i] != '\0')
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	28 2f       	mov	r18, r24
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	e2 0f       	add	r30, r18
    1ef4:	f3 1f       	adc	r31, r19
    1ef6:	80 81       	ld	r24, Z
    1ef8:	88 23       	and	r24, r24
    1efa:	39 f7       	brne	.-50     	; 0x1eca <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}
	UART_sendByte('*');
    1efc:	8a e2       	ldi	r24, 0x2A	; 42
    1efe:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <UART_sendByte>
}
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <UART_recieveByte>:

uint8 UART_recieveByte() {
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1f16:	eb e2       	ldi	r30, 0x2B	; 43
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	88 23       	and	r24, r24
    1f1e:	dc f7       	brge	.-10     	; 0x1f16 <UART_recieveByte+0x8>
    return UDR;
    1f20:	ec e2       	ldi	r30, 0x2C	; 44
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
}
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	08 95       	ret

00001f2c <UART_receiveString>:


void UART_receiveString(uint8 *str) {
    1f2c:	0f 93       	push	r16
    1f2e:	1f 93       	push	r17
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <UART_receiveString+0xa>
    1f36:	0f 92       	push	r0
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	9b 83       	std	Y+3, r25	; 0x03
    1f3e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f40:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_recieveByte();
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4c:	8c 01       	movw	r16, r24
    1f4e:	02 0f       	add	r16, r18
    1f50:	13 1f       	adc	r17, r19
    1f52:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <UART_recieveByte>
    1f56:	f8 01       	movw	r30, r16
    1f58:	80 83       	st	Z, r24
    1f5a:	0f c0       	rjmp	.+30     	; 0x1f7a <UART_receiveString+0x4e>
	while(str[i] != '*')
	{
		i++;
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	8f 5f       	subi	r24, 0xFF	; 255
    1f60:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_recieveByte();
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	28 2f       	mov	r18, r24
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6c:	8c 01       	movw	r16, r24
    1f6e:	02 0f       	add	r16, r18
    1f70:	13 1f       	adc	r17, r19
    1f72:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <UART_recieveByte>
    1f76:	f8 01       	movw	r30, r16
    1f78:	80 83       	st	Z, r24


void UART_receiveString(uint8 *str) {
	uint8 i = 0;
	str[i] = UART_recieveByte();
	while(str[i] != '*')
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	28 2f       	mov	r18, r24
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	9b 81       	ldd	r25, Y+3	; 0x03
    1f84:	fc 01       	movw	r30, r24
    1f86:	e2 0f       	add	r30, r18
    1f88:	f3 1f       	adc	r31, r19
    1f8a:	80 81       	ld	r24, Z
    1f8c:	8a 32       	cpi	r24, 0x2A	; 42
    1f8e:	31 f7       	brne	.-52     	; 0x1f5c <UART_receiveString+0x30>
	{
		i++;
		str[i] = UART_recieveByte();
	}
	str[i] = '\0';
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	9b 81       	ldd	r25, Y+3	; 0x03
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	e2 0f       	add	r30, r18
    1f9e:	f3 1f       	adc	r31, r19
    1fa0:	10 82       	st	Z, r1
}
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	1f 91       	pop	r17
    1fae:	0f 91       	pop	r16
    1fb0:	08 95       	ret

00001fb2 <__udivmodsi4>:
    1fb2:	a1 e2       	ldi	r26, 0x21	; 33
    1fb4:	1a 2e       	mov	r1, r26
    1fb6:	aa 1b       	sub	r26, r26
    1fb8:	bb 1b       	sub	r27, r27
    1fba:	fd 01       	movw	r30, r26
    1fbc:	0d c0       	rjmp	.+26     	; 0x1fd8 <__udivmodsi4_ep>

00001fbe <__udivmodsi4_loop>:
    1fbe:	aa 1f       	adc	r26, r26
    1fc0:	bb 1f       	adc	r27, r27
    1fc2:	ee 1f       	adc	r30, r30
    1fc4:	ff 1f       	adc	r31, r31
    1fc6:	a2 17       	cp	r26, r18
    1fc8:	b3 07       	cpc	r27, r19
    1fca:	e4 07       	cpc	r30, r20
    1fcc:	f5 07       	cpc	r31, r21
    1fce:	20 f0       	brcs	.+8      	; 0x1fd8 <__udivmodsi4_ep>
    1fd0:	a2 1b       	sub	r26, r18
    1fd2:	b3 0b       	sbc	r27, r19
    1fd4:	e4 0b       	sbc	r30, r20
    1fd6:	f5 0b       	sbc	r31, r21

00001fd8 <__udivmodsi4_ep>:
    1fd8:	66 1f       	adc	r22, r22
    1fda:	77 1f       	adc	r23, r23
    1fdc:	88 1f       	adc	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	1a 94       	dec	r1
    1fe2:	69 f7       	brne	.-38     	; 0x1fbe <__udivmodsi4_loop>
    1fe4:	60 95       	com	r22
    1fe6:	70 95       	com	r23
    1fe8:	80 95       	com	r24
    1fea:	90 95       	com	r25
    1fec:	9b 01       	movw	r18, r22
    1fee:	ac 01       	movw	r20, r24
    1ff0:	bd 01       	movw	r22, r26
    1ff2:	cf 01       	movw	r24, r30
    1ff4:	08 95       	ret

00001ff6 <__prologue_saves__>:
    1ff6:	2f 92       	push	r2
    1ff8:	3f 92       	push	r3
    1ffa:	4f 92       	push	r4
    1ffc:	5f 92       	push	r5
    1ffe:	6f 92       	push	r6
    2000:	7f 92       	push	r7
    2002:	8f 92       	push	r8
    2004:	9f 92       	push	r9
    2006:	af 92       	push	r10
    2008:	bf 92       	push	r11
    200a:	cf 92       	push	r12
    200c:	df 92       	push	r13
    200e:	ef 92       	push	r14
    2010:	ff 92       	push	r15
    2012:	0f 93       	push	r16
    2014:	1f 93       	push	r17
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	ca 1b       	sub	r28, r26
    2020:	db 0b       	sbc	r29, r27
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	de bf       	out	0x3e, r29	; 62
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	cd bf       	out	0x3d, r28	; 61
    202c:	09 94       	ijmp

0000202e <__epilogue_restores__>:
    202e:	2a 88       	ldd	r2, Y+18	; 0x12
    2030:	39 88       	ldd	r3, Y+17	; 0x11
    2032:	48 88       	ldd	r4, Y+16	; 0x10
    2034:	5f 84       	ldd	r5, Y+15	; 0x0f
    2036:	6e 84       	ldd	r6, Y+14	; 0x0e
    2038:	7d 84       	ldd	r7, Y+13	; 0x0d
    203a:	8c 84       	ldd	r8, Y+12	; 0x0c
    203c:	9b 84       	ldd	r9, Y+11	; 0x0b
    203e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2040:	b9 84       	ldd	r11, Y+9	; 0x09
    2042:	c8 84       	ldd	r12, Y+8	; 0x08
    2044:	df 80       	ldd	r13, Y+7	; 0x07
    2046:	ee 80       	ldd	r14, Y+6	; 0x06
    2048:	fd 80       	ldd	r15, Y+5	; 0x05
    204a:	0c 81       	ldd	r16, Y+4	; 0x04
    204c:	1b 81       	ldd	r17, Y+3	; 0x03
    204e:	aa 81       	ldd	r26, Y+2	; 0x02
    2050:	b9 81       	ldd	r27, Y+1	; 0x01
    2052:	ce 0f       	add	r28, r30
    2054:	d1 1d       	adc	r29, r1
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	ed 01       	movw	r28, r26
    2062:	08 95       	ret

00002064 <itoa>:
    2064:	fb 01       	movw	r30, r22
    2066:	9f 01       	movw	r18, r30
    2068:	e8 94       	clt
    206a:	42 30       	cpi	r20, 0x02	; 2
    206c:	c4 f0       	brlt	.+48     	; 0x209e <itoa+0x3a>
    206e:	45 32       	cpi	r20, 0x25	; 37
    2070:	b4 f4       	brge	.+44     	; 0x209e <itoa+0x3a>
    2072:	4a 30       	cpi	r20, 0x0A	; 10
    2074:	29 f4       	brne	.+10     	; 0x2080 <itoa+0x1c>
    2076:	97 fb       	bst	r25, 7
    2078:	1e f4       	brtc	.+6      	; 0x2080 <itoa+0x1c>
    207a:	90 95       	com	r25
    207c:	81 95       	neg	r24
    207e:	9f 4f       	sbci	r25, 0xFF	; 255
    2080:	64 2f       	mov	r22, r20
    2082:	77 27       	eor	r23, r23
    2084:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__udivmodhi4>
    2088:	80 5d       	subi	r24, 0xD0	; 208
    208a:	8a 33       	cpi	r24, 0x3A	; 58
    208c:	0c f0       	brlt	.+2      	; 0x2090 <itoa+0x2c>
    208e:	89 5d       	subi	r24, 0xD9	; 217
    2090:	81 93       	st	Z+, r24
    2092:	cb 01       	movw	r24, r22
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	a1 f7       	brne	.-24     	; 0x2080 <itoa+0x1c>
    2098:	16 f4       	brtc	.+4      	; 0x209e <itoa+0x3a>
    209a:	5d e2       	ldi	r21, 0x2D	; 45
    209c:	51 93       	st	Z+, r21
    209e:	10 82       	st	Z, r1
    20a0:	c9 01       	movw	r24, r18
    20a2:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <strrev>

000020a6 <strrev>:
    20a6:	dc 01       	movw	r26, r24
    20a8:	fc 01       	movw	r30, r24
    20aa:	67 2f       	mov	r22, r23
    20ac:	71 91       	ld	r23, Z+
    20ae:	77 23       	and	r23, r23
    20b0:	e1 f7       	brne	.-8      	; 0x20aa <strrev+0x4>
    20b2:	32 97       	sbiw	r30, 0x02	; 2
    20b4:	04 c0       	rjmp	.+8      	; 0x20be <strrev+0x18>
    20b6:	7c 91       	ld	r23, X
    20b8:	6d 93       	st	X+, r22
    20ba:	70 83       	st	Z, r23
    20bc:	62 91       	ld	r22, -Z
    20be:	ae 17       	cp	r26, r30
    20c0:	bf 07       	cpc	r27, r31
    20c2:	c8 f3       	brcs	.-14     	; 0x20b6 <strrev+0x10>
    20c4:	08 95       	ret

000020c6 <__udivmodhi4>:
    20c6:	aa 1b       	sub	r26, r26
    20c8:	bb 1b       	sub	r27, r27
    20ca:	51 e1       	ldi	r21, 0x11	; 17
    20cc:	07 c0       	rjmp	.+14     	; 0x20dc <__udivmodhi4_ep>

000020ce <__udivmodhi4_loop>:
    20ce:	aa 1f       	adc	r26, r26
    20d0:	bb 1f       	adc	r27, r27
    20d2:	a6 17       	cp	r26, r22
    20d4:	b7 07       	cpc	r27, r23
    20d6:	10 f0       	brcs	.+4      	; 0x20dc <__udivmodhi4_ep>
    20d8:	a6 1b       	sub	r26, r22
    20da:	b7 0b       	sbc	r27, r23

000020dc <__udivmodhi4_ep>:
    20dc:	88 1f       	adc	r24, r24
    20de:	99 1f       	adc	r25, r25
    20e0:	5a 95       	dec	r21
    20e2:	a9 f7       	brne	.-22     	; 0x20ce <__udivmodhi4_loop>
    20e4:	80 95       	com	r24
    20e6:	90 95       	com	r25
    20e8:	bc 01       	movw	r22, r24
    20ea:	cd 01       	movw	r24, r26
    20ec:	08 95       	ret

000020ee <_exit>:
    20ee:	f8 94       	cli

000020f0 <__stop_program>:
    20f0:	ff cf       	rjmp	.-2      	; 0x20f0 <__stop_program>
