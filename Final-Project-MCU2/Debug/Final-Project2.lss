
Final-Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00002e56  00002eea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080017a  0080017a  00003004  2**0
                  ALLOC
  3 .stab         00003288  00000000  00000000  00003004  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014de  00000000  00000000  0000628c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000776a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000790a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00007afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00009f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000b27d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c458  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000c618  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000c90b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d2d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3d 11 	call	0x227a	; 0x227a <main>
      8a:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <buzzer_tone>:
 *     1. get the time period
 *     2. Set the pins as output
 *     3. set one pin as ground
 *     4. switch the other pin between high and low according to frequency
 */
void buzzer_tone(uint8 frequency_khz) {
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	e2 97       	sbiw	r28, 0x32	; 50
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	8a ab       	std	Y+50, r24	; 0x32
	uint8 timeperiod = (1000/frequency_khz);        //TIMER PERIOD = 1/FREQUENCY the 1k is to get an integer value
     e0e:	8a a9       	ldd	r24, Y+50	; 0x32
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	88 ee       	ldi	r24, 0xE8	; 232
     e16:	93 e0       	ldi	r25, 0x03	; 3
     e18:	b9 01       	movw	r22, r18
     e1a:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__divmodhi4>
     e1e:	cb 01       	movw	r24, r22
     e20:	89 ab       	std	Y+49, r24	; 0x31
	SET_BIT(DDRD, BuzzerTerminal_1);				//SET BUZZER TERMINAL ONE AS OUTPUT
     e22:	a1 e3       	ldi	r26, 0x31	; 49
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e1 e3       	ldi	r30, 0x31	; 49
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	80 64       	ori	r24, 0x40	; 64
     e2e:	8c 93       	st	X, r24
	SET_BIT(DDRD, BuzzerTerminal_2);				//SET BUZZER TERMINAL TWO AS OUTPUT
     e30:	a1 e3       	ldi	r26, 0x31	; 49
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e1 e3       	ldi	r30, 0x31	; 49
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	80 68       	ori	r24, 0x80	; 128
     e3c:	8c 93       	st	X, r24
	CLEAR_BIT(PORTD, BuzzerTerminal_2); 			//ONE TERMINAL IS GROUNDED
     e3e:	a2 e3       	ldi	r26, 0x32	; 50
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e2 e3       	ldi	r30, 0x32	; 50
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	8f 77       	andi	r24, 0x7F	; 127
     e4a:	8c 93       	st	X, r24
	buzzerOn = TRUE;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	80 93 80 01 	sts	0x0180, r24
     e52:	9e c1       	rjmp	.+828    	; 0x1190 <buzzer_tone+0x398>
	while(buzzerOn) {								//INFINITE LOOP SWITCHING BETWEEN HIGH AND LOW ON ONE TERMINAL (CLOCK GENERATION)
		SET_BIT(PORTD, BuzzerTerminal_1);
     e54:	a2 e3       	ldi	r26, 0x32	; 50
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e2 e3       	ldi	r30, 0x32	; 50
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	80 64       	ori	r24, 0x40	; 64
     e60:	8c 93       	st	X, r24
		_delay_us(timeperiod/2);                    // DELAY BY HALF THE TIME PERIOD IN uS to get the desired Frequency in KHZ
     e62:	89 a9       	ldd	r24, Y+49	; 0x31
     e64:	86 95       	lsr	r24
     e66:	88 2f       	mov	r24, r24
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	aa 27       	eor	r26, r26
     e6c:	97 fd       	sbrc	r25, 7
     e6e:	a0 95       	com	r26
     e70:	ba 2f       	mov	r27, r26
     e72:	bc 01       	movw	r22, r24
     e74:	cd 01       	movw	r24, r26
     e76:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	8d a7       	std	Y+45, r24	; 0x2d
     e80:	9e a7       	std	Y+46, r25	; 0x2e
     e82:	af a7       	std	Y+47, r26	; 0x2f
     e84:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e86:	6d a5       	ldd	r22, Y+45	; 0x2d
     e88:	7e a5       	ldd	r23, Y+46	; 0x2e
     e8a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e8c:	98 a9       	ldd	r25, Y+48	; 0x30
     e8e:	2b ea       	ldi	r18, 0xAB	; 171
     e90:	3a ea       	ldi	r19, 0xAA	; 170
     e92:	4a e2       	ldi	r20, 0x2A	; 42
     e94:	50 e4       	ldi	r21, 0x40	; 64
     e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	89 a7       	std	Y+41, r24	; 0x29
     ea0:	9a a7       	std	Y+42, r25	; 0x2a
     ea2:	ab a7       	std	Y+43, r26	; 0x2b
     ea4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     ea6:	69 a5       	ldd	r22, Y+41	; 0x29
     ea8:	7a a5       	ldd	r23, Y+42	; 0x2a
     eaa:	8b a5       	ldd	r24, Y+43	; 0x2b
     eac:	9c a5       	ldd	r25, Y+44	; 0x2c
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e8       	ldi	r20, 0x80	; 128
     eb4:	5f e3       	ldi	r21, 0x3F	; 63
     eb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     eba:	88 23       	and	r24, r24
     ebc:	1c f4       	brge	.+6      	; 0xec4 <buzzer_tone+0xcc>
		__ticks = 1;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	88 a7       	std	Y+40, r24	; 0x28
     ec2:	91 c0       	rjmp	.+290    	; 0xfe6 <buzzer_tone+0x1ee>
	else if (__tmp > 255)
     ec4:	69 a5       	ldd	r22, Y+41	; 0x29
     ec6:	7a a5       	ldd	r23, Y+42	; 0x2a
     ec8:	8b a5       	ldd	r24, Y+43	; 0x2b
     eca:	9c a5       	ldd	r25, Y+44	; 0x2c
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	4f e7       	ldi	r20, 0x7F	; 127
     ed2:	53 e4       	ldi	r21, 0x43	; 67
     ed4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ed8:	18 16       	cp	r1, r24
     eda:	0c f0       	brlt	.+2      	; 0xede <buzzer_tone+0xe6>
     edc:	7b c0       	rjmp	.+246    	; 0xfd4 <buzzer_tone+0x1dc>
	{
		_delay_ms(__us / 1000.0);
     ede:	6d a5       	ldd	r22, Y+45	; 0x2d
     ee0:	7e a5       	ldd	r23, Y+46	; 0x2e
     ee2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ee4:	98 a9       	ldd	r25, Y+48	; 0x30
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	4a e7       	ldi	r20, 0x7A	; 122
     eec:	54 e4       	ldi	r21, 0x44	; 68
     eee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	8c a3       	std	Y+36, r24	; 0x24
     ef8:	9d a3       	std	Y+37, r25	; 0x25
     efa:	ae a3       	std	Y+38, r26	; 0x26
     efc:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     efe:	6c a1       	ldd	r22, Y+36	; 0x24
     f00:	7d a1       	ldd	r23, Y+37	; 0x25
     f02:	8e a1       	ldd	r24, Y+38	; 0x26
     f04:	9f a1       	ldd	r25, Y+39	; 0x27
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	4a ef       	ldi	r20, 0xFA	; 250
     f0c:	54 e4       	ldi	r21, 0x44	; 68
     f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	88 a3       	std	Y+32, r24	; 0x20
     f18:	99 a3       	std	Y+33, r25	; 0x21
     f1a:	aa a3       	std	Y+34, r26	; 0x22
     f1c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     f1e:	68 a1       	ldd	r22, Y+32	; 0x20
     f20:	79 a1       	ldd	r23, Y+33	; 0x21
     f22:	8a a1       	ldd	r24, Y+34	; 0x22
     f24:	9b a1       	ldd	r25, Y+35	; 0x23
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	40 e8       	ldi	r20, 0x80	; 128
     f2c:	5f e3       	ldi	r21, 0x3F	; 63
     f2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f32:	88 23       	and	r24, r24
     f34:	2c f4       	brge	.+10     	; 0xf40 <buzzer_tone+0x148>
		__ticks = 1;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	9f 8f       	std	Y+31, r25	; 0x1f
     f3c:	8e 8f       	std	Y+30, r24	; 0x1e
     f3e:	3f c0       	rjmp	.+126    	; 0xfbe <buzzer_tone+0x1c6>
	else if (__tmp > 65535)
     f40:	68 a1       	ldd	r22, Y+32	; 0x20
     f42:	79 a1       	ldd	r23, Y+33	; 0x21
     f44:	8a a1       	ldd	r24, Y+34	; 0x22
     f46:	9b a1       	ldd	r25, Y+35	; 0x23
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	3f ef       	ldi	r19, 0xFF	; 255
     f4c:	4f e7       	ldi	r20, 0x7F	; 127
     f4e:	57 e4       	ldi	r21, 0x47	; 71
     f50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f54:	18 16       	cp	r1, r24
     f56:	4c f5       	brge	.+82     	; 0xfaa <buzzer_tone+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f58:	6c a1       	ldd	r22, Y+36	; 0x24
     f5a:	7d a1       	ldd	r23, Y+37	; 0x25
     f5c:	8e a1       	ldd	r24, Y+38	; 0x26
     f5e:	9f a1       	ldd	r25, Y+39	; 0x27
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e2       	ldi	r20, 0x20	; 32
     f66:	51 e4       	ldi	r21, 0x41	; 65
     f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	bc 01       	movw	r22, r24
     f72:	cd 01       	movw	r24, r26
     f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	9f 8f       	std	Y+31, r25	; 0x1f
     f7e:	8e 8f       	std	Y+30, r24	; 0x1e
     f80:	0f c0       	rjmp	.+30     	; 0xfa0 <buzzer_tone+0x1a8>
     f82:	88 ec       	ldi	r24, 0xC8	; 200
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	9d 8f       	std	Y+29, r25	; 0x1d
     f88:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f8a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f8c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	f1 f7       	brne	.-4      	; 0xf8e <buzzer_tone+0x196>
     f92:	9d 8f       	std	Y+29, r25	; 0x1d
     f94:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f96:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f98:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	9f 8f       	std	Y+31, r25	; 0x1f
     f9e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fa2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	69 f7       	brne	.-38     	; 0xf82 <buzzer_tone+0x18a>
     fa8:	24 c0       	rjmp	.+72     	; 0xff2 <buzzer_tone+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     faa:	68 a1       	ldd	r22, Y+32	; 0x20
     fac:	79 a1       	ldd	r23, Y+33	; 0x21
     fae:	8a a1       	ldd	r24, Y+34	; 0x22
     fb0:	9b a1       	ldd	r25, Y+35	; 0x23
     fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb6:	dc 01       	movw	r26, r24
     fb8:	cb 01       	movw	r24, r22
     fba:	9f 8f       	std	Y+31, r25	; 0x1f
     fbc:	8e 8f       	std	Y+30, r24	; 0x1e
     fbe:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fc0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fc2:	9b 8f       	std	Y+27, r25	; 0x1b
     fc4:	8a 8f       	std	Y+26, r24	; 0x1a
     fc6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fc8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <buzzer_tone+0x1d2>
     fce:	9b 8f       	std	Y+27, r25	; 0x1b
     fd0:	8a 8f       	std	Y+26, r24	; 0x1a
     fd2:	0f c0       	rjmp	.+30     	; 0xff2 <buzzer_tone+0x1fa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fd4:	69 a5       	ldd	r22, Y+41	; 0x29
     fd6:	7a a5       	ldd	r23, Y+42	; 0x2a
     fd8:	8b a5       	ldd	r24, Y+43	; 0x2b
     fda:	9c a5       	ldd	r25, Y+44	; 0x2c
     fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	88 a7       	std	Y+40, r24	; 0x28
     fe6:	88 a5       	ldd	r24, Y+40	; 0x28
     fe8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fea:	89 8d       	ldd	r24, Y+25	; 0x19
     fec:	8a 95       	dec	r24
     fee:	f1 f7       	brne	.-4      	; 0xfec <buzzer_tone+0x1f4>
     ff0:	89 8f       	std	Y+25, r24	; 0x19
		CLEAR_BIT(PORTD, BuzzerTerminal_1);			// DELAY BY HALF THE TIME PERIOD IN uS to get the desired Frequency in KHZ
     ff2:	a2 e3       	ldi	r26, 0x32	; 50
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e2 e3       	ldi	r30, 0x32	; 50
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	8f 7b       	andi	r24, 0xBF	; 191
     ffe:	8c 93       	st	X, r24
		_delay_us(timeperiod/2);
    1000:	89 a9       	ldd	r24, Y+49	; 0x31
    1002:	86 95       	lsr	r24
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	aa 27       	eor	r26, r26
    100a:	97 fd       	sbrc	r25, 7
    100c:	a0 95       	com	r26
    100e:	ba 2f       	mov	r27, r26
    1010:	bc 01       	movw	r22, r24
    1012:	cd 01       	movw	r24, r26
    1014:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	8d 8b       	std	Y+21, r24	; 0x15
    101e:	9e 8b       	std	Y+22, r25	; 0x16
    1020:	af 8b       	std	Y+23, r26	; 0x17
    1022:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1024:	6d 89       	ldd	r22, Y+21	; 0x15
    1026:	7e 89       	ldd	r23, Y+22	; 0x16
    1028:	8f 89       	ldd	r24, Y+23	; 0x17
    102a:	98 8d       	ldd	r25, Y+24	; 0x18
    102c:	2b ea       	ldi	r18, 0xAB	; 171
    102e:	3a ea       	ldi	r19, 0xAA	; 170
    1030:	4a e2       	ldi	r20, 0x2A	; 42
    1032:	50 e4       	ldi	r21, 0x40	; 64
    1034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	89 8b       	std	Y+17, r24	; 0x11
    103e:	9a 8b       	std	Y+18, r25	; 0x12
    1040:	ab 8b       	std	Y+19, r26	; 0x13
    1042:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1044:	69 89       	ldd	r22, Y+17	; 0x11
    1046:	7a 89       	ldd	r23, Y+18	; 0x12
    1048:	8b 89       	ldd	r24, Y+19	; 0x13
    104a:	9c 89       	ldd	r25, Y+20	; 0x14
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e8       	ldi	r20, 0x80	; 128
    1052:	5f e3       	ldi	r21, 0x3F	; 63
    1054:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1058:	88 23       	and	r24, r24
    105a:	1c f4       	brge	.+6      	; 0x1062 <buzzer_tone+0x26a>
		__ticks = 1;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	88 8b       	std	Y+16, r24	; 0x10
    1060:	91 c0       	rjmp	.+290    	; 0x1184 <buzzer_tone+0x38c>
	else if (__tmp > 255)
    1062:	69 89       	ldd	r22, Y+17	; 0x11
    1064:	7a 89       	ldd	r23, Y+18	; 0x12
    1066:	8b 89       	ldd	r24, Y+19	; 0x13
    1068:	9c 89       	ldd	r25, Y+20	; 0x14
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	4f e7       	ldi	r20, 0x7F	; 127
    1070:	53 e4       	ldi	r21, 0x43	; 67
    1072:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1076:	18 16       	cp	r1, r24
    1078:	0c f0       	brlt	.+2      	; 0x107c <buzzer_tone+0x284>
    107a:	7b c0       	rjmp	.+246    	; 0x1172 <buzzer_tone+0x37a>
	{
		_delay_ms(__us / 1000.0);
    107c:	6d 89       	ldd	r22, Y+21	; 0x15
    107e:	7e 89       	ldd	r23, Y+22	; 0x16
    1080:	8f 89       	ldd	r24, Y+23	; 0x17
    1082:	98 8d       	ldd	r25, Y+24	; 0x18
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	4a e7       	ldi	r20, 0x7A	; 122
    108a:	54 e4       	ldi	r21, 0x44	; 68
    108c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	8c 87       	std	Y+12, r24	; 0x0c
    1096:	9d 87       	std	Y+13, r25	; 0x0d
    1098:	ae 87       	std	Y+14, r26	; 0x0e
    109a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    109c:	6c 85       	ldd	r22, Y+12	; 0x0c
    109e:	7d 85       	ldd	r23, Y+13	; 0x0d
    10a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    10a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	4a ef       	ldi	r20, 0xFA	; 250
    10aa:	54 e4       	ldi	r21, 0x44	; 68
    10ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	88 87       	std	Y+8, r24	; 0x08
    10b6:	99 87       	std	Y+9, r25	; 0x09
    10b8:	aa 87       	std	Y+10, r26	; 0x0a
    10ba:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    10bc:	68 85       	ldd	r22, Y+8	; 0x08
    10be:	79 85       	ldd	r23, Y+9	; 0x09
    10c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    10c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	40 e8       	ldi	r20, 0x80	; 128
    10ca:	5f e3       	ldi	r21, 0x3F	; 63
    10cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10d0:	88 23       	and	r24, r24
    10d2:	2c f4       	brge	.+10     	; 0x10de <buzzer_tone+0x2e6>
		__ticks = 1;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	9f 83       	std	Y+7, r25	; 0x07
    10da:	8e 83       	std	Y+6, r24	; 0x06
    10dc:	3f c0       	rjmp	.+126    	; 0x115c <buzzer_tone+0x364>
	else if (__tmp > 65535)
    10de:	68 85       	ldd	r22, Y+8	; 0x08
    10e0:	79 85       	ldd	r23, Y+9	; 0x09
    10e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    10e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	3f ef       	ldi	r19, 0xFF	; 255
    10ea:	4f e7       	ldi	r20, 0x7F	; 127
    10ec:	57 e4       	ldi	r21, 0x47	; 71
    10ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10f2:	18 16       	cp	r1, r24
    10f4:	4c f5       	brge	.+82     	; 0x1148 <buzzer_tone+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f6:	6c 85       	ldd	r22, Y+12	; 0x0c
    10f8:	7d 85       	ldd	r23, Y+13	; 0x0d
    10fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    10fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e2       	ldi	r20, 0x20	; 32
    1104:	51 e4       	ldi	r21, 0x41	; 65
    1106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	bc 01       	movw	r22, r24
    1110:	cd 01       	movw	r24, r26
    1112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	9f 83       	std	Y+7, r25	; 0x07
    111c:	8e 83       	std	Y+6, r24	; 0x06
    111e:	0f c0       	rjmp	.+30     	; 0x113e <buzzer_tone+0x346>
    1120:	88 ec       	ldi	r24, 0xC8	; 200
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	9d 83       	std	Y+5, r25	; 0x05
    1126:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1128:	8c 81       	ldd	r24, Y+4	; 0x04
    112a:	9d 81       	ldd	r25, Y+5	; 0x05
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	f1 f7       	brne	.-4      	; 0x112c <buzzer_tone+0x334>
    1130:	9d 83       	std	Y+5, r25	; 0x05
    1132:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1134:	8e 81       	ldd	r24, Y+6	; 0x06
    1136:	9f 81       	ldd	r25, Y+7	; 0x07
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	9f 83       	std	Y+7, r25	; 0x07
    113c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113e:	8e 81       	ldd	r24, Y+6	; 0x06
    1140:	9f 81       	ldd	r25, Y+7	; 0x07
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	69 f7       	brne	.-38     	; 0x1120 <buzzer_tone+0x328>
    1146:	24 c0       	rjmp	.+72     	; 0x1190 <buzzer_tone+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1148:	68 85       	ldd	r22, Y+8	; 0x08
    114a:	79 85       	ldd	r23, Y+9	; 0x09
    114c:	8a 85       	ldd	r24, Y+10	; 0x0a
    114e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	9f 83       	std	Y+7, r25	; 0x07
    115a:	8e 83       	std	Y+6, r24	; 0x06
    115c:	8e 81       	ldd	r24, Y+6	; 0x06
    115e:	9f 81       	ldd	r25, Y+7	; 0x07
    1160:	9b 83       	std	Y+3, r25	; 0x03
    1162:	8a 83       	std	Y+2, r24	; 0x02
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	9b 81       	ldd	r25, Y+3	; 0x03
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	f1 f7       	brne	.-4      	; 0x1168 <buzzer_tone+0x370>
    116c:	9b 83       	std	Y+3, r25	; 0x03
    116e:	8a 83       	std	Y+2, r24	; 0x02
    1170:	0f c0       	rjmp	.+30     	; 0x1190 <buzzer_tone+0x398>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1172:	69 89       	ldd	r22, Y+17	; 0x11
    1174:	7a 89       	ldd	r23, Y+18	; 0x12
    1176:	8b 89       	ldd	r24, Y+19	; 0x13
    1178:	9c 89       	ldd	r25, Y+20	; 0x14
    117a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	88 8b       	std	Y+16, r24	; 0x10
    1184:	88 89       	ldd	r24, Y+16	; 0x10
    1186:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	8a 95       	dec	r24
    118c:	f1 f7       	brne	.-4      	; 0x118a <buzzer_tone+0x392>
    118e:	89 83       	std	Y+1, r24	; 0x01
	uint8 timeperiod = (1000/frequency_khz);        //TIMER PERIOD = 1/FREQUENCY the 1k is to get an integer value
	SET_BIT(DDRD, BuzzerTerminal_1);				//SET BUZZER TERMINAL ONE AS OUTPUT
	SET_BIT(DDRD, BuzzerTerminal_2);				//SET BUZZER TERMINAL TWO AS OUTPUT
	CLEAR_BIT(PORTD, BuzzerTerminal_2); 			//ONE TERMINAL IS GROUNDED
	buzzerOn = TRUE;
	while(buzzerOn) {								//INFINITE LOOP SWITCHING BETWEEN HIGH AND LOW ON ONE TERMINAL (CLOCK GENERATION)
    1190:	80 91 80 01 	lds	r24, 0x0180
    1194:	88 23       	and	r24, r24
    1196:	09 f0       	breq	.+2      	; 0x119a <buzzer_tone+0x3a2>
    1198:	5d ce       	rjmp	.-838    	; 0xe54 <buzzer_tone+0x5c>
		SET_BIT(PORTD, BuzzerTerminal_1);
		_delay_us(timeperiod/2);                    // DELAY BY HALF THE TIME PERIOD IN uS to get the desired Frequency in KHZ
		CLEAR_BIT(PORTD, BuzzerTerminal_1);			// DELAY BY HALF THE TIME PERIOD IN uS to get the desired Frequency in KHZ
		_delay_us(timeperiod/2);
	}
}
    119a:	e2 96       	adiw	r28, 0x32	; 50
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <buzzerOff>:
/*
 * Description : Function to stop the buzzer
 *     1. Set the boolean to off to stop the loop

 */
void buzzerOff(void) {
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
	buzzerOn = FALSE;								//SETTING THE BUZZER GLOBAL BOOLEAN TO OFF WILL CLOSE THE LOOP AFTER CONTEXT SWITCH
    11b4:	10 92 80 01 	sts	0x0180, r1
}
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <EEPROM_init>:
 *******************************************************************************/

#include "external_eeprom.h"

void EEPROM_init(const I2C_config* config)
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <EEPROM_init+0x6>
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	9a 83       	std	Y+2, r25	; 0x02
    11ca:	89 83       	std	Y+1, r24	; 0x01
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init(config);
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	9a 81       	ldd	r25, Y+2	; 0x02
    11d0:	0e 94 90 09 	call	0x1320	; 0x1320 <TWI_init>
}
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <EEPROM_writeByte+0x6>
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <EEPROM_writeByte+0x8>
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	9a 83       	std	Y+2, r25	; 0x02
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    11f0:	0e 94 dd 09 	call	0x13ba	; 0x13ba <TWI_start>
    if (TWI_getStatus() != TW_START)
    11f4:	0e 94 35 0a 	call	0x146a	; 0x146a <TWI_getStatus>
    11f8:	88 30       	cpi	r24, 0x08	; 8
    11fa:	11 f0       	breq	.+4      	; 0x1200 <EEPROM_writeByte+0x22>
        return ERROR;
    11fc:	1c 82       	std	Y+4, r1	; 0x04
    11fe:	28 c0       	rjmp	.+80     	; 0x1250 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	9a 81       	ldd	r25, Y+2	; 0x02
    1204:	80 70       	andi	r24, 0x00	; 0
    1206:	97 70       	andi	r25, 0x07	; 7
    1208:	88 0f       	add	r24, r24
    120a:	89 2f       	mov	r24, r25
    120c:	88 1f       	adc	r24, r24
    120e:	99 0b       	sbc	r25, r25
    1210:	91 95       	neg	r25
    1212:	80 6a       	ori	r24, 0xA0	; 160
    1214:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1218:	0e 94 35 0a 	call	0x146a	; 0x146a <TWI_getStatus>
    121c:	88 31       	cpi	r24, 0x18	; 24
    121e:	11 f0       	breq	.+4      	; 0x1224 <EEPROM_writeByte+0x46>
        return ERROR; 
    1220:	1c 82       	std	Y+4, r1	; 0x04
    1222:	16 c0       	rjmp	.+44     	; 0x1250 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    122a:	0e 94 35 0a 	call	0x146a	; 0x146a <TWI_getStatus>
    122e:	88 32       	cpi	r24, 0x28	; 40
    1230:	11 f0       	breq	.+4      	; 0x1236 <EEPROM_writeByte+0x58>
        return ERROR;
    1232:	1c 82       	std	Y+4, r1	; 0x04
    1234:	0d c0       	rjmp	.+26     	; 0x1250 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    123c:	0e 94 35 0a 	call	0x146a	; 0x146a <TWI_getStatus>
    1240:	88 32       	cpi	r24, 0x28	; 40
    1242:	11 f0       	breq	.+4      	; 0x1248 <EEPROM_writeByte+0x6a>
        return ERROR;
    1244:	1c 82       	std	Y+4, r1	; 0x04
    1246:	04 c0       	rjmp	.+8      	; 0x1250 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1248:	0e 94 ed 09 	call	0x13da	; 0x13da <TWI_stop>
	
    return SUCCESS;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	8c 83       	std	Y+4, r24	; 0x04
    1250:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <EEPROM_readByte+0x6>
    1266:	00 d0       	rcall	.+0      	; 0x1268 <EEPROM_readByte+0x8>
    1268:	0f 92       	push	r0
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	9a 83       	std	Y+2, r25	; 0x02
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	7c 83       	std	Y+4, r23	; 0x04
    1274:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1276:	0e 94 dd 09 	call	0x13ba	; 0x13ba <TWI_start>
    if (TWI_getStatus() != TW_START)
    127a:	0e 94 35 0a 	call	0x146a	; 0x146a <TWI_getStatus>
    127e:	88 30       	cpi	r24, 0x08	; 8
    1280:	11 f0       	breq	.+4      	; 0x1286 <EEPROM_readByte+0x26>
        return ERROR;
    1282:	1d 82       	std	Y+5, r1	; 0x05
    1284:	44 c0       	rjmp	.+136    	; 0x130e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	9a 81       	ldd	r25, Y+2	; 0x02
    128a:	80 70       	andi	r24, 0x00	; 0
    128c:	97 70       	andi	r25, 0x07	; 7
    128e:	88 0f       	add	r24, r24
    1290:	89 2f       	mov	r24, r25
    1292:	88 1f       	adc	r24, r24
    1294:	99 0b       	sbc	r25, r25
    1296:	91 95       	neg	r25
    1298:	80 6a       	ori	r24, 0xA0	; 160
    129a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    129e:	0e 94 35 0a 	call	0x146a	; 0x146a <TWI_getStatus>
    12a2:	88 31       	cpi	r24, 0x18	; 24
    12a4:	11 f0       	breq	.+4      	; 0x12aa <EEPROM_readByte+0x4a>
        return ERROR;
    12a6:	1d 82       	std	Y+5, r1	; 0x05
    12a8:	32 c0       	rjmp	.+100    	; 0x130e <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    12b0:	0e 94 35 0a 	call	0x146a	; 0x146a <TWI_getStatus>
    12b4:	88 32       	cpi	r24, 0x28	; 40
    12b6:	11 f0       	breq	.+4      	; 0x12bc <EEPROM_readByte+0x5c>
        return ERROR;
    12b8:	1d 82       	std	Y+5, r1	; 0x05
    12ba:	29 c0       	rjmp	.+82     	; 0x130e <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    12bc:	0e 94 dd 09 	call	0x13ba	; 0x13ba <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    12c0:	0e 94 35 0a 	call	0x146a	; 0x146a <TWI_getStatus>
    12c4:	80 31       	cpi	r24, 0x10	; 16
    12c6:	11 f0       	breq	.+4      	; 0x12cc <EEPROM_readByte+0x6c>
        return ERROR;
    12c8:	1d 82       	std	Y+5, r1	; 0x05
    12ca:	21 c0       	rjmp	.+66     	; 0x130e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	9a 81       	ldd	r25, Y+2	; 0x02
    12d0:	80 70       	andi	r24, 0x00	; 0
    12d2:	97 70       	andi	r25, 0x07	; 7
    12d4:	88 0f       	add	r24, r24
    12d6:	89 2f       	mov	r24, r25
    12d8:	88 1f       	adc	r24, r24
    12da:	99 0b       	sbc	r25, r25
    12dc:	91 95       	neg	r25
    12de:	81 6a       	ori	r24, 0xA1	; 161
    12e0:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    12e4:	0e 94 35 0a 	call	0x146a	; 0x146a <TWI_getStatus>
    12e8:	80 34       	cpi	r24, 0x40	; 64
    12ea:	11 f0       	breq	.+4      	; 0x12f0 <EEPROM_readByte+0x90>
        return ERROR;
    12ec:	1d 82       	std	Y+5, r1	; 0x05
    12ee:	0f c0       	rjmp	.+30     	; 0x130e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    12f0:	0e 94 22 0a 	call	0x1444	; 0x1444 <TWI_readWithNACK>
    12f4:	eb 81       	ldd	r30, Y+3	; 0x03
    12f6:	fc 81       	ldd	r31, Y+4	; 0x04
    12f8:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    12fa:	0e 94 35 0a 	call	0x146a	; 0x146a <TWI_getStatus>
    12fe:	88 35       	cpi	r24, 0x58	; 88
    1300:	11 f0       	breq	.+4      	; 0x1306 <EEPROM_readByte+0xa6>
        return ERROR;
    1302:	1d 82       	std	Y+5, r1	; 0x05
    1304:	04 c0       	rjmp	.+8      	; 0x130e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1306:	0e 94 ed 09 	call	0x13da	; 0x13da <TWI_stop>
    return SUCCESS;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	8d 83       	std	Y+5, r24	; 0x05
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <TWI_init>:
 *
 *******************************************************************************/
#include "i2c.h"

void TWI_init(const I2C_config* config)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	00 d0       	rcall	.+0      	; 0x1326 <TWI_init+0x6>
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	9a 83       	std	Y+2, r25	; 0x02
    132c:	89 83       	std	Y+1, r24	; 0x01
    TWBR = config->bitrate;    //choosing bitrate
    132e:	a0 e2       	ldi	r26, 0x20	; 32
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e9 81       	ldd	r30, Y+1	; 0x01
    1334:	fa 81       	ldd	r31, Y+2	; 0x02
    1336:	80 81       	ld	r24, Z
    1338:	8c 93       	st	X, r24

    TWCR |= ((config->ack)<<TWEA) | ((config->interruptEnable)<<TWIE);
    133a:	a6 e5       	ldi	r26, 0x56	; 86
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e6 e5       	ldi	r30, 0x56	; 86
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	28 2f       	mov	r18, r24
    1346:	e9 81       	ldd	r30, Y+1	; 0x01
    1348:	fa 81       	ldd	r31, Y+2	; 0x02
    134a:	81 81       	ldd	r24, Z+1	; 0x01
    134c:	88 2f       	mov	r24, r24
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	00 24       	eor	r0, r0
    1352:	96 95       	lsr	r25
    1354:	87 95       	ror	r24
    1356:	07 94       	ror	r0
    1358:	96 95       	lsr	r25
    135a:	87 95       	ror	r24
    135c:	07 94       	ror	r0
    135e:	98 2f       	mov	r25, r24
    1360:	80 2d       	mov	r24, r0
    1362:	98 2f       	mov	r25, r24
    1364:	e9 81       	ldd	r30, Y+1	; 0x01
    1366:	fa 81       	ldd	r31, Y+2	; 0x02
    1368:	82 81       	ldd	r24, Z+2	; 0x02
    136a:	89 2b       	or	r24, r25
    136c:	82 2b       	or	r24, r18
    136e:	8c 93       	st	X, r24

    TWSR |= config->pre;  //Choosing Prescalar
    1370:	a1 e2       	ldi	r26, 0x21	; 33
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e1 e2       	ldi	r30, 0x21	; 33
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	90 81       	ld	r25, Z
    137a:	e9 81       	ldd	r30, Y+1	; 0x01
    137c:	fa 81       	ldd	r31, Y+2	; 0x02
    137e:	83 81       	ldd	r24, Z+3	; 0x03
    1380:	89 2b       	or	r24, r25
    1382:	8c 93       	st	X, r24

    TWDR |= ((config->slaveAddressRegister)<<1);
    1384:	a3 e2       	ldi	r26, 0x23	; 35
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e3 e2       	ldi	r30, 0x23	; 35
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	28 2f       	mov	r18, r24
    1390:	e9 81       	ldd	r30, Y+1	; 0x01
    1392:	fa 81       	ldd	r31, Y+2	; 0x02
    1394:	84 81       	ldd	r24, Z+4	; 0x04
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	82 2b       	or	r24, r18
    13a0:	8c 93       	st	X, r24
    TWCR |= (1<<TWEN);
    13a2:	a6 e5       	ldi	r26, 0x56	; 86
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e6 e5       	ldi	r30, 0x56	; 86
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	84 60       	ori	r24, 0x04	; 4
    13ae:	8c 93       	st	X, r24
}
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <TWI_start>:

void TWI_start(void)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
	 TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    13c2:	e6 e5       	ldi	r30, 0x56	; 86
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	84 ea       	ldi	r24, 0xA4	; 164
    13c8:	80 83       	st	Z, r24

    while(BIT_IS_CLEAR(TWCR,TWINT));
    13ca:	e6 e5       	ldi	r30, 0x56	; 86
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	88 23       	and	r24, r24
    13d2:	dc f7       	brge	.-10     	; 0x13ca <TWI_start+0x10>
}
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <TWI_stop>:

void TWI_stop(void)
{
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    13e2:	e6 e5       	ldi	r30, 0x56	; 86
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	84 e9       	ldi	r24, 0x94	; 148
    13e8:	80 83       	st	Z, r24
}
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <TWI_write>:

void TWI_write(uint8 data)
{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	0f 92       	push	r0
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	89 83       	std	Y+1, r24	; 0x01

    TWDR = data;
    13fc:	e3 e2       	ldi	r30, 0x23	; 35
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	80 83       	st	Z, r24

    TWCR = (1 << TWINT) | (1 << TWEN);
    1404:	e6 e5       	ldi	r30, 0x56	; 86
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	84 e8       	ldi	r24, 0x84	; 132
    140a:	80 83       	st	Z, r24

    while(BIT_IS_CLEAR(TWCR,TWINT));
    140c:	e6 e5       	ldi	r30, 0x56	; 86
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	88 23       	and	r24, r24
    1414:	dc f7       	brge	.-10     	; 0x140c <TWI_write+0x1c>
}
    1416:	0f 90       	pop	r0
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62

    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1426:	e6 e5       	ldi	r30, 0x56	; 86
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	84 ec       	ldi	r24, 0xC4	; 196
    142c:	80 83       	st	Z, r24

    while(BIT_IS_CLEAR(TWCR,TWINT));
    142e:	e6 e5       	ldi	r30, 0x56	; 86
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	88 23       	and	r24, r24
    1436:	dc f7       	brge	.-10     	; 0x142e <TWI_readWithACK+0x10>
    return TWDR;
    1438:	e3 e2       	ldi	r30, 0x23	; 35
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
}
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62

    TWCR = (1 << TWINT) | (1 << TWEN);
    144c:	e6 e5       	ldi	r30, 0x56	; 86
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	84 e8       	ldi	r24, 0x84	; 132
    1452:	80 83       	st	Z, r24

    while(BIT_IS_CLEAR(TWCR,TWINT));
    1454:	e6 e5       	ldi	r30, 0x56	; 86
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	88 23       	and	r24, r24
    145c:	dc f7       	brge	.-10     	; 0x1454 <TWI_readWithNACK+0x10>
    return TWDR;
    145e:	e3 e2       	ldi	r30, 0x23	; 35
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
}
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	0f 92       	push	r0
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    status = TWSR & 0xF8;
    1474:	e1 e2       	ldi	r30, 0x21	; 33
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	88 7f       	andi	r24, 0xF8	; 248
    147c:	89 83       	std	Y+1, r24	; 0x01
    return status;
    147e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1480:	0f 90       	pop	r0
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret

00001488 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	00 d0       	rcall	.+0      	; 0x148e <KeyPad_getPressedKey+0x6>
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1492:	1a 82       	std	Y+2, r1	; 0x02
    1494:	4c c0       	rjmp	.+152    	; 0x152e <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1496:	ea e3       	ldi	r30, 0x3A	; 58
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	80 e1       	ldi	r24, 0x10	; 16
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <KeyPad_getPressedKey+0x22>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	2a 95       	dec	r18
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <KeyPad_getPressedKey+0x1e>
    14ae:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    14b0:	eb e3       	ldi	r30, 0x3B	; 59
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	80 e1       	ldi	r24, 0x10	; 16
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 2e       	mov	r0, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <KeyPad_getPressedKey+0x3e>
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	0a 94       	dec	r0
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <KeyPad_getPressedKey+0x3a>
    14ca:	80 95       	com	r24
    14cc:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    14ce:	19 82       	std	Y+1, r1	; 0x01
    14d0:	28 c0       	rjmp	.+80     	; 0x1522 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    14d2:	e9 e3       	ldi	r30, 0x39	; 57
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	88 2f       	mov	r24, r24
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	a9 01       	movw	r20, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <KeyPad_getPressedKey+0x62>
    14e6:	55 95       	asr	r21
    14e8:	47 95       	ror	r20
    14ea:	8a 95       	dec	r24
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <KeyPad_getPressedKey+0x5e>
    14ee:	ca 01       	movw	r24, r20
    14f0:	81 70       	andi	r24, 0x01	; 1
    14f2:	90 70       	andi	r25, 0x00	; 0
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	91 f4       	brne	.+36     	; 0x151c <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	88 2f       	mov	r24, r24
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	98 2f       	mov	r25, r24
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	89 0f       	add	r24, r25
    150c:	8f 5f       	subi	r24, 0xFF	; 255
    150e:	0e 94 9c 0a 	call	0x1538	; 0x1538 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	8f 5f       	subi	r24, 0xFF	; 255
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	84 30       	cpi	r24, 0x04	; 4
    1526:	a8 f2       	brcs	.-86     	; 0x14d2 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	8f 5f       	subi	r24, 0xFF	; 255
    152c:	8a 83       	std	Y+2, r24	; 0x02
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	84 30       	cpi	r24, 0x04	; 4
    1532:	08 f4       	brcc	.+2      	; 0x1536 <KeyPad_getPressedKey+0xae>
    1534:	b0 cf       	rjmp	.-160    	; 0x1496 <KeyPad_getPressedKey+0xe>
    1536:	ad cf       	rjmp	.-166    	; 0x1492 <KeyPad_getPressedKey+0xa>

00001538 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	00 d0       	rcall	.+0      	; 0x153e <KeyPad_4x4_adjustKeyNumber+0x6>
    153e:	00 d0       	rcall	.+0      	; 0x1540 <KeyPad_4x4_adjustKeyNumber+0x8>
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	3c 83       	std	Y+4, r19	; 0x04
    154e:	2b 83       	std	Y+3, r18	; 0x03
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	9c 81       	ldd	r25, Y+4	; 0x04
    1554:	88 30       	cpi	r24, 0x08	; 8
    1556:	91 05       	cpc	r25, r1
    1558:	09 f4       	brne	.+2      	; 0x155c <KeyPad_4x4_adjustKeyNumber+0x24>
    155a:	70 c0       	rjmp	.+224    	; 0x163c <KeyPad_4x4_adjustKeyNumber+0x104>
    155c:	2b 81       	ldd	r18, Y+3	; 0x03
    155e:	3c 81       	ldd	r19, Y+4	; 0x04
    1560:	29 30       	cpi	r18, 0x09	; 9
    1562:	31 05       	cpc	r19, r1
    1564:	5c f5       	brge	.+86     	; 0x15bc <KeyPad_4x4_adjustKeyNumber+0x84>
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	9c 81       	ldd	r25, Y+4	; 0x04
    156a:	84 30       	cpi	r24, 0x04	; 4
    156c:	91 05       	cpc	r25, r1
    156e:	09 f4       	brne	.+2      	; 0x1572 <KeyPad_4x4_adjustKeyNumber+0x3a>
    1570:	59 c0       	rjmp	.+178    	; 0x1624 <KeyPad_4x4_adjustKeyNumber+0xec>
    1572:	2b 81       	ldd	r18, Y+3	; 0x03
    1574:	3c 81       	ldd	r19, Y+4	; 0x04
    1576:	25 30       	cpi	r18, 0x05	; 5
    1578:	31 05       	cpc	r19, r1
    157a:	9c f4       	brge	.+38     	; 0x15a2 <KeyPad_4x4_adjustKeyNumber+0x6a>
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	9c 81       	ldd	r25, Y+4	; 0x04
    1580:	82 30       	cpi	r24, 0x02	; 2
    1582:	91 05       	cpc	r25, r1
    1584:	09 f4       	brne	.+2      	; 0x1588 <KeyPad_4x4_adjustKeyNumber+0x50>
    1586:	48 c0       	rjmp	.+144    	; 0x1618 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1588:	2b 81       	ldd	r18, Y+3	; 0x03
    158a:	3c 81       	ldd	r19, Y+4	; 0x04
    158c:	23 30       	cpi	r18, 0x03	; 3
    158e:	31 05       	cpc	r19, r1
    1590:	0c f0       	brlt	.+2      	; 0x1594 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1592:	45 c0       	rjmp	.+138    	; 0x161e <KeyPad_4x4_adjustKeyNumber+0xe6>
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	9c 81       	ldd	r25, Y+4	; 0x04
    1598:	81 30       	cpi	r24, 0x01	; 1
    159a:	91 05       	cpc	r25, r1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <KeyPad_4x4_adjustKeyNumber+0x68>
    159e:	39 c0       	rjmp	.+114    	; 0x1612 <KeyPad_4x4_adjustKeyNumber+0xda>
    15a0:	67 c0       	rjmp	.+206    	; 0x1670 <KeyPad_4x4_adjustKeyNumber+0x138>
    15a2:	2b 81       	ldd	r18, Y+3	; 0x03
    15a4:	3c 81       	ldd	r19, Y+4	; 0x04
    15a6:	26 30       	cpi	r18, 0x06	; 6
    15a8:	31 05       	cpc	r19, r1
    15aa:	09 f4       	brne	.+2      	; 0x15ae <KeyPad_4x4_adjustKeyNumber+0x76>
    15ac:	41 c0       	rjmp	.+130    	; 0x1630 <KeyPad_4x4_adjustKeyNumber+0xf8>
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	87 30       	cpi	r24, 0x07	; 7
    15b4:	91 05       	cpc	r25, r1
    15b6:	0c f0       	brlt	.+2      	; 0x15ba <KeyPad_4x4_adjustKeyNumber+0x82>
    15b8:	3e c0       	rjmp	.+124    	; 0x1636 <KeyPad_4x4_adjustKeyNumber+0xfe>
    15ba:	37 c0       	rjmp	.+110    	; 0x162a <KeyPad_4x4_adjustKeyNumber+0xf2>
    15bc:	2b 81       	ldd	r18, Y+3	; 0x03
    15be:	3c 81       	ldd	r19, Y+4	; 0x04
    15c0:	2c 30       	cpi	r18, 0x0C	; 12
    15c2:	31 05       	cpc	r19, r1
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <KeyPad_4x4_adjustKeyNumber+0x90>
    15c6:	46 c0       	rjmp	.+140    	; 0x1654 <KeyPad_4x4_adjustKeyNumber+0x11c>
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	9c 81       	ldd	r25, Y+4	; 0x04
    15cc:	8d 30       	cpi	r24, 0x0D	; 13
    15ce:	91 05       	cpc	r25, r1
    15d0:	5c f4       	brge	.+22     	; 0x15e8 <KeyPad_4x4_adjustKeyNumber+0xb0>
    15d2:	2b 81       	ldd	r18, Y+3	; 0x03
    15d4:	3c 81       	ldd	r19, Y+4	; 0x04
    15d6:	2a 30       	cpi	r18, 0x0A	; 10
    15d8:	31 05       	cpc	r19, r1
    15da:	b1 f1       	breq	.+108    	; 0x1648 <KeyPad_4x4_adjustKeyNumber+0x110>
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	9c 81       	ldd	r25, Y+4	; 0x04
    15e0:	8b 30       	cpi	r24, 0x0B	; 11
    15e2:	91 05       	cpc	r25, r1
    15e4:	a4 f5       	brge	.+104    	; 0x164e <KeyPad_4x4_adjustKeyNumber+0x116>
    15e6:	2d c0       	rjmp	.+90     	; 0x1642 <KeyPad_4x4_adjustKeyNumber+0x10a>
    15e8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ea:	3c 81       	ldd	r19, Y+4	; 0x04
    15ec:	2e 30       	cpi	r18, 0x0E	; 14
    15ee:	31 05       	cpc	r19, r1
    15f0:	b9 f1       	breq	.+110    	; 0x1660 <KeyPad_4x4_adjustKeyNumber+0x128>
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	9c 81       	ldd	r25, Y+4	; 0x04
    15f6:	8e 30       	cpi	r24, 0x0E	; 14
    15f8:	91 05       	cpc	r25, r1
    15fa:	7c f1       	brlt	.+94     	; 0x165a <KeyPad_4x4_adjustKeyNumber+0x122>
    15fc:	2b 81       	ldd	r18, Y+3	; 0x03
    15fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1600:	2f 30       	cpi	r18, 0x0F	; 15
    1602:	31 05       	cpc	r19, r1
    1604:	79 f1       	breq	.+94     	; 0x1664 <KeyPad_4x4_adjustKeyNumber+0x12c>
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	80 31       	cpi	r24, 0x10	; 16
    160c:	91 05       	cpc	r25, r1
    160e:	69 f1       	breq	.+90     	; 0x166a <KeyPad_4x4_adjustKeyNumber+0x132>
    1610:	2f c0       	rjmp	.+94     	; 0x1670 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1612:	97 e0       	ldi	r25, 0x07	; 7
    1614:	9a 83       	std	Y+2, r25	; 0x02
    1616:	2e c0       	rjmp	.+92     	; 0x1674 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    1618:	28 e0       	ldi	r18, 0x08	; 8
    161a:	2a 83       	std	Y+2, r18	; 0x02
    161c:	2b c0       	rjmp	.+86     	; 0x1674 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    161e:	39 e0       	ldi	r19, 0x09	; 9
    1620:	3a 83       	std	Y+2, r19	; 0x02
    1622:	28 c0       	rjmp	.+80     	; 0x1674 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    1624:	85 e2       	ldi	r24, 0x25	; 37
    1626:	8a 83       	std	Y+2, r24	; 0x02
    1628:	25 c0       	rjmp	.+74     	; 0x1674 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    162a:	94 e0       	ldi	r25, 0x04	; 4
    162c:	9a 83       	std	Y+2, r25	; 0x02
    162e:	22 c0       	rjmp	.+68     	; 0x1674 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1630:	25 e0       	ldi	r18, 0x05	; 5
    1632:	2a 83       	std	Y+2, r18	; 0x02
    1634:	1f c0       	rjmp	.+62     	; 0x1674 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    1636:	36 e0       	ldi	r19, 0x06	; 6
    1638:	3a 83       	std	Y+2, r19	; 0x02
    163a:	1c c0       	rjmp	.+56     	; 0x1674 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    163c:	8a e2       	ldi	r24, 0x2A	; 42
    163e:	8a 83       	std	Y+2, r24	; 0x02
    1640:	19 c0       	rjmp	.+50     	; 0x1674 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    1642:	91 e0       	ldi	r25, 0x01	; 1
    1644:	9a 83       	std	Y+2, r25	; 0x02
    1646:	16 c0       	rjmp	.+44     	; 0x1674 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    1648:	22 e0       	ldi	r18, 0x02	; 2
    164a:	2a 83       	std	Y+2, r18	; 0x02
    164c:	13 c0       	rjmp	.+38     	; 0x1674 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    164e:	33 e0       	ldi	r19, 0x03	; 3
    1650:	3a 83       	std	Y+2, r19	; 0x02
    1652:	10 c0       	rjmp	.+32     	; 0x1674 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1654:	8d e2       	ldi	r24, 0x2D	; 45
    1656:	8a 83       	std	Y+2, r24	; 0x02
    1658:	0d c0       	rjmp	.+26     	; 0x1674 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    165a:	9d e0       	ldi	r25, 0x0D	; 13
    165c:	9a 83       	std	Y+2, r25	; 0x02
    165e:	0a c0       	rjmp	.+20     	; 0x1674 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    1660:	1a 82       	std	Y+2, r1	; 0x02
    1662:	08 c0       	rjmp	.+16     	; 0x1674 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1664:	2d e3       	ldi	r18, 0x3D	; 61
    1666:	2a 83       	std	Y+2, r18	; 0x02
    1668:	05 c0       	rjmp	.+10     	; 0x1674 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    166a:	3b e2       	ldi	r19, 0x2B	; 43
    166c:	3a 83       	std	Y+2, r19	; 0x02
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	8a 83       	std	Y+2, r24	; 0x02
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    168c:	e4 e3       	ldi	r30, 0x34	; 52
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	8f ef       	ldi	r24, 0xFF	; 255
    1692:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1694:	a1 e3       	ldi	r26, 0x31	; 49
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e1 e3       	ldi	r30, 0x31	; 49
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	80 67       	ori	r24, 0x70	; 112
    16a0:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    16a2:	88 e3       	ldi	r24, 0x38	; 56
    16a4:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    16a8:	8c e0       	ldi	r24, 0x0C	; 12
    16aa:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_sendCommand>
}
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	e9 97       	sbiw	r28, 0x39	; 57
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    16d0:	a2 e3       	ldi	r26, 0x32	; 50
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e2 e3       	ldi	r30, 0x32	; 50
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	8f 7e       	andi	r24, 0xEF	; 239
    16dc:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    16de:	a2 e3       	ldi	r26, 0x32	; 50
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	e2 e3       	ldi	r30, 0x32	; 50
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	8f 7d       	andi	r24, 0xDF	; 223
    16ea:	8c 93       	st	X, r24
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	a0 e8       	ldi	r26, 0x80	; 128
    16f2:	bf e3       	ldi	r27, 0x3F	; 63
    16f4:	8d ab       	std	Y+53, r24	; 0x35
    16f6:	9e ab       	std	Y+54, r25	; 0x36
    16f8:	af ab       	std	Y+55, r26	; 0x37
    16fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16fc:	6d a9       	ldd	r22, Y+53	; 0x35
    16fe:	7e a9       	ldd	r23, Y+54	; 0x36
    1700:	8f a9       	ldd	r24, Y+55	; 0x37
    1702:	98 ad       	ldd	r25, Y+56	; 0x38
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	4a ef       	ldi	r20, 0xFA	; 250
    170a:	54 e4       	ldi	r21, 0x44	; 68
    170c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	89 ab       	std	Y+49, r24	; 0x31
    1716:	9a ab       	std	Y+50, r25	; 0x32
    1718:	ab ab       	std	Y+51, r26	; 0x33
    171a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    171c:	69 a9       	ldd	r22, Y+49	; 0x31
    171e:	7a a9       	ldd	r23, Y+50	; 0x32
    1720:	8b a9       	ldd	r24, Y+51	; 0x33
    1722:	9c a9       	ldd	r25, Y+52	; 0x34
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e8       	ldi	r20, 0x80	; 128
    172a:	5f e3       	ldi	r21, 0x3F	; 63
    172c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1730:	88 23       	and	r24, r24
    1732:	2c f4       	brge	.+10     	; 0x173e <LCD_sendCommand+0x84>
		__ticks = 1;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	98 ab       	std	Y+48, r25	; 0x30
    173a:	8f a7       	std	Y+47, r24	; 0x2f
    173c:	3f c0       	rjmp	.+126    	; 0x17bc <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    173e:	69 a9       	ldd	r22, Y+49	; 0x31
    1740:	7a a9       	ldd	r23, Y+50	; 0x32
    1742:	8b a9       	ldd	r24, Y+51	; 0x33
    1744:	9c a9       	ldd	r25, Y+52	; 0x34
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	3f ef       	ldi	r19, 0xFF	; 255
    174a:	4f e7       	ldi	r20, 0x7F	; 127
    174c:	57 e4       	ldi	r21, 0x47	; 71
    174e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1752:	18 16       	cp	r1, r24
    1754:	4c f5       	brge	.+82     	; 0x17a8 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1756:	6d a9       	ldd	r22, Y+53	; 0x35
    1758:	7e a9       	ldd	r23, Y+54	; 0x36
    175a:	8f a9       	ldd	r24, Y+55	; 0x37
    175c:	98 ad       	ldd	r25, Y+56	; 0x38
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	40 e2       	ldi	r20, 0x20	; 32
    1764:	51 e4       	ldi	r21, 0x41	; 65
    1766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	bc 01       	movw	r22, r24
    1770:	cd 01       	movw	r24, r26
    1772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	98 ab       	std	Y+48, r25	; 0x30
    177c:	8f a7       	std	Y+47, r24	; 0x2f
    177e:	0f c0       	rjmp	.+30     	; 0x179e <LCD_sendCommand+0xe4>
    1780:	88 ec       	ldi	r24, 0xC8	; 200
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	9e a7       	std	Y+46, r25	; 0x2e
    1786:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1788:	8d a5       	ldd	r24, Y+45	; 0x2d
    178a:	9e a5       	ldd	r25, Y+46	; 0x2e
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	f1 f7       	brne	.-4      	; 0x178c <LCD_sendCommand+0xd2>
    1790:	9e a7       	std	Y+46, r25	; 0x2e
    1792:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1794:	8f a5       	ldd	r24, Y+47	; 0x2f
    1796:	98 a9       	ldd	r25, Y+48	; 0x30
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	98 ab       	std	Y+48, r25	; 0x30
    179c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    179e:	8f a5       	ldd	r24, Y+47	; 0x2f
    17a0:	98 a9       	ldd	r25, Y+48	; 0x30
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	69 f7       	brne	.-38     	; 0x1780 <LCD_sendCommand+0xc6>
    17a6:	14 c0       	rjmp	.+40     	; 0x17d0 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a8:	69 a9       	ldd	r22, Y+49	; 0x31
    17aa:	7a a9       	ldd	r23, Y+50	; 0x32
    17ac:	8b a9       	ldd	r24, Y+51	; 0x33
    17ae:	9c a9       	ldd	r25, Y+52	; 0x34
    17b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	98 ab       	std	Y+48, r25	; 0x30
    17ba:	8f a7       	std	Y+47, r24	; 0x2f
    17bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    17be:	98 a9       	ldd	r25, Y+48	; 0x30
    17c0:	9c a7       	std	Y+44, r25	; 0x2c
    17c2:	8b a7       	std	Y+43, r24	; 0x2b
    17c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    17c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <LCD_sendCommand+0x10e>
    17cc:	9c a7       	std	Y+44, r25	; 0x2c
    17ce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    17d0:	a2 e3       	ldi	r26, 0x32	; 50
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e2 e3       	ldi	r30, 0x32	; 50
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	80 64       	ori	r24, 0x40	; 64
    17dc:	8c 93       	st	X, r24
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	a0 e8       	ldi	r26, 0x80	; 128
    17e4:	bf e3       	ldi	r27, 0x3F	; 63
    17e6:	8f a3       	std	Y+39, r24	; 0x27
    17e8:	98 a7       	std	Y+40, r25	; 0x28
    17ea:	a9 a7       	std	Y+41, r26	; 0x29
    17ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ee:	6f a1       	ldd	r22, Y+39	; 0x27
    17f0:	78 a5       	ldd	r23, Y+40	; 0x28
    17f2:	89 a5       	ldd	r24, Y+41	; 0x29
    17f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	4a ef       	ldi	r20, 0xFA	; 250
    17fc:	54 e4       	ldi	r21, 0x44	; 68
    17fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	8b a3       	std	Y+35, r24	; 0x23
    1808:	9c a3       	std	Y+36, r25	; 0x24
    180a:	ad a3       	std	Y+37, r26	; 0x25
    180c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    180e:	6b a1       	ldd	r22, Y+35	; 0x23
    1810:	7c a1       	ldd	r23, Y+36	; 0x24
    1812:	8d a1       	ldd	r24, Y+37	; 0x25
    1814:	9e a1       	ldd	r25, Y+38	; 0x26
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e8       	ldi	r20, 0x80	; 128
    181c:	5f e3       	ldi	r21, 0x3F	; 63
    181e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1822:	88 23       	and	r24, r24
    1824:	2c f4       	brge	.+10     	; 0x1830 <LCD_sendCommand+0x176>
		__ticks = 1;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	9a a3       	std	Y+34, r25	; 0x22
    182c:	89 a3       	std	Y+33, r24	; 0x21
    182e:	3f c0       	rjmp	.+126    	; 0x18ae <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1830:	6b a1       	ldd	r22, Y+35	; 0x23
    1832:	7c a1       	ldd	r23, Y+36	; 0x24
    1834:	8d a1       	ldd	r24, Y+37	; 0x25
    1836:	9e a1       	ldd	r25, Y+38	; 0x26
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	3f ef       	ldi	r19, 0xFF	; 255
    183c:	4f e7       	ldi	r20, 0x7F	; 127
    183e:	57 e4       	ldi	r21, 0x47	; 71
    1840:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1844:	18 16       	cp	r1, r24
    1846:	4c f5       	brge	.+82     	; 0x189a <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1848:	6f a1       	ldd	r22, Y+39	; 0x27
    184a:	78 a5       	ldd	r23, Y+40	; 0x28
    184c:	89 a5       	ldd	r24, Y+41	; 0x29
    184e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e2       	ldi	r20, 0x20	; 32
    1856:	51 e4       	ldi	r21, 0x41	; 65
    1858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	bc 01       	movw	r22, r24
    1862:	cd 01       	movw	r24, r26
    1864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	9a a3       	std	Y+34, r25	; 0x22
    186e:	89 a3       	std	Y+33, r24	; 0x21
    1870:	0f c0       	rjmp	.+30     	; 0x1890 <LCD_sendCommand+0x1d6>
    1872:	88 ec       	ldi	r24, 0xC8	; 200
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	98 a3       	std	Y+32, r25	; 0x20
    1878:	8f 8f       	std	Y+31, r24	; 0x1f
    187a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    187c:	98 a1       	ldd	r25, Y+32	; 0x20
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	f1 f7       	brne	.-4      	; 0x187e <LCD_sendCommand+0x1c4>
    1882:	98 a3       	std	Y+32, r25	; 0x20
    1884:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1886:	89 a1       	ldd	r24, Y+33	; 0x21
    1888:	9a a1       	ldd	r25, Y+34	; 0x22
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	9a a3       	std	Y+34, r25	; 0x22
    188e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1890:	89 a1       	ldd	r24, Y+33	; 0x21
    1892:	9a a1       	ldd	r25, Y+34	; 0x22
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	69 f7       	brne	.-38     	; 0x1872 <LCD_sendCommand+0x1b8>
    1898:	14 c0       	rjmp	.+40     	; 0x18c2 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189a:	6b a1       	ldd	r22, Y+35	; 0x23
    189c:	7c a1       	ldd	r23, Y+36	; 0x24
    189e:	8d a1       	ldd	r24, Y+37	; 0x25
    18a0:	9e a1       	ldd	r25, Y+38	; 0x26
    18a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	9a a3       	std	Y+34, r25	; 0x22
    18ac:	89 a3       	std	Y+33, r24	; 0x21
    18ae:	89 a1       	ldd	r24, Y+33	; 0x21
    18b0:	9a a1       	ldd	r25, Y+34	; 0x22
    18b2:	9e 8f       	std	Y+30, r25	; 0x1e
    18b4:	8d 8f       	std	Y+29, r24	; 0x1d
    18b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <LCD_sendCommand+0x200>
    18be:	9e 8f       	std	Y+30, r25	; 0x1e
    18c0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    18c2:	e5 e3       	ldi	r30, 0x35	; 53
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	89 ad       	ldd	r24, Y+57	; 0x39
    18c8:	80 83       	st	Z, r24
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	a0 e8       	ldi	r26, 0x80	; 128
    18d0:	bf e3       	ldi	r27, 0x3F	; 63
    18d2:	89 8f       	std	Y+25, r24	; 0x19
    18d4:	9a 8f       	std	Y+26, r25	; 0x1a
    18d6:	ab 8f       	std	Y+27, r26	; 0x1b
    18d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18da:	69 8d       	ldd	r22, Y+25	; 0x19
    18dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	4a ef       	ldi	r20, 0xFA	; 250
    18e8:	54 e4       	ldi	r21, 0x44	; 68
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	8d 8b       	std	Y+21, r24	; 0x15
    18f4:	9e 8b       	std	Y+22, r25	; 0x16
    18f6:	af 8b       	std	Y+23, r26	; 0x17
    18f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18fa:	6d 89       	ldd	r22, Y+21	; 0x15
    18fc:	7e 89       	ldd	r23, Y+22	; 0x16
    18fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1900:	98 8d       	ldd	r25, Y+24	; 0x18
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e8       	ldi	r20, 0x80	; 128
    1908:	5f e3       	ldi	r21, 0x3F	; 63
    190a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    190e:	88 23       	and	r24, r24
    1910:	2c f4       	brge	.+10     	; 0x191c <LCD_sendCommand+0x262>
		__ticks = 1;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	9c 8b       	std	Y+20, r25	; 0x14
    1918:	8b 8b       	std	Y+19, r24	; 0x13
    191a:	3f c0       	rjmp	.+126    	; 0x199a <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    191c:	6d 89       	ldd	r22, Y+21	; 0x15
    191e:	7e 89       	ldd	r23, Y+22	; 0x16
    1920:	8f 89       	ldd	r24, Y+23	; 0x17
    1922:	98 8d       	ldd	r25, Y+24	; 0x18
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	3f ef       	ldi	r19, 0xFF	; 255
    1928:	4f e7       	ldi	r20, 0x7F	; 127
    192a:	57 e4       	ldi	r21, 0x47	; 71
    192c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1930:	18 16       	cp	r1, r24
    1932:	4c f5       	brge	.+82     	; 0x1986 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1934:	69 8d       	ldd	r22, Y+25	; 0x19
    1936:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1938:	8b 8d       	ldd	r24, Y+27	; 0x1b
    193a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e2       	ldi	r20, 0x20	; 32
    1942:	51 e4       	ldi	r21, 0x41	; 65
    1944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
    1950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	9c 8b       	std	Y+20, r25	; 0x14
    195a:	8b 8b       	std	Y+19, r24	; 0x13
    195c:	0f c0       	rjmp	.+30     	; 0x197c <LCD_sendCommand+0x2c2>
    195e:	88 ec       	ldi	r24, 0xC8	; 200
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	9a 8b       	std	Y+18, r25	; 0x12
    1964:	89 8b       	std	Y+17, r24	; 0x11
    1966:	89 89       	ldd	r24, Y+17	; 0x11
    1968:	9a 89       	ldd	r25, Y+18	; 0x12
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <LCD_sendCommand+0x2b0>
    196e:	9a 8b       	std	Y+18, r25	; 0x12
    1970:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1972:	8b 89       	ldd	r24, Y+19	; 0x13
    1974:	9c 89       	ldd	r25, Y+20	; 0x14
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	9c 8b       	std	Y+20, r25	; 0x14
    197a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197c:	8b 89       	ldd	r24, Y+19	; 0x13
    197e:	9c 89       	ldd	r25, Y+20	; 0x14
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	69 f7       	brne	.-38     	; 0x195e <LCD_sendCommand+0x2a4>
    1984:	14 c0       	rjmp	.+40     	; 0x19ae <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1986:	6d 89       	ldd	r22, Y+21	; 0x15
    1988:	7e 89       	ldd	r23, Y+22	; 0x16
    198a:	8f 89       	ldd	r24, Y+23	; 0x17
    198c:	98 8d       	ldd	r25, Y+24	; 0x18
    198e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	9c 8b       	std	Y+20, r25	; 0x14
    1998:	8b 8b       	std	Y+19, r24	; 0x13
    199a:	8b 89       	ldd	r24, Y+19	; 0x13
    199c:	9c 89       	ldd	r25, Y+20	; 0x14
    199e:	98 8b       	std	Y+16, r25	; 0x10
    19a0:	8f 87       	std	Y+15, r24	; 0x0f
    19a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a4:	98 89       	ldd	r25, Y+16	; 0x10
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	f1 f7       	brne	.-4      	; 0x19a6 <LCD_sendCommand+0x2ec>
    19aa:	98 8b       	std	Y+16, r25	; 0x10
    19ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    19ae:	a2 e3       	ldi	r26, 0x32	; 50
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e2 e3       	ldi	r30, 0x32	; 50
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	8f 7b       	andi	r24, 0xBF	; 191
    19ba:	8c 93       	st	X, r24
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	a0 e8       	ldi	r26, 0x80	; 128
    19c2:	bf e3       	ldi	r27, 0x3F	; 63
    19c4:	8b 87       	std	Y+11, r24	; 0x0b
    19c6:	9c 87       	std	Y+12, r25	; 0x0c
    19c8:	ad 87       	std	Y+13, r26	; 0x0d
    19ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	4a ef       	ldi	r20, 0xFA	; 250
    19da:	54 e4       	ldi	r21, 0x44	; 68
    19dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	8f 83       	std	Y+7, r24	; 0x07
    19e6:	98 87       	std	Y+8, r25	; 0x08
    19e8:	a9 87       	std	Y+9, r26	; 0x09
    19ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ec:	6f 81       	ldd	r22, Y+7	; 0x07
    19ee:	78 85       	ldd	r23, Y+8	; 0x08
    19f0:	89 85       	ldd	r24, Y+9	; 0x09
    19f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e8       	ldi	r20, 0x80	; 128
    19fa:	5f e3       	ldi	r21, 0x3F	; 63
    19fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a00:	88 23       	and	r24, r24
    1a02:	2c f4       	brge	.+10     	; 0x1a0e <LCD_sendCommand+0x354>
		__ticks = 1;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	9e 83       	std	Y+6, r25	; 0x06
    1a0a:	8d 83       	std	Y+5, r24	; 0x05
    1a0c:	3f c0       	rjmp	.+126    	; 0x1a8c <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a10:	78 85       	ldd	r23, Y+8	; 0x08
    1a12:	89 85       	ldd	r24, Y+9	; 0x09
    1a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	3f ef       	ldi	r19, 0xFF	; 255
    1a1a:	4f e7       	ldi	r20, 0x7F	; 127
    1a1c:	57 e4       	ldi	r21, 0x47	; 71
    1a1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a22:	18 16       	cp	r1, r24
    1a24:	4c f5       	brge	.+82     	; 0x1a78 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e2       	ldi	r20, 0x20	; 32
    1a34:	51 e4       	ldi	r21, 0x41	; 65
    1a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	bc 01       	movw	r22, r24
    1a40:	cd 01       	movw	r24, r26
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9e 83       	std	Y+6, r25	; 0x06
    1a4c:	8d 83       	std	Y+5, r24	; 0x05
    1a4e:	0f c0       	rjmp	.+30     	; 0x1a6e <LCD_sendCommand+0x3b4>
    1a50:	88 ec       	ldi	r24, 0xC8	; 200
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9c 83       	std	Y+4, r25	; 0x04
    1a56:	8b 83       	std	Y+3, r24	; 0x03
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <LCD_sendCommand+0x3a2>
    1a60:	9c 83       	std	Y+4, r25	; 0x04
    1a62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a64:	8d 81       	ldd	r24, Y+5	; 0x05
    1a66:	9e 81       	ldd	r25, Y+6	; 0x06
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	9e 83       	std	Y+6, r25	; 0x06
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a70:	9e 81       	ldd	r25, Y+6	; 0x06
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	69 f7       	brne	.-38     	; 0x1a50 <LCD_sendCommand+0x396>
    1a76:	14 c0       	rjmp	.+40     	; 0x1aa0 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a78:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7a:	78 85       	ldd	r23, Y+8	; 0x08
    1a7c:	89 85       	ldd	r24, Y+9	; 0x09
    1a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	9e 83       	std	Y+6, r25	; 0x06
    1a8a:	8d 83       	std	Y+5, r24	; 0x05
    1a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a90:	9a 83       	std	Y+2, r25	; 0x02
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	9a 81       	ldd	r25, Y+2	; 0x02
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <LCD_sendCommand+0x3de>
    1a9c:	9a 83       	std	Y+2, r25	; 0x02
    1a9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1aa0:	e9 96       	adiw	r28, 0x39	; 57
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	cd bf       	out	0x3d, r28	; 61
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	e9 97       	sbiw	r28, 0x39	; 57
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
    1ac6:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1ac8:	a2 e3       	ldi	r26, 0x32	; 50
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e2 e3       	ldi	r30, 0x32	; 50
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	80 61       	ori	r24, 0x10	; 16
    1ad4:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1ad6:	a2 e3       	ldi	r26, 0x32	; 50
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e2 e3       	ldi	r30, 0x32	; 50
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	8f 7d       	andi	r24, 0xDF	; 223
    1ae2:	8c 93       	st	X, r24
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a0 e8       	ldi	r26, 0x80	; 128
    1aea:	bf e3       	ldi	r27, 0x3F	; 63
    1aec:	8d ab       	std	Y+53, r24	; 0x35
    1aee:	9e ab       	std	Y+54, r25	; 0x36
    1af0:	af ab       	std	Y+55, r26	; 0x37
    1af2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af4:	6d a9       	ldd	r22, Y+53	; 0x35
    1af6:	7e a9       	ldd	r23, Y+54	; 0x36
    1af8:	8f a9       	ldd	r24, Y+55	; 0x37
    1afa:	98 ad       	ldd	r25, Y+56	; 0x38
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	4a ef       	ldi	r20, 0xFA	; 250
    1b02:	54 e4       	ldi	r21, 0x44	; 68
    1b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	89 ab       	std	Y+49, r24	; 0x31
    1b0e:	9a ab       	std	Y+50, r25	; 0x32
    1b10:	ab ab       	std	Y+51, r26	; 0x33
    1b12:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b14:	69 a9       	ldd	r22, Y+49	; 0x31
    1b16:	7a a9       	ldd	r23, Y+50	; 0x32
    1b18:	8b a9       	ldd	r24, Y+51	; 0x33
    1b1a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e8       	ldi	r20, 0x80	; 128
    1b22:	5f e3       	ldi	r21, 0x3F	; 63
    1b24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b28:	88 23       	and	r24, r24
    1b2a:	2c f4       	brge	.+10     	; 0x1b36 <LCD_displayCharacter+0x84>
		__ticks = 1;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	98 ab       	std	Y+48, r25	; 0x30
    1b32:	8f a7       	std	Y+47, r24	; 0x2f
    1b34:	3f c0       	rjmp	.+126    	; 0x1bb4 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1b36:	69 a9       	ldd	r22, Y+49	; 0x31
    1b38:	7a a9       	ldd	r23, Y+50	; 0x32
    1b3a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b3c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	3f ef       	ldi	r19, 0xFF	; 255
    1b42:	4f e7       	ldi	r20, 0x7F	; 127
    1b44:	57 e4       	ldi	r21, 0x47	; 71
    1b46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b4a:	18 16       	cp	r1, r24
    1b4c:	4c f5       	brge	.+82     	; 0x1ba0 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4e:	6d a9       	ldd	r22, Y+53	; 0x35
    1b50:	7e a9       	ldd	r23, Y+54	; 0x36
    1b52:	8f a9       	ldd	r24, Y+55	; 0x37
    1b54:	98 ad       	ldd	r25, Y+56	; 0x38
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e2       	ldi	r20, 0x20	; 32
    1b5c:	51 e4       	ldi	r21, 0x41	; 65
    1b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	98 ab       	std	Y+48, r25	; 0x30
    1b74:	8f a7       	std	Y+47, r24	; 0x2f
    1b76:	0f c0       	rjmp	.+30     	; 0x1b96 <LCD_displayCharacter+0xe4>
    1b78:	88 ec       	ldi	r24, 0xC8	; 200
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	9e a7       	std	Y+46, r25	; 0x2e
    1b7e:	8d a7       	std	Y+45, r24	; 0x2d
    1b80:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b82:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <LCD_displayCharacter+0xd2>
    1b88:	9e a7       	std	Y+46, r25	; 0x2e
    1b8a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	98 ab       	std	Y+48, r25	; 0x30
    1b94:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b98:	98 a9       	ldd	r25, Y+48	; 0x30
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	69 f7       	brne	.-38     	; 0x1b78 <LCD_displayCharacter+0xc6>
    1b9e:	14 c0       	rjmp	.+40     	; 0x1bc8 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ba2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ba4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ba6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	98 ab       	std	Y+48, r25	; 0x30
    1bb2:	8f a7       	std	Y+47, r24	; 0x2f
    1bb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bb6:	98 a9       	ldd	r25, Y+48	; 0x30
    1bb8:	9c a7       	std	Y+44, r25	; 0x2c
    1bba:	8b a7       	std	Y+43, r24	; 0x2b
    1bbc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bbe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <LCD_displayCharacter+0x10e>
    1bc4:	9c a7       	std	Y+44, r25	; 0x2c
    1bc6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1bc8:	a2 e3       	ldi	r26, 0x32	; 50
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e2 e3       	ldi	r30, 0x32	; 50
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	80 64       	ori	r24, 0x40	; 64
    1bd4:	8c 93       	st	X, r24
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	a0 e8       	ldi	r26, 0x80	; 128
    1bdc:	bf e3       	ldi	r27, 0x3F	; 63
    1bde:	8f a3       	std	Y+39, r24	; 0x27
    1be0:	98 a7       	std	Y+40, r25	; 0x28
    1be2:	a9 a7       	std	Y+41, r26	; 0x29
    1be4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be6:	6f a1       	ldd	r22, Y+39	; 0x27
    1be8:	78 a5       	ldd	r23, Y+40	; 0x28
    1bea:	89 a5       	ldd	r24, Y+41	; 0x29
    1bec:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	4a ef       	ldi	r20, 0xFA	; 250
    1bf4:	54 e4       	ldi	r21, 0x44	; 68
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8b a3       	std	Y+35, r24	; 0x23
    1c00:	9c a3       	std	Y+36, r25	; 0x24
    1c02:	ad a3       	std	Y+37, r26	; 0x25
    1c04:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c06:	6b a1       	ldd	r22, Y+35	; 0x23
    1c08:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <LCD_displayCharacter+0x176>
		__ticks = 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9a a3       	std	Y+34, r25	; 0x22
    1c24:	89 a3       	std	Y+33, r24	; 0x21
    1c26:	3f c0       	rjmp	.+126    	; 0x1ca6 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1c28:	6b a1       	ldd	r22, Y+35	; 0x23
    1c2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	3f ef       	ldi	r19, 0xFF	; 255
    1c34:	4f e7       	ldi	r20, 0x7F	; 127
    1c36:	57 e4       	ldi	r21, 0x47	; 71
    1c38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	4c f5       	brge	.+82     	; 0x1c92 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c40:	6f a1       	ldd	r22, Y+39	; 0x27
    1c42:	78 a5       	ldd	r23, Y+40	; 0x28
    1c44:	89 a5       	ldd	r24, Y+41	; 0x29
    1c46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e2       	ldi	r20, 0x20	; 32
    1c4e:	51 e4       	ldi	r21, 0x41	; 65
    1c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	bc 01       	movw	r22, r24
    1c5a:	cd 01       	movw	r24, r26
    1c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	9a a3       	std	Y+34, r25	; 0x22
    1c66:	89 a3       	std	Y+33, r24	; 0x21
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <LCD_displayCharacter+0x1d6>
    1c6a:	88 ec       	ldi	r24, 0xC8	; 200
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	98 a3       	std	Y+32, r25	; 0x20
    1c70:	8f 8f       	std	Y+31, r24	; 0x1f
    1c72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c74:	98 a1       	ldd	r25, Y+32	; 0x20
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <LCD_displayCharacter+0x1c4>
    1c7a:	98 a3       	std	Y+32, r25	; 0x20
    1c7c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c80:	9a a1       	ldd	r25, Y+34	; 0x22
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	9a a3       	std	Y+34, r25	; 0x22
    1c86:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c88:	89 a1       	ldd	r24, Y+33	; 0x21
    1c8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	69 f7       	brne	.-38     	; 0x1c6a <LCD_displayCharacter+0x1b8>
    1c90:	14 c0       	rjmp	.+40     	; 0x1cba <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c92:	6b a1       	ldd	r22, Y+35	; 0x23
    1c94:	7c a1       	ldd	r23, Y+36	; 0x24
    1c96:	8d a1       	ldd	r24, Y+37	; 0x25
    1c98:	9e a1       	ldd	r25, Y+38	; 0x26
    1c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9a a3       	std	Y+34, r25	; 0x22
    1ca4:	89 a3       	std	Y+33, r24	; 0x21
    1ca6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca8:	9a a1       	ldd	r25, Y+34	; 0x22
    1caa:	9e 8f       	std	Y+30, r25	; 0x1e
    1cac:	8d 8f       	std	Y+29, r24	; 0x1d
    1cae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <LCD_displayCharacter+0x200>
    1cb6:	9e 8f       	std	Y+30, r25	; 0x1e
    1cb8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    1cba:	e5 e3       	ldi	r30, 0x35	; 53
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	89 ad       	ldd	r24, Y+57	; 0x39
    1cc0:	80 83       	st	Z, r24
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	a0 e8       	ldi	r26, 0x80	; 128
    1cc8:	bf e3       	ldi	r27, 0x3F	; 63
    1cca:	89 8f       	std	Y+25, r24	; 0x19
    1ccc:	9a 8f       	std	Y+26, r25	; 0x1a
    1cce:	ab 8f       	std	Y+27, r26	; 0x1b
    1cd0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd2:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	4a ef       	ldi	r20, 0xFA	; 250
    1ce0:	54 e4       	ldi	r21, 0x44	; 68
    1ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	8d 8b       	std	Y+21, r24	; 0x15
    1cec:	9e 8b       	std	Y+22, r25	; 0x16
    1cee:	af 8b       	std	Y+23, r26	; 0x17
    1cf0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cf2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e8       	ldi	r20, 0x80	; 128
    1d00:	5f e3       	ldi	r21, 0x3F	; 63
    1d02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d06:	88 23       	and	r24, r24
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <LCD_displayCharacter+0x262>
		__ticks = 1;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9c 8b       	std	Y+20, r25	; 0x14
    1d10:	8b 8b       	std	Y+19, r24	; 0x13
    1d12:	3f c0       	rjmp	.+126    	; 0x1d92 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1d14:	6d 89       	ldd	r22, Y+21	; 0x15
    1d16:	7e 89       	ldd	r23, Y+22	; 0x16
    1d18:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	3f ef       	ldi	r19, 0xFF	; 255
    1d20:	4f e7       	ldi	r20, 0x7F	; 127
    1d22:	57 e4       	ldi	r21, 0x47	; 71
    1d24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	4c f5       	brge	.+82     	; 0x1d7e <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e2       	ldi	r20, 0x20	; 32
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9c 8b       	std	Y+20, r25	; 0x14
    1d52:	8b 8b       	std	Y+19, r24	; 0x13
    1d54:	0f c0       	rjmp	.+30     	; 0x1d74 <LCD_displayCharacter+0x2c2>
    1d56:	88 ec       	ldi	r24, 0xC8	; 200
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9a 8b       	std	Y+18, r25	; 0x12
    1d5c:	89 8b       	std	Y+17, r24	; 0x11
    1d5e:	89 89       	ldd	r24, Y+17	; 0x11
    1d60:	9a 89       	ldd	r25, Y+18	; 0x12
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <LCD_displayCharacter+0x2b0>
    1d66:	9a 8b       	std	Y+18, r25	; 0x12
    1d68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	9c 8b       	std	Y+20, r25	; 0x14
    1d72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d74:	8b 89       	ldd	r24, Y+19	; 0x13
    1d76:	9c 89       	ldd	r25, Y+20	; 0x14
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	69 f7       	brne	.-38     	; 0x1d56 <LCD_displayCharacter+0x2a4>
    1d7c:	14 c0       	rjmp	.+40     	; 0x1da6 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d80:	7e 89       	ldd	r23, Y+22	; 0x16
    1d82:	8f 89       	ldd	r24, Y+23	; 0x17
    1d84:	98 8d       	ldd	r25, Y+24	; 0x18
    1d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9c 8b       	std	Y+20, r25	; 0x14
    1d90:	8b 8b       	std	Y+19, r24	; 0x13
    1d92:	8b 89       	ldd	r24, Y+19	; 0x13
    1d94:	9c 89       	ldd	r25, Y+20	; 0x14
    1d96:	98 8b       	std	Y+16, r25	; 0x10
    1d98:	8f 87       	std	Y+15, r24	; 0x0f
    1d9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9c:	98 89       	ldd	r25, Y+16	; 0x10
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_displayCharacter+0x2ec>
    1da2:	98 8b       	std	Y+16, r25	; 0x10
    1da4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1da6:	a2 e3       	ldi	r26, 0x32	; 50
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e2 e3       	ldi	r30, 0x32	; 50
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	8f 7b       	andi	r24, 0xBF	; 191
    1db2:	8c 93       	st	X, r24
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	a0 e8       	ldi	r26, 0x80	; 128
    1dba:	bf e3       	ldi	r27, 0x3F	; 63
    1dbc:	8b 87       	std	Y+11, r24	; 0x0b
    1dbe:	9c 87       	std	Y+12, r25	; 0x0c
    1dc0:	ad 87       	std	Y+13, r26	; 0x0d
    1dc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	4a ef       	ldi	r20, 0xFA	; 250
    1dd2:	54 e4       	ldi	r21, 0x44	; 68
    1dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	8f 83       	std	Y+7, r24	; 0x07
    1dde:	98 87       	std	Y+8, r25	; 0x08
    1de0:	a9 87       	std	Y+9, r26	; 0x09
    1de2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1de4:	6f 81       	ldd	r22, Y+7	; 0x07
    1de6:	78 85       	ldd	r23, Y+8	; 0x08
    1de8:	89 85       	ldd	r24, Y+9	; 0x09
    1dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e8       	ldi	r20, 0x80	; 128
    1df2:	5f e3       	ldi	r21, 0x3F	; 63
    1df4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1df8:	88 23       	and	r24, r24
    1dfa:	2c f4       	brge	.+10     	; 0x1e06 <LCD_displayCharacter+0x354>
		__ticks = 1;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9e 83       	std	Y+6, r25	; 0x06
    1e02:	8d 83       	std	Y+5, r24	; 0x05
    1e04:	3f c0       	rjmp	.+126    	; 0x1e84 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1e06:	6f 81       	ldd	r22, Y+7	; 0x07
    1e08:	78 85       	ldd	r23, Y+8	; 0x08
    1e0a:	89 85       	ldd	r24, Y+9	; 0x09
    1e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	3f ef       	ldi	r19, 0xFF	; 255
    1e12:	4f e7       	ldi	r20, 0x7F	; 127
    1e14:	57 e4       	ldi	r21, 0x47	; 71
    1e16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e1a:	18 16       	cp	r1, r24
    1e1c:	4c f5       	brge	.+82     	; 0x1e70 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e2       	ldi	r20, 0x20	; 32
    1e2c:	51 e4       	ldi	r21, 0x41	; 65
    1e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	bc 01       	movw	r22, r24
    1e38:	cd 01       	movw	r24, r26
    1e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	9e 83       	std	Y+6, r25	; 0x06
    1e44:	8d 83       	std	Y+5, r24	; 0x05
    1e46:	0f c0       	rjmp	.+30     	; 0x1e66 <LCD_displayCharacter+0x3b4>
    1e48:	88 ec       	ldi	r24, 0xC8	; 200
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	9c 83       	std	Y+4, r25	; 0x04
    1e4e:	8b 83       	std	Y+3, r24	; 0x03
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <LCD_displayCharacter+0x3a2>
    1e58:	9c 83       	std	Y+4, r25	; 0x04
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	9e 83       	std	Y+6, r25	; 0x06
    1e64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	69 f7       	brne	.-38     	; 0x1e48 <LCD_displayCharacter+0x396>
    1e6e:	14 c0       	rjmp	.+40     	; 0x1e98 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e70:	6f 81       	ldd	r22, Y+7	; 0x07
    1e72:	78 85       	ldd	r23, Y+8	; 0x08
    1e74:	89 85       	ldd	r24, Y+9	; 0x09
    1e76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	9e 83       	std	Y+6, r25	; 0x06
    1e82:	8d 83       	std	Y+5, r24	; 0x05
    1e84:	8d 81       	ldd	r24, Y+5	; 0x05
    1e86:	9e 81       	ldd	r25, Y+6	; 0x06
    1e88:	9a 83       	std	Y+2, r25	; 0x02
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <LCD_displayCharacter+0x3de>
    1e94:	9a 83       	std	Y+2, r25	; 0x02
    1e96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    1e98:	e9 96       	adiw	r28, 0x39	; 57
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	de bf       	out	0x3e, r29	; 62
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	cd bf       	out	0x3d, r28	; 61
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <LCD_displayString+0x6>
    1eb0:	0f 92       	push	r0
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	9b 83       	std	Y+3, r25	; 0x03
    1eb8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1eba:	19 82       	std	Y+1, r1	; 0x01
    1ebc:	0e c0       	rjmp	.+28     	; 0x1eda <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec8:	fc 01       	movw	r30, r24
    1eca:	e2 0f       	add	r30, r18
    1ecc:	f3 1f       	adc	r31, r19
    1ece:	80 81       	ld	r24, Z
    1ed0:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <LCD_displayCharacter>
		i++;
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	8f 5f       	subi	r24, 0xFF	; 255
    1ed8:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	e2 0f       	add	r30, r18
    1ee8:	f3 1f       	adc	r31, r19
    1eea:	80 81       	ld	r24, Z
    1eec:	88 23       	and	r24, r24
    1eee:	39 f7       	brne	.-50     	; 0x1ebe <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <LCD_goToRowColumn+0x6>
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <LCD_goToRowColumn+0x8>
    1f04:	0f 92       	push	r0
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
    1f0a:	8a 83       	std	Y+2, r24	; 0x02
    1f0c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	3d 83       	std	Y+5, r19	; 0x05
    1f16:	2c 83       	std	Y+4, r18	; 0x04
    1f18:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	91 05       	cpc	r25, r1
    1f20:	c1 f0       	breq	.+48     	; 0x1f52 <LCD_goToRowColumn+0x56>
    1f22:	2c 81       	ldd	r18, Y+4	; 0x04
    1f24:	3d 81       	ldd	r19, Y+5	; 0x05
    1f26:	22 30       	cpi	r18, 0x02	; 2
    1f28:	31 05       	cpc	r19, r1
    1f2a:	2c f4       	brge	.+10     	; 0x1f36 <LCD_goToRowColumn+0x3a>
    1f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	61 f0       	breq	.+24     	; 0x1f4c <LCD_goToRowColumn+0x50>
    1f34:	19 c0       	rjmp	.+50     	; 0x1f68 <LCD_goToRowColumn+0x6c>
    1f36:	2c 81       	ldd	r18, Y+4	; 0x04
    1f38:	3d 81       	ldd	r19, Y+5	; 0x05
    1f3a:	22 30       	cpi	r18, 0x02	; 2
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	69 f0       	breq	.+26     	; 0x1f5a <LCD_goToRowColumn+0x5e>
    1f40:	8c 81       	ldd	r24, Y+4	; 0x04
    1f42:	9d 81       	ldd	r25, Y+5	; 0x05
    1f44:	83 30       	cpi	r24, 0x03	; 3
    1f46:	91 05       	cpc	r25, r1
    1f48:	61 f0       	breq	.+24     	; 0x1f62 <LCD_goToRowColumn+0x66>
    1f4a:	0e c0       	rjmp	.+28     	; 0x1f68 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	89 83       	std	Y+1, r24	; 0x01
    1f50:	0b c0       	rjmp	.+22     	; 0x1f68 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	80 5c       	subi	r24, 0xC0	; 192
    1f56:	89 83       	std	Y+1, r24	; 0x01
    1f58:	07 c0       	rjmp	.+14     	; 0x1f68 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	80 5f       	subi	r24, 0xF0	; 240
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	03 c0       	rjmp	.+6      	; 0x1f68 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	80 5b       	subi	r24, 0xB0	; 176
    1f66:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	80 68       	ori	r24, 0x80	; 128
    1f6c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_sendCommand>
}
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	00 d0       	rcall	.+0      	; 0x1f86 <LCD_displayStringRowColumn+0x6>
    1f86:	00 d0       	rcall	.+0      	; 0x1f88 <LCD_displayStringRowColumn+0x8>
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	89 83       	std	Y+1, r24	; 0x01
    1f8e:	6a 83       	std	Y+2, r22	; 0x02
    1f90:	5c 83       	std	Y+4, r21	; 0x04
    1f92:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	6a 81       	ldd	r22, Y+2	; 0x02
    1f98:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa0:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_displayString>
}
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	62 97       	sbiw	r28, 0x12	; 18
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	9a 8b       	std	Y+18, r25	; 0x12
    1fc8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1fca:	89 89       	ldd	r24, Y+17	; 0x11
    1fcc:	9a 89       	ldd	r25, Y+18	; 0x12
    1fce:	9e 01       	movw	r18, r28
    1fd0:	2f 5f       	subi	r18, 0xFF	; 255
    1fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd4:	b9 01       	movw	r22, r18
    1fd6:	4a e0       	ldi	r20, 0x0A	; 10
    1fd8:	50 e0       	ldi	r21, 0x00	; 0
    1fda:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <itoa>
   LCD_displayString(buff);
    1fde:	ce 01       	movw	r24, r28
    1fe0:	01 96       	adiw	r24, 0x01	; 1
    1fe2:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_displayString>
}
    1fe6:	62 96       	adiw	r28, 0x12	; 18
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	cd bf       	out	0x3d, r28	; 61
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_sendCommand>
}
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <recievePassword>:
 *******************************************************************************/
/*
 * Description : Function to get password from MC1
 *     1. recieve byte by byte the password
 */
void recievePassword(uint8* arr) { //loop and send the entire password to microcontroller2
    200c:	0f 93       	push	r16
    200e:	1f 93       	push	r17
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	00 d0       	rcall	.+0      	; 0x2016 <recievePassword+0xa>
    2016:	00 d0       	rcall	.+0      	; 0x2018 <recievePassword+0xc>
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	9c 83       	std	Y+4, r25	; 0x04
    201e:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i = 0; i < PASSWORD_LENGTH; i++) {
    2020:	1a 82       	std	Y+2, r1	; 0x02
    2022:	19 82       	std	Y+1, r1	; 0x01
    2024:	10 c0       	rjmp	.+32     	; 0x2046 <recievePassword+0x3a>
		arr[i]= UART_recieveByte();
    2026:	29 81       	ldd	r18, Y+1	; 0x01
    2028:	3a 81       	ldd	r19, Y+2	; 0x02
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	9c 81       	ldd	r25, Y+4	; 0x04
    202e:	8c 01       	movw	r16, r24
    2030:	02 0f       	add	r16, r18
    2032:	13 1f       	adc	r17, r19
    2034:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <UART_recieveByte>
    2038:	f8 01       	movw	r30, r16
    203a:	80 83       	st	Z, r24
 * Description : Function to get password from MC1
 *     1. recieve byte by byte the password
 */
void recievePassword(uint8* arr) { //loop and send the entire password to microcontroller2
	int i;
	for(i = 0; i < PASSWORD_LENGTH; i++) {
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	9a 81       	ldd	r25, Y+2	; 0x02
    2040:	01 96       	adiw	r24, 0x01	; 1
    2042:	9a 83       	std	Y+2, r25	; 0x02
    2044:	89 83       	std	Y+1, r24	; 0x01
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	9a 81       	ldd	r25, Y+2	; 0x02
    204a:	85 30       	cpi	r24, 0x05	; 5
    204c:	91 05       	cpc	r25, r1
    204e:	5c f3       	brlt	.-42     	; 0x2026 <recievePassword+0x1a>
		arr[i]= UART_recieveByte();
	}
}
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	1f 91       	pop	r17
    205e:	0f 91       	pop	r16
    2060:	08 95       	ret

00002062 <sendPassword>:
/*
 * Description : Function to send password to MC1
 *     1. send byte by byte the password
 */
void sendPassword(const uint8* arr) { //loop and send the entire password to microcontroller2
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	00 d0       	rcall	.+0      	; 0x2068 <sendPassword+0x6>
    2068:	00 d0       	rcall	.+0      	; 0x206a <sendPassword+0x8>
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	9c 83       	std	Y+4, r25	; 0x04
    2070:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i = 0; i < PASSWORD_LENGTH; i++) {
    2072:	1a 82       	std	Y+2, r1	; 0x02
    2074:	19 82       	std	Y+1, r1	; 0x01
    2076:	0f c0       	rjmp	.+30     	; 0x2096 <sendPassword+0x34>
		UART_sendByte(arr[i]);
    2078:	29 81       	ldd	r18, Y+1	; 0x01
    207a:	3a 81       	ldd	r19, Y+2	; 0x02
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	9c 81       	ldd	r25, Y+4	; 0x04
    2080:	fc 01       	movw	r30, r24
    2082:	e2 0f       	add	r30, r18
    2084:	f3 1f       	adc	r31, r19
    2086:	80 81       	ld	r24, Z
    2088:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
 * Description : Function to send password to MC1
 *     1. send byte by byte the password
 */
void sendPassword(const uint8* arr) { //loop and send the entire password to microcontroller2
	int i;
	for(i = 0; i < PASSWORD_LENGTH; i++) {
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	9a 81       	ldd	r25, Y+2	; 0x02
    2090:	01 96       	adiw	r24, 0x01	; 1
    2092:	9a 83       	std	Y+2, r25	; 0x02
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	9a 81       	ldd	r25, Y+2	; 0x02
    209a:	85 30       	cpi	r24, 0x05	; 5
    209c:	91 05       	cpc	r25, r1
    209e:	64 f3       	brlt	.-40     	; 0x2078 <sendPassword+0x16>
		UART_sendByte(arr[i]);
	}
}
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <tickIncrement>:
/*
 * Description : Function to increment ticks and seconds using ISR callback
 *     1. increment ticks
 *     2. increment seconds if it get enough ticks
 */
void tickIncrement() {                           //tick increment function to use in timer ISR to count time freely
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
	ticks++;
    20b6:	80 91 7a 01 	lds	r24, 0x017A
    20ba:	8f 5f       	subi	r24, 0xFF	; 255
    20bc:	80 93 7a 01 	sts	0x017A, r24
	if(ticks == OVERFLOWS_per_SEC) {
    20c0:	80 91 7a 01 	lds	r24, 0x017A
    20c4:	8f 31       	cpi	r24, 0x1F	; 31
    20c6:	39 f4       	brne	.+14     	; 0x20d6 <tickIncrement+0x28>
		seconds++;
    20c8:	80 91 7b 01 	lds	r24, 0x017B
    20cc:	8f 5f       	subi	r24, 0xFF	; 255
    20ce:	80 93 7b 01 	sts	0x017B, r24
		ticks = 0;
    20d2:	10 92 7a 01 	sts	0x017A, r1
	}
}
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <buzzerTickIncrement>:
 * Description : Function to use inside the ISR	since it will be in an infinite loop so it have to be closed inside the ISR
 *     1. increment ticks
 *     2. increment seconds if it get enough ticks
 *     3. stop the buzzer if we meet the defined buzztime
 */
void buzzerTickIncrement() {                     // function to count seconds for the buzzer to pass to the ISR
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
	tickIncrement();
    20e4:	0e 94 57 10 	call	0x20ae	; 0x20ae <tickIncrement>
	if(seconds == BUZZTIME) {
    20e8:	80 91 7b 01 	lds	r24, 0x017B
    20ec:	8c 33       	cpi	r24, 0x3C	; 60
    20ee:	11 f4       	brne	.+4      	; 0x20f4 <buzzerTickIncrement+0x18>
		buzzerOff();
    20f0:	0e 94 d6 08 	call	0x11ac	; 0x11ac <buzzerOff>
	}
}
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <getPasscode>:
/*
 * Description : Function to get saved Passcode from EEPROM
 *     1. read byte by byte the stored values inside the defined initial location
 */
void getPasscode(uint8* data) {                  // function to get passcode from eeprom on start address PASSWORD_INITIAL_LOCATION
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <getPasscode+0x6>
    2100:	00 d0       	rcall	.+0      	; 0x2102 <getPasscode+0x8>
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	9c 83       	std	Y+4, r25	; 0x04
    2108:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i = 0; i < PASSWORD_LENGTH; i++) {
    210a:	1a 82       	std	Y+2, r1	; 0x02
    210c:	19 82       	std	Y+1, r1	; 0x01
    210e:	14 c0       	rjmp	.+40     	; 0x2138 <getPasscode+0x3e>
		EEPROM_readByte((PASSWORD_INITIAL_LOCATION | i), &(data[i]));
    2110:	49 81       	ldd	r20, Y+1	; 0x01
    2112:	5a 81       	ldd	r21, Y+2	; 0x02
    2114:	29 81       	ldd	r18, Y+1	; 0x01
    2116:	3a 81       	ldd	r19, Y+2	; 0x02
    2118:	8b 81       	ldd	r24, Y+3	; 0x03
    211a:	9c 81       	ldd	r25, Y+4	; 0x04
    211c:	28 0f       	add	r18, r24
    211e:	39 1f       	adc	r19, r25
    2120:	ca 01       	movw	r24, r20
    2122:	b9 01       	movw	r22, r18
    2124:	0e 94 30 09 	call	0x1260	; 0x1260 <EEPROM_readByte>
		delay_10xN(10);
    2128:	8a e0       	ldi	r24, 0x0A	; 10
    212a:	0e 94 09 13 	call	0x2612	; 0x2612 <delay_10xN>
 * Description : Function to get saved Passcode from EEPROM
 *     1. read byte by byte the stored values inside the defined initial location
 */
void getPasscode(uint8* data) {                  // function to get passcode from eeprom on start address PASSWORD_INITIAL_LOCATION
	int i;
	for(i = 0; i < PASSWORD_LENGTH; i++) {
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	9a 81       	ldd	r25, Y+2	; 0x02
    2132:	01 96       	adiw	r24, 0x01	; 1
    2134:	9a 83       	std	Y+2, r25	; 0x02
    2136:	89 83       	std	Y+1, r24	; 0x01
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	9a 81       	ldd	r25, Y+2	; 0x02
    213c:	85 30       	cpi	r24, 0x05	; 5
    213e:	91 05       	cpc	r25, r1
    2140:	3c f3       	brlt	.-50     	; 0x2110 <getPasscode+0x16>
		EEPROM_readByte((PASSWORD_INITIAL_LOCATION | i), &(data[i]));
		delay_10xN(10);
	}
}
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <savePasscode>:
/*
 * Description : Function save Passcode on EEPROM
 *     1. write byte by byte the stored values inside the defined initial location
 */
void savePasscode(uint8* data) {                // function to save passcode on eeprom on start address PASSWORD_INITIAL_LOCATION
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	00 d0       	rcall	.+0      	; 0x2156 <savePasscode+0x6>
    2156:	00 d0       	rcall	.+0      	; 0x2158 <savePasscode+0x8>
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	9c 83       	std	Y+4, r25	; 0x04
    215e:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i = 0; i < PASSWORD_LENGTH; i++) {
    2160:	1a 82       	std	Y+2, r1	; 0x02
    2162:	19 82       	std	Y+1, r1	; 0x01
    2164:	16 c0       	rjmp	.+44     	; 0x2192 <savePasscode+0x42>
		EEPROM_writeByte((PASSWORD_INITIAL_LOCATION | i), data[i]);
    2166:	49 81       	ldd	r20, Y+1	; 0x01
    2168:	5a 81       	ldd	r21, Y+2	; 0x02
    216a:	29 81       	ldd	r18, Y+1	; 0x01
    216c:	3a 81       	ldd	r19, Y+2	; 0x02
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	9c 81       	ldd	r25, Y+4	; 0x04
    2172:	fc 01       	movw	r30, r24
    2174:	e2 0f       	add	r30, r18
    2176:	f3 1f       	adc	r31, r19
    2178:	20 81       	ld	r18, Z
    217a:	ca 01       	movw	r24, r20
    217c:	62 2f       	mov	r22, r18
    217e:	0e 94 ef 08 	call	0x11de	; 0x11de <EEPROM_writeByte>
		delay_10xN(10);
    2182:	8a e0       	ldi	r24, 0x0A	; 10
    2184:	0e 94 09 13 	call	0x2612	; 0x2612 <delay_10xN>
 * Description : Function save Passcode on EEPROM
 *     1. write byte by byte the stored values inside the defined initial location
 */
void savePasscode(uint8* data) {                // function to save passcode on eeprom on start address PASSWORD_INITIAL_LOCATION
	int i;
	for(i = 0; i < PASSWORD_LENGTH; i++) {
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	9a 81       	ldd	r25, Y+2	; 0x02
    218c:	01 96       	adiw	r24, 0x01	; 1
    218e:	9a 83       	std	Y+2, r25	; 0x02
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	9a 81       	ldd	r25, Y+2	; 0x02
    2196:	85 30       	cpi	r24, 0x05	; 5
    2198:	91 05       	cpc	r25, r1
    219a:	2c f3       	brlt	.-54     	; 0x2166 <savePasscode+0x16>
		EEPROM_writeByte((PASSWORD_INITIAL_LOCATION | i), data[i]);
		delay_10xN(10);
	}
}
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <samePassword>:
/*
 * Description : Function to check if two given passwords are the same
 *     1. iterate and check each element if it equals the other
 *     2. returns the boolean value if true or false
 */
bool samePassword(uint8* pass1, uint8* pass2) {
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	27 97       	sbiw	r28, 0x07	; 7
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	cd bf       	out	0x3d, r28	; 61
    21be:	9d 83       	std	Y+5, r25	; 0x05
    21c0:	8c 83       	std	Y+4, r24	; 0x04
    21c2:	7f 83       	std	Y+7, r23	; 0x07
    21c4:	6e 83       	std	Y+6, r22	; 0x06
	bool samepassword = TRUE;
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
    21ca:	1a 82       	std	Y+2, r1	; 0x02
    21cc:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0; i < PASSWORD_LENGTH; i++) { //checking if the passcodes are the same
    21ce:	1a 82       	std	Y+2, r1	; 0x02
    21d0:	19 82       	std	Y+1, r1	; 0x01
    21d2:	18 c0       	rjmp	.+48     	; 0x2204 <samePassword+0x5a>
		if(pass1[i] != pass2[i]) {
    21d4:	29 81       	ldd	r18, Y+1	; 0x01
    21d6:	3a 81       	ldd	r19, Y+2	; 0x02
    21d8:	8c 81       	ldd	r24, Y+4	; 0x04
    21da:	9d 81       	ldd	r25, Y+5	; 0x05
    21dc:	fc 01       	movw	r30, r24
    21de:	e2 0f       	add	r30, r18
    21e0:	f3 1f       	adc	r31, r19
    21e2:	40 81       	ld	r20, Z
    21e4:	29 81       	ldd	r18, Y+1	; 0x01
    21e6:	3a 81       	ldd	r19, Y+2	; 0x02
    21e8:	8e 81       	ldd	r24, Y+6	; 0x06
    21ea:	9f 81       	ldd	r25, Y+7	; 0x07
    21ec:	fc 01       	movw	r30, r24
    21ee:	e2 0f       	add	r30, r18
    21f0:	f3 1f       	adc	r31, r19
    21f2:	80 81       	ld	r24, Z
    21f4:	48 17       	cp	r20, r24
    21f6:	09 f0       	breq	.+2      	; 0x21fa <samePassword+0x50>
			samepassword = FALSE;
    21f8:	1b 82       	std	Y+3, r1	; 0x03
 *     2. returns the boolean value if true or false
 */
bool samePassword(uint8* pass1, uint8* pass2) {
	bool samepassword = TRUE;
	int i = 0;
	for(i = 0; i < PASSWORD_LENGTH; i++) { //checking if the passcodes are the same
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	9a 81       	ldd	r25, Y+2	; 0x02
    21fe:	01 96       	adiw	r24, 0x01	; 1
    2200:	9a 83       	std	Y+2, r25	; 0x02
    2202:	89 83       	std	Y+1, r24	; 0x01
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	9a 81       	ldd	r25, Y+2	; 0x02
    2208:	85 30       	cpi	r24, 0x05	; 5
    220a:	91 05       	cpc	r25, r1
    220c:	1c f3       	brlt	.-58     	; 0x21d4 <samePassword+0x2a>
		if(pass1[i] != pass2[i]) {
			samepassword = FALSE;
		}
	}
	return samepassword;
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2210:	27 96       	adiw	r28, 0x07	; 7
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <confirmPasscode>:
 * MC2
 *     1. recieve the password from MC1
 *     2. get the current password from the eeprom
 *     3. if they are the same return true else false
 */
bool confirmPasscode(uint8* arr) {
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	28 97       	sbiw	r28, 0x08	; 8
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	9f 83       	std	Y+7, r25	; 0x07
    2238:	8e 83       	std	Y+6, r24	; 0x06
	recievePassword(arr);
    223a:	8e 81       	ldd	r24, Y+6	; 0x06
    223c:	9f 81       	ldd	r25, Y+7	; 0x07
    223e:	0e 94 06 10 	call	0x200c	; 0x200c <recievePassword>
	uint8 EEPROM_DATA[PASSWORD_LENGTH];
	getPasscode(EEPROM_DATA);
    2242:	ce 01       	movw	r24, r28
    2244:	01 96       	adiw	r24, 0x01	; 1
    2246:	0e 94 7d 10 	call	0x20fa	; 0x20fa <getPasscode>
	if(samePassword(arr, EEPROM_DATA)) {
    224a:	8e 81       	ldd	r24, Y+6	; 0x06
    224c:	9f 81       	ldd	r25, Y+7	; 0x07
    224e:	9e 01       	movw	r18, r28
    2250:	2f 5f       	subi	r18, 0xFF	; 255
    2252:	3f 4f       	sbci	r19, 0xFF	; 255
    2254:	b9 01       	movw	r22, r18
    2256:	0e 94 d5 10 	call	0x21aa	; 0x21aa <samePassword>
    225a:	88 23       	and	r24, r24
    225c:	19 f0       	breq	.+6      	; 0x2264 <confirmPasscode+0x42>
		return TRUE;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	88 87       	std	Y+8, r24	; 0x08
    2262:	01 c0       	rjmp	.+2      	; 0x2266 <confirmPasscode+0x44>
	}
	else {
		return FALSE;
    2264:	18 86       	std	Y+8, r1	; 0x08
    2266:	88 85       	ldd	r24, Y+8	; 0x08
	}
}
    2268:	28 96       	adiw	r28, 0x08	; 8
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	f8 94       	cli
    226e:	de bf       	out	0x3e, r29	; 62
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	cd bf       	out	0x3d, r28	; 61
    2274:	cf 91       	pop	r28
    2276:	df 91       	pop	r29
    2278:	08 95       	ret

0000227a <main>:
/*******************************************************************************
 *                              Main Function                                  *
 *******************************************************************************/

int main(void) {
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	ab 97       	sbiw	r28, 0x2b	; 43
    2284:	0f b6       	in	r0, 0x3f	; 63
    2286:	f8 94       	cli
    2288:	de bf       	out	0x3e, r29	; 62
    228a:	0f be       	out	0x3f, r0	; 63
    228c:	cd bf       	out	0x3d, r28	; 61
	//variables declarations
	UART_config uart_config = {FALSE, FALSE, FALSE, TRUE, FALSE, Even, Async, onebit, FALLING, eight, 9600}; //uart configuration structure
    228e:	ce 01       	movw	r24, r28
    2290:	03 96       	adiw	r24, 0x03	; 3
    2292:	9b a3       	std	Y+35, r25	; 0x23
    2294:	8a a3       	std	Y+34, r24	; 0x22
    2296:	ed e6       	ldi	r30, 0x6D	; 109
    2298:	f1 e0       	ldi	r31, 0x01	; 1
    229a:	fd a3       	std	Y+37, r31	; 0x25
    229c:	ec a3       	std	Y+36, r30	; 0x24
    229e:	fc e0       	ldi	r31, 0x0C	; 12
    22a0:	fe a3       	std	Y+38, r31	; 0x26
    22a2:	ec a1       	ldd	r30, Y+36	; 0x24
    22a4:	fd a1       	ldd	r31, Y+37	; 0x25
    22a6:	00 80       	ld	r0, Z
    22a8:	8c a1       	ldd	r24, Y+36	; 0x24
    22aa:	9d a1       	ldd	r25, Y+37	; 0x25
    22ac:	01 96       	adiw	r24, 0x01	; 1
    22ae:	9d a3       	std	Y+37, r25	; 0x25
    22b0:	8c a3       	std	Y+36, r24	; 0x24
    22b2:	ea a1       	ldd	r30, Y+34	; 0x22
    22b4:	fb a1       	ldd	r31, Y+35	; 0x23
    22b6:	00 82       	st	Z, r0
    22b8:	8a a1       	ldd	r24, Y+34	; 0x22
    22ba:	9b a1       	ldd	r25, Y+35	; 0x23
    22bc:	01 96       	adiw	r24, 0x01	; 1
    22be:	9b a3       	std	Y+35, r25	; 0x23
    22c0:	8a a3       	std	Y+34, r24	; 0x22
    22c2:	9e a1       	ldd	r25, Y+38	; 0x26
    22c4:	91 50       	subi	r25, 0x01	; 1
    22c6:	9e a3       	std	Y+38, r25	; 0x26
    22c8:	ee a1       	ldd	r30, Y+38	; 0x26
    22ca:	ee 23       	and	r30, r30
    22cc:	51 f7       	brne	.-44     	; 0x22a2 <main+0x28>
	timer0_config timer0 = {CLK_1024, norm, 0, 0};
    22ce:	85 e0       	ldi	r24, 0x05	; 5
    22d0:	8f 87       	std	Y+15, r24	; 0x0f
    22d2:	18 8a       	std	Y+16, r1	; 0x10
    22d4:	19 8a       	std	Y+17, r1	; 0x11
    22d6:	1a 8a       	std	Y+18, r1	; 0x12
	I2C_config i2c = {0x02, FALSE, FALSE, NoPrescalar, 0x01};
    22d8:	ce 01       	movw	r24, r28
    22da:	43 96       	adiw	r24, 0x13	; 19
    22dc:	98 a7       	std	Y+40, r25	; 0x28
    22de:	8f a3       	std	Y+39, r24	; 0x27
    22e0:	e8 e6       	ldi	r30, 0x68	; 104
    22e2:	f1 e0       	ldi	r31, 0x01	; 1
    22e4:	fa a7       	std	Y+42, r31	; 0x2a
    22e6:	e9 a7       	std	Y+41, r30	; 0x29
    22e8:	f5 e0       	ldi	r31, 0x05	; 5
    22ea:	fb a7       	std	Y+43, r31	; 0x2b
    22ec:	e9 a5       	ldd	r30, Y+41	; 0x29
    22ee:	fa a5       	ldd	r31, Y+42	; 0x2a
    22f0:	00 80       	ld	r0, Z
    22f2:	89 a5       	ldd	r24, Y+41	; 0x29
    22f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    22f6:	01 96       	adiw	r24, 0x01	; 1
    22f8:	9a a7       	std	Y+42, r25	; 0x2a
    22fa:	89 a7       	std	Y+41, r24	; 0x29
    22fc:	ef a1       	ldd	r30, Y+39	; 0x27
    22fe:	f8 a5       	ldd	r31, Y+40	; 0x28
    2300:	00 82       	st	Z, r0
    2302:	8f a1       	ldd	r24, Y+39	; 0x27
    2304:	98 a5       	ldd	r25, Y+40	; 0x28
    2306:	01 96       	adiw	r24, 0x01	; 1
    2308:	98 a7       	std	Y+40, r25	; 0x28
    230a:	8f a3       	std	Y+39, r24	; 0x27
    230c:	9b a5       	ldd	r25, Y+43	; 0x2b
    230e:	91 50       	subi	r25, 0x01	; 1
    2310:	9b a7       	std	Y+43, r25	; 0x2b
    2312:	eb a5       	ldd	r30, Y+43	; 0x2b
    2314:	ee 23       	and	r30, r30
    2316:	51 f7       	brne	.-44     	; 0x22ec <main+0x72>
	uint8 passcode[PASSWORD_LENGTH];
	uint8 passcodeConfirm[PASSWORD_LENGTH];
	uint8 errorCounter = 0;
    2318:	1a 82       	std	Y+2, r1	; 0x02
	uint8 uC_Message;

	// ----------------------  preferals initializations   ----------------------//
	// initialize the uart
	UART_init(&uart_config);
    231a:	ce 01       	movw	r24, r28
    231c:	03 96       	adiw	r24, 0x03	; 3
    231e:	0e 94 9f 14 	call	0x293e	; 0x293e <UART_init>
	//I2C INITIALIZATION
	TWI_init(&i2c);
    2322:	ce 01       	movw	r24, r28
    2324:	43 96       	adiw	r24, 0x13	; 19
    2326:	0e 94 90 09 	call	0x1320	; 0x1320 <TWI_init>
	EEPROM_init(&i2c);
    232a:	ce 01       	movw	r24, r28
    232c:	43 96       	adiw	r24, 0x13	; 19
    232e:	0e 94 df 08 	call	0x11be	; 0x11be <EEPROM_init>
	//MOTOR INITIALIZATION
	motor_init();
    2332:	0e 94 e6 12 	call	0x25cc	; 0x25cc <motor_init>
	//TIMER0 INITIALIZATION
	TIMER0_init(&timer0);
    2336:	ce 01       	movw	r24, r28
    2338:	0f 96       	adiw	r24, 0x0f	; 15
    233a:	0e 94 06 14 	call	0x280c	; 0x280c <TIMER0_init>

	//// STATE0         WILL ONLY BE RUN ON BOOT SO NO NEED TO BE AN ACTUAL LABEL (STATE)
	getPasscode(passcode); //GETTING SAVED PASSCODE FROM EEPROM
    233e:	ce 01       	movw	r24, r28
    2340:	48 96       	adiw	r24, 0x18	; 24
    2342:	0e 94 7d 10 	call	0x20fa	; 0x20fa <getPasscode>
	sendPassword(passcode);//SEND PASSWORD TO THE MC1 TO KNOW IF ITS THE FIRST TIME THE DOOR LOCK IS USED TO GET AN INITIAL PASSWORD
    2346:	ce 01       	movw	r24, r28
    2348:	48 96       	adiw	r24, 0x18	; 24
    234a:	0e 94 31 10 	call	0x2062	; 0x2062 <sendPassword>
	uC_Message = UART_recieveByte(); //GET MC1 MESSAGE
    234e:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <UART_recieveByte>
    2352:	89 83       	std	Y+1, r24	; 0x01
	if(uC_Message == PW_FOUND) {  //A PASSWORD HAD BEEN SET BEFORE IN THE EEPROM
    2354:	89 81       	ldd	r24, Y+1	; 0x01
    2356:	84 31       	cpi	r24, 0x14	; 20
    2358:	09 f4       	brne	.+2      	; 0x235c <main+0xe2>
    235a:	40 c0       	rjmp	.+128    	; 0x23dc <main+0x162>
	}

		// ----------------- microcontroller 2 loop code  ---------------------//
	while(1){
state1:
		recievePassword(passcode); //waiting for the first entry
    235c:	ce 01       	movw	r24, r28
    235e:	48 96       	adiw	r24, 0x18	; 24
    2360:	0e 94 06 10 	call	0x200c	; 0x200c <recievePassword>
		recievePassword(passcodeConfirm); //waiting for the second entry
    2364:	ce 01       	movw	r24, r28
    2366:	4d 96       	adiw	r24, 0x1d	; 29
    2368:	0e 94 06 10 	call	0x200c	; 0x200c <recievePassword>

		if(samePassword(passcode, passcodeConfirm)) {
    236c:	ce 01       	movw	r24, r28
    236e:	48 96       	adiw	r24, 0x18	; 24
    2370:	9e 01       	movw	r18, r28
    2372:	23 5e       	subi	r18, 0xE3	; 227
    2374:	3f 4f       	sbci	r19, 0xFF	; 255
    2376:	b9 01       	movw	r22, r18
    2378:	0e 94 d5 10 	call	0x21aa	; 0x21aa <samePassword>
    237c:	88 23       	and	r24, r24
    237e:	49 f0       	breq	.+18     	; 0x2392 <main+0x118>
			UART_sendByte(CONFIRM);             // handshake to confirm they are the same and proceed to main menu
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
			savePasscode(passcode);				// save password to EEPROM
    2386:	ce 01       	movw	r24, r28
    2388:	48 96       	adiw	r24, 0x18	; 24
    238a:	0e 94 a8 10 	call	0x2150	; 0x2150 <savePasscode>
			errorCounter = 0;                   // reset error counter because we want it only on 3 consecutive mistakes
    238e:	1a 82       	std	Y+2, r1	; 0x02
    2390:	25 c0       	rjmp	.+74     	; 0x23dc <main+0x162>
			goto main_menu;                  // main menu status
		}
		else {
			errorCounter++;
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	8f 5f       	subi	r24, 0xFF	; 255
    2396:	8a 83       	std	Y+2, r24	; 0x02
			if(errorCounter == 3) { // Buzzer will start there is an intrusion
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	83 30       	cpi	r24, 0x03	; 3
    239c:	d9 f4       	brne	.+54     	; 0x23d4 <main+0x15a>
				errorCounter = 0;   //RESET ERROR COUNTER
    239e:	1a 82       	std	Y+2, r1	; 0x02
				UART_sendByte(REPEATED_MISTAKE); //TELL MC1 THERE IS A DEFEATED MISTAKE SO WE CAN FREEZE MC1 FOR 1 MINUTE
    23a0:	82 e0       	ldi	r24, 0x02	; 2
    23a2:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
				sei();       //ENABLING GLOBAL INTERRUPTS
    23a6:	78 94       	sei
				setCallbackNormal(buzzerTickIncrement);   //SETTING TIMER NORMAL MODE ISR TO INCREMENT BUZZER TIME
    23a8:	8e e6       	ldi	r24, 0x6E	; 110
    23aa:	90 e1       	ldi	r25, 0x10	; 16
    23ac:	0e 94 57 14 	call	0x28ae	; 0x28ae <setCallbackNormal>
				seconds = 0; ticks = 0;    //RESET TICKS AND SECONDS
    23b0:	10 92 7b 01 	sts	0x017B, r1
    23b4:	10 92 7a 01 	sts	0x017A, r1
				timerStart(&timer0);         //START THE TIMER (GIVE ITS PRESCALAR TO THE CLOCK
    23b8:	ce 01       	movw	r24, r28
    23ba:	0f 96       	adiw	r24, 0x0f	; 15
    23bc:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <timerStart>
				buzzer_tone(1);              //START THE BUZZER WITH 1KZ CLOCK SOUND
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <buzzer_tone>
				timerStop();				//Since buzzer tone is an infinite loop we will get here when its invoked by buzzerOff so we need to stop the timer
    23c6:	0e 94 91 14 	call	0x2922	; 0x2922 <timerStop>
				cli();                     //Disable global interrupts
    23ca:	f8 94       	cli
				UART_sendByte(DONE);       //Handshake to let MC1 get out of freeze state
    23cc:	87 e0       	ldi	r24, 0x07	; 7
    23ce:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
    23d2:	04 c0       	rjmp	.+8      	; 0x23dc <main+0x162>
			}
			else {                         // NOT A REPEATED MISTAKE WE JUST NEED TO REI
				UART_sendByte(ERROR);      //Handshake to let MC1 require another password
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
    23da:	c0 cf       	rjmp	.-128    	; 0x235c <main+0xe2>
				goto state1;               //head to the earlier state to take a new password
			}
		}

main_menu:
		uC_Message = UART_recieveByte();      //GET THE USER INPUT (+ OR -) USING POLLING
    23dc:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <UART_recieveByte>
    23e0:	89 83       	std	Y+1, r24	; 0x01

		// IF USER CHOOSE TO OPEN THE DOOR
		if(uC_Message == OPEN_DOOR) {
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	84 30       	cpi	r24, 0x04	; 4
    23e6:	09 f0       	breq	.+2      	; 0x23ea <main+0x170>
    23e8:	71 c0       	rjmp	.+226    	; 0x24cc <main+0x252>
			////////////////////CONFIRM PASSWORD////////////////////
OPENDOOR_CONFIRMATION:
			if(confirmPasscode(passcode)) {     //WE USE confirmPasscode FUNCTION THAT IS SYNCHRONIZED WITH MC1
    23ea:	ce 01       	movw	r24, r28
    23ec:	48 96       	adiw	r24, 0x18	; 24
    23ee:	0e 94 11 11 	call	0x2222	; 0x2222 <confirmPasscode>
    23f2:	88 23       	and	r24, r24
    23f4:	09 f4       	brne	.+2      	; 0x23f8 <main+0x17e>
    23f6:	45 c0       	rjmp	.+138    	; 0x2482 <main+0x208>
				errorCounter = 0;				//RESET THE COUNTER SINCE IT'S ALREADY CORRECT
    23f8:	1a 82       	std	Y+2, r1	; 0x02
				UART_sendByte(CONFIRM);			//HANDSHAKE TO CONFIRM THAT PASSWORD IS CONFIRMED AND MATCHES THE EEPROM SAVED PW
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>

				// now we can open the door
				/// motor unlocking for 15 seconds
				ticks = 0;                      //RESET TICKS
    2400:	10 92 7a 01 	sts	0x017A, r1
				seconds = 0;                    //RESET SECONDS
    2404:	10 92 7b 01 	sts	0x017B, r1
				UART_sendByte(DOOR_UNLOCKING);  //SYNCHRONIZE DOOR UNLOCKING WITH MC1
    2408:	88 e0       	ldi	r24, 0x08	; 8
    240a:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
				sei();                          //ENABLE GLOBAL INTERRUPTS
    240e:	78 94       	sei
				timerStart(&timer0);			//START TIMER0
    2410:	ce 01       	movw	r24, r28
    2412:	0f 96       	adiw	r24, 0x0f	; 15
    2414:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <timerStart>
				setCallbackNormal(tickIncrement);//SET CALLBACK TO INCREMENT TICKS
    2418:	87 e5       	ldi	r24, 0x57	; 87
    241a:	90 e1       	ldi	r25, 0x10	; 16
    241c:	0e 94 57 14 	call	0x28ae	; 0x28ae <setCallbackNormal>
				motor_control(clockwise);		//OPEN THE DOOR
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	0e 94 9a 12 	call	0x2534	; 0x2534 <motor_control>
				while(seconds < DOOR_MOVING) {}          				//WAIT FOR 15 SECONDS
    2426:	80 91 7b 01 	lds	r24, 0x017B
    242a:	8f 30       	cpi	r24, 0x0F	; 15
    242c:	e0 f3       	brcs	.-8      	; 0x2426 <main+0x1ac>

				/// motor stops for 3 seconds
				UART_sendByte(DOOR_STOP);		//SYNCHRONIZE DOOR STOP WITH MC1
    242e:	8a e0       	ldi	r24, 0x0A	; 10
    2430:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
				timerStart(&timer0);			//START TIMER0
    2434:	ce 01       	movw	r24, r28
    2436:	0f 96       	adiw	r24, 0x0f	; 15
    2438:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <timerStart>
				motor_control(stop);			//STOP THE DOOR
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	0e 94 9a 12 	call	0x2534	; 0x2534 <motor_control>
				while(seconds < (DOOR_MOVING+DOOR_STOP)) {}        		//WAIT ANOTHER 3 SECONDS
    2442:	80 91 7b 01 	lds	r24, 0x017B
    2446:	89 31       	cpi	r24, 0x19	; 25
    2448:	e0 f3       	brcs	.-8      	; 0x2442 <main+0x1c8>

				/// motor locking for 15 seconds
				UART_sendByte(DOOR_LOCKING);  	//SYNCHRONIZE DOOR LOCKING WITH MC1
    244a:	89 e0       	ldi	r24, 0x09	; 9
    244c:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
				timerStart(&timer0);			//START TIMER0
    2450:	ce 01       	movw	r24, r28
    2452:	0f 96       	adiw	r24, 0x0f	; 15
    2454:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <timerStart>
				motor_control(anticlockwise);	//CLOSE THE DOOR
    2458:	82 e0       	ldi	r24, 0x02	; 2
    245a:	0e 94 9a 12 	call	0x2534	; 0x2534 <motor_control>
				while(seconds < (DOOR_MOVING+DOOR_STOP+DOOR_MOVING)) {}	//WAIT ANOTHER 15 SECONDS
    245e:	80 91 7b 01 	lds	r24, 0x017B
    2462:	88 32       	cpi	r24, 0x28	; 40
    2464:	e0 f3       	brcs	.-8      	; 0x245e <main+0x1e4>
				timerStop();
    2466:	0e 94 91 14 	call	0x2922	; 0x2922 <timerStop>


				//disable interrupts and reset ticks and stopping the motor
				UART_sendByte(DONE);			//HANDSHAKE THAT WE ARE DONE
    246a:	87 e0       	ldi	r24, 0x07	; 7
    246c:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
				motor_control(stop);			//STOP THE DOOR
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	0e 94 9a 12 	call	0x2534	; 0x2534 <motor_control>
				cli();							//DISABLE GLOBAL INTERRUPTS
    2476:	f8 94       	cli
				ticks = 0;
    2478:	10 92 7a 01 	sts	0x017A, r1
				seconds = 0;
    247c:	10 92 7b 01 	sts	0x017B, r1
    2480:	ad cf       	rjmp	.-166    	; 0x23dc <main+0x162>
				goto main_menu;				//GO TO MAIN MENU
			}
			else {								//REPEATED MISTAKE SAME AS PREVIOUS ALGORITHM
				errorCounter++;
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	8f 5f       	subi	r24, 0xFF	; 255
    2486:	8a 83       	std	Y+2, r24	; 0x02
				if(errorCounter == 3) {
    2488:	8a 81       	ldd	r24, Y+2	; 0x02
    248a:	83 30       	cpi	r24, 0x03	; 3
    248c:	d9 f4       	brne	.+54     	; 0x24c4 <main+0x24a>
					errorCounter = 0;
    248e:	1a 82       	std	Y+2, r1	; 0x02
					UART_sendByte(REPEATED_MISTAKE);
    2490:	82 e0       	ldi	r24, 0x02	; 2
    2492:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
					sei();
    2496:	78 94       	sei
					setCallbackNormal(buzzerTickIncrement);
    2498:	8e e6       	ldi	r24, 0x6E	; 110
    249a:	90 e1       	ldi	r25, 0x10	; 16
    249c:	0e 94 57 14 	call	0x28ae	; 0x28ae <setCallbackNormal>
					seconds = 0; ticks = 0;
    24a0:	10 92 7b 01 	sts	0x017B, r1
    24a4:	10 92 7a 01 	sts	0x017A, r1
					timerStart(&timer0);
    24a8:	ce 01       	movw	r24, r28
    24aa:	0f 96       	adiw	r24, 0x0f	; 15
    24ac:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <timerStart>
					buzzer_tone(1);
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <buzzer_tone>
					timerStop();
    24b6:	0e 94 91 14 	call	0x2922	; 0x2922 <timerStop>
					cli();
    24ba:	f8 94       	cli
					UART_sendByte(DONE);
    24bc:	87 e0       	ldi	r24, 0x07	; 7
    24be:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
    24c2:	8c cf       	rjmp	.-232    	; 0x23dc <main+0x162>
					goto main_menu;           //BACK TO MAIN MENU
				}
				UART_sendByte(ERROR);			//NORMAL MISTAKE
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
    24ca:	8f cf       	rjmp	.-226    	; 0x23ea <main+0x170>
			}
		}


		// IF USER CHOOSE TO CHANGE THE PASSCODE
		else if(uC_Message == NEW_PASSCODE) {          //MESSAGE IS THE DEFINED NEW PASSCODE CODE SAME ALGORITHM LIKE PREVIOUS
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	85 30       	cpi	r24, 0x05	; 5
    24d0:	09 f0       	breq	.+2      	; 0x24d4 <main+0x25a>
    24d2:	44 cf       	rjmp	.-376    	; 0x235c <main+0xe2>
NEWPASSCODE_CONFIRMATION:
			if(confirmPasscode(passcode)) {
    24d4:	ce 01       	movw	r24, r28
    24d6:	48 96       	adiw	r24, 0x18	; 24
    24d8:	0e 94 11 11 	call	0x2222	; 0x2222 <confirmPasscode>
    24dc:	88 23       	and	r24, r24
    24de:	29 f0       	breq	.+10     	; 0x24ea <main+0x270>
				errorCounter = 0;
    24e0:	1a 82       	std	Y+2, r1	; 0x02
				UART_sendByte(CONFIRM);
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
    24e8:	39 cf       	rjmp	.-398    	; 0x235c <main+0xe2>
				goto state1;
			}
			else {
				errorCounter++;
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	8f 5f       	subi	r24, 0xFF	; 255
    24ee:	8a 83       	std	Y+2, r24	; 0x02
				if(errorCounter == 3) {
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	83 30       	cpi	r24, 0x03	; 3
    24f4:	d9 f4       	brne	.+54     	; 0x252c <main+0x2b2>
					errorCounter = 0;
    24f6:	1a 82       	std	Y+2, r1	; 0x02
					UART_sendByte(REPEATED_MISTAKE);
    24f8:	82 e0       	ldi	r24, 0x02	; 2
    24fa:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
					sei();
    24fe:	78 94       	sei
					setCallbackNormal(buzzerTickIncrement);
    2500:	8e e6       	ldi	r24, 0x6E	; 110
    2502:	90 e1       	ldi	r25, 0x10	; 16
    2504:	0e 94 57 14 	call	0x28ae	; 0x28ae <setCallbackNormal>
					seconds = 0; ticks = 0;
    2508:	10 92 7b 01 	sts	0x017B, r1
    250c:	10 92 7a 01 	sts	0x017A, r1
					timerStart(&timer0);
    2510:	ce 01       	movw	r24, r28
    2512:	0f 96       	adiw	r24, 0x0f	; 15
    2514:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <timerStart>
					buzzer_tone(1);
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <buzzer_tone>
					timerStop();
    251e:	0e 94 91 14 	call	0x2922	; 0x2922 <timerStop>
					cli();
    2522:	f8 94       	cli
					UART_sendByte(DONE);
    2524:	87 e0       	ldi	r24, 0x07	; 7
    2526:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
    252a:	58 cf       	rjmp	.-336    	; 0x23dc <main+0x162>
					goto main_menu;
				}
				UART_sendByte(ERROR);
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
    2532:	d0 cf       	rjmp	.-96     	; 0x24d4 <main+0x25a>

00002534 <motor_control>:

/*******************************************************************************
 *                      Function Definitions                                    *
 *******************************************************************************/

void motor_control(direction motor) { /*Start/Stop the motor in a certain direction*/
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	00 d0       	rcall	.+0      	; 0x253a <motor_control+0x6>
    253a:	0f 92       	push	r0
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	89 83       	std	Y+1, r24	; 0x01
	switch (motor) {
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	28 2f       	mov	r18, r24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	3b 83       	std	Y+3, r19	; 0x03
    254a:	2a 83       	std	Y+2, r18	; 0x02
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	9b 81       	ldd	r25, Y+3	; 0x03
    2550:	81 30       	cpi	r24, 0x01	; 1
    2552:	91 05       	cpc	r25, r1
    2554:	c1 f0       	breq	.+48     	; 0x2586 <motor_control+0x52>
    2556:	2a 81       	ldd	r18, Y+2	; 0x02
    2558:	3b 81       	ldd	r19, Y+3	; 0x03
    255a:	22 30       	cpi	r18, 0x02	; 2
    255c:	31 05       	cpc	r19, r1
    255e:	11 f1       	breq	.+68     	; 0x25a4 <motor_control+0x70>
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	9b 81       	ldd	r25, Y+3	; 0x03
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	61 f5       	brne	.+88     	; 0x25c0 <motor_control+0x8c>
	    case stop:
	    	CLEAR_BIT(PORTC, MOTOR_IN1);
    2568:	a5 e3       	ldi	r26, 0x35	; 53
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e5 e3       	ldi	r30, 0x35	; 53
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	8f 7d       	andi	r24, 0xDF	; 223
    2574:	8c 93       	st	X, r24
	    	CLEAR_BIT(PORTC, MOTOR_IN2);
    2576:	a5 e3       	ldi	r26, 0x35	; 53
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e5 e3       	ldi	r30, 0x35	; 53
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	8f 7b       	andi	r24, 0xBF	; 191
    2582:	8c 93       	st	X, r24
    2584:	1d c0       	rjmp	.+58     	; 0x25c0 <motor_control+0x8c>
	    	break;
	    case clockwise:
	    	SET_BIT(PORTC, MOTOR_IN1);
    2586:	a5 e3       	ldi	r26, 0x35	; 53
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	e5 e3       	ldi	r30, 0x35	; 53
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	80 62       	ori	r24, 0x20	; 32
    2592:	8c 93       	st	X, r24
	    	CLEAR_BIT(PORTC, MOTOR_IN2);
    2594:	a5 e3       	ldi	r26, 0x35	; 53
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	e5 e3       	ldi	r30, 0x35	; 53
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	8f 7b       	andi	r24, 0xBF	; 191
    25a0:	8c 93       	st	X, r24
    25a2:	0e c0       	rjmp	.+28     	; 0x25c0 <motor_control+0x8c>
	    	break;
	    case anticlockwise:
	    	CLEAR_BIT(PORTC, MOTOR_IN1);
    25a4:	a5 e3       	ldi	r26, 0x35	; 53
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	e5 e3       	ldi	r30, 0x35	; 53
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	8f 7d       	andi	r24, 0xDF	; 223
    25b0:	8c 93       	st	X, r24
	    	SET_BIT(PORTC, MOTOR_IN2);
    25b2:	a5 e3       	ldi	r26, 0x35	; 53
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e5 e3       	ldi	r30, 0x35	; 53
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	80 64       	ori	r24, 0x40	; 64
    25be:	8c 93       	st	X, r24
	    	break;
	}
}
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <motor_init>:

void motor_init(void) { /* Just initializes the motor but doesnt give it a direction*/
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
	DDRC |= (1<<MOTOR_ENABLE_PORT) | (1<<MOTOR_IN1) | (1<<MOTOR_IN2);
    25d4:	a4 e3       	ldi	r26, 0x34	; 52
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	e4 e3       	ldi	r30, 0x34	; 52
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	80 6e       	ori	r24, 0xE0	; 224
    25e0:	8c 93       	st	X, r24
	PORTC |= (1<<MOTOR_ENABLE_PORT);
    25e2:	a5 e3       	ldi	r26, 0x35	; 53
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e5 e3       	ldi	r30, 0x35	; 53
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	80 68       	ori	r24, 0x80	; 128
    25ee:	8c 93       	st	X, r24
	CLEAR_BIT(PORTC, MOTOR_IN1);
    25f0:	a5 e3       	ldi	r26, 0x35	; 53
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	e5 e3       	ldi	r30, 0x35	; 53
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	8f 7d       	andi	r24, 0xDF	; 223
    25fc:	8c 93       	st	X, r24
	CLEAR_BIT(PORTC, MOTOR_IN2);
    25fe:	a5 e3       	ldi	r26, 0x35	; 53
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	e5 e3       	ldi	r30, 0x35	; 53
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	8f 7b       	andi	r24, 0xBF	; 191
    260a:	8c 93       	st	X, r24
}
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <delay_10xN>:
#include "mydelay.h"


void delay_10xN (uint8 N) { //function to overcome the 32ms maximum delay possible by _delay_ms_ function on 8mhz clock
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	61 97       	sbiw	r28, 0x11	; 17
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	89 8b       	std	Y+17, r24	; 0x11
	for(int i = 0; i < N; i++) {
    2628:	18 8a       	std	Y+16, r1	; 0x10
    262a:	1f 86       	std	Y+15, r1	; 0x0f
    262c:	77 c0       	rjmp	.+238    	; 0x271c <delay_10xN+0x10a>
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	a0 e2       	ldi	r26, 0x20	; 32
    2634:	b1 e4       	ldi	r27, 0x41	; 65
    2636:	8b 87       	std	Y+11, r24	; 0x0b
    2638:	9c 87       	std	Y+12, r25	; 0x0c
    263a:	ad 87       	std	Y+13, r26	; 0x0d
    263c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2640:	7c 85       	ldd	r23, Y+12	; 0x0c
    2642:	8d 85       	ldd	r24, Y+13	; 0x0d
    2644:	9e 85       	ldd	r25, Y+14	; 0x0e
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	4a ef       	ldi	r20, 0xFA	; 250
    264c:	54 e4       	ldi	r21, 0x44	; 68
    264e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	8f 83       	std	Y+7, r24	; 0x07
    2658:	98 87       	std	Y+8, r25	; 0x08
    265a:	a9 87       	std	Y+9, r26	; 0x09
    265c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    265e:	6f 81       	ldd	r22, Y+7	; 0x07
    2660:	78 85       	ldd	r23, Y+8	; 0x08
    2662:	89 85       	ldd	r24, Y+9	; 0x09
    2664:	9a 85       	ldd	r25, Y+10	; 0x0a
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e8       	ldi	r20, 0x80	; 128
    266c:	5f e3       	ldi	r21, 0x3F	; 63
    266e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2672:	88 23       	and	r24, r24
    2674:	2c f4       	brge	.+10     	; 0x2680 <delay_10xN+0x6e>
		__ticks = 1;
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	9e 83       	std	Y+6, r25	; 0x06
    267c:	8d 83       	std	Y+5, r24	; 0x05
    267e:	3f c0       	rjmp	.+126    	; 0x26fe <delay_10xN+0xec>
	else if (__tmp > 65535)
    2680:	6f 81       	ldd	r22, Y+7	; 0x07
    2682:	78 85       	ldd	r23, Y+8	; 0x08
    2684:	89 85       	ldd	r24, Y+9	; 0x09
    2686:	9a 85       	ldd	r25, Y+10	; 0x0a
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	3f ef       	ldi	r19, 0xFF	; 255
    268c:	4f e7       	ldi	r20, 0x7F	; 127
    268e:	57 e4       	ldi	r21, 0x47	; 71
    2690:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2694:	18 16       	cp	r1, r24
    2696:	4c f5       	brge	.+82     	; 0x26ea <delay_10xN+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2698:	6b 85       	ldd	r22, Y+11	; 0x0b
    269a:	7c 85       	ldd	r23, Y+12	; 0x0c
    269c:	8d 85       	ldd	r24, Y+13	; 0x0d
    269e:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	40 e2       	ldi	r20, 0x20	; 32
    26a6:	51 e4       	ldi	r21, 0x41	; 65
    26a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	bc 01       	movw	r22, r24
    26b2:	cd 01       	movw	r24, r26
    26b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	9e 83       	std	Y+6, r25	; 0x06
    26be:	8d 83       	std	Y+5, r24	; 0x05
    26c0:	0f c0       	rjmp	.+30     	; 0x26e0 <delay_10xN+0xce>
    26c2:	88 ec       	ldi	r24, 0xC8	; 200
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	9c 83       	std	Y+4, r25	; 0x04
    26c8:	8b 83       	std	Y+3, r24	; 0x03
    26ca:	8b 81       	ldd	r24, Y+3	; 0x03
    26cc:	9c 81       	ldd	r25, Y+4	; 0x04
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f1 f7       	brne	.-4      	; 0x26ce <delay_10xN+0xbc>
    26d2:	9c 83       	std	Y+4, r25	; 0x04
    26d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d6:	8d 81       	ldd	r24, Y+5	; 0x05
    26d8:	9e 81       	ldd	r25, Y+6	; 0x06
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	9e 83       	std	Y+6, r25	; 0x06
    26de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e0:	8d 81       	ldd	r24, Y+5	; 0x05
    26e2:	9e 81       	ldd	r25, Y+6	; 0x06
    26e4:	00 97       	sbiw	r24, 0x00	; 0
    26e6:	69 f7       	brne	.-38     	; 0x26c2 <delay_10xN+0xb0>
    26e8:	14 c0       	rjmp	.+40     	; 0x2712 <delay_10xN+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ea:	6f 81       	ldd	r22, Y+7	; 0x07
    26ec:	78 85       	ldd	r23, Y+8	; 0x08
    26ee:	89 85       	ldd	r24, Y+9	; 0x09
    26f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	9e 83       	std	Y+6, r25	; 0x06
    26fc:	8d 83       	std	Y+5, r24	; 0x05
    26fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2700:	9e 81       	ldd	r25, Y+6	; 0x06
    2702:	9a 83       	std	Y+2, r25	; 0x02
    2704:	89 83       	std	Y+1, r24	; 0x01
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <delay_10xN+0xf8>
    270e:	9a 83       	std	Y+2, r25	; 0x02
    2710:	89 83       	std	Y+1, r24	; 0x01
    2712:	8f 85       	ldd	r24, Y+15	; 0x0f
    2714:	98 89       	ldd	r25, Y+16	; 0x10
    2716:	01 96       	adiw	r24, 0x01	; 1
    2718:	98 8b       	std	Y+16, r25	; 0x10
    271a:	8f 87       	std	Y+15, r24	; 0x0f
    271c:	89 89       	ldd	r24, Y+17	; 0x11
    271e:	28 2f       	mov	r18, r24
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	8f 85       	ldd	r24, Y+15	; 0x0f
    2724:	98 89       	ldd	r25, Y+16	; 0x10
    2726:	82 17       	cp	r24, r18
    2728:	93 07       	cpc	r25, r19
    272a:	0c f4       	brge	.+2      	; 0x272e <delay_10xN+0x11c>
    272c:	80 cf       	rjmp	.-256    	; 0x262e <delay_10xN+0x1c>
		_delay_ms(10);
	}
}
    272e:	61 96       	adiw	r28, 0x11	; 17
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	08 95       	ret

00002740 <__vector_9>:
static volatile void (*ISR_ptr_compare)(void) = NULL_PTR;
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR (TIMER0_OVF_vect) {
    2740:	1f 92       	push	r1
    2742:	0f 92       	push	r0
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	0f 92       	push	r0
    2748:	11 24       	eor	r1, r1
    274a:	2f 93       	push	r18
    274c:	3f 93       	push	r19
    274e:	4f 93       	push	r20
    2750:	5f 93       	push	r21
    2752:	6f 93       	push	r22
    2754:	7f 93       	push	r23
    2756:	8f 93       	push	r24
    2758:	9f 93       	push	r25
    275a:	af 93       	push	r26
    275c:	bf 93       	push	r27
    275e:	ef 93       	push	r30
    2760:	ff 93       	push	r31
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
	if(ISR_ptr_normal != NULL_PTR) {
    276a:	80 91 7c 01 	lds	r24, 0x017C
    276e:	90 91 7d 01 	lds	r25, 0x017D
    2772:	00 97       	sbiw	r24, 0x00	; 0
    2774:	29 f0       	breq	.+10     	; 0x2780 <__vector_9+0x40>
		ISR_ptr_normal();
    2776:	e0 91 7c 01 	lds	r30, 0x017C
    277a:	f0 91 7d 01 	lds	r31, 0x017D
    277e:	09 95       	icall
	}
}
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	ff 91       	pop	r31
    2786:	ef 91       	pop	r30
    2788:	bf 91       	pop	r27
    278a:	af 91       	pop	r26
    278c:	9f 91       	pop	r25
    278e:	8f 91       	pop	r24
    2790:	7f 91       	pop	r23
    2792:	6f 91       	pop	r22
    2794:	5f 91       	pop	r21
    2796:	4f 91       	pop	r20
    2798:	3f 91       	pop	r19
    279a:	2f 91       	pop	r18
    279c:	0f 90       	pop	r0
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	0f 90       	pop	r0
    27a2:	1f 90       	pop	r1
    27a4:	18 95       	reti

000027a6 <__vector_19>:
ISR (TIMER0_COMP_vect) {
    27a6:	1f 92       	push	r1
    27a8:	0f 92       	push	r0
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	0f 92       	push	r0
    27ae:	11 24       	eor	r1, r1
    27b0:	2f 93       	push	r18
    27b2:	3f 93       	push	r19
    27b4:	4f 93       	push	r20
    27b6:	5f 93       	push	r21
    27b8:	6f 93       	push	r22
    27ba:	7f 93       	push	r23
    27bc:	8f 93       	push	r24
    27be:	9f 93       	push	r25
    27c0:	af 93       	push	r26
    27c2:	bf 93       	push	r27
    27c4:	ef 93       	push	r30
    27c6:	ff 93       	push	r31
    27c8:	df 93       	push	r29
    27ca:	cf 93       	push	r28
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
	if(ISR_ptr_compare != NULL_PTR) {
    27d0:	80 91 7e 01 	lds	r24, 0x017E
    27d4:	90 91 7f 01 	lds	r25, 0x017F
    27d8:	00 97       	sbiw	r24, 0x00	; 0
    27da:	29 f0       	breq	.+10     	; 0x27e6 <__vector_19+0x40>
		ISR_ptr_compare();
    27dc:	e0 91 7e 01 	lds	r30, 0x017E
    27e0:	f0 91 7f 01 	lds	r31, 0x017F
    27e4:	09 95       	icall
	}
}
    27e6:	cf 91       	pop	r28
    27e8:	df 91       	pop	r29
    27ea:	ff 91       	pop	r31
    27ec:	ef 91       	pop	r30
    27ee:	bf 91       	pop	r27
    27f0:	af 91       	pop	r26
    27f2:	9f 91       	pop	r25
    27f4:	8f 91       	pop	r24
    27f6:	7f 91       	pop	r23
    27f8:	6f 91       	pop	r22
    27fa:	5f 91       	pop	r21
    27fc:	4f 91       	pop	r20
    27fe:	3f 91       	pop	r19
    2800:	2f 91       	pop	r18
    2802:	0f 90       	pop	r0
    2804:	0f be       	out	0x3f, r0	; 63
    2806:	0f 90       	pop	r0
    2808:	1f 90       	pop	r1
    280a:	18 95       	reti

0000280c <TIMER0_init>:
 *     1. reset timer control register to start clean
 *     2. set non pwm mode
 *     3. set mode to normal or compare
 *     4. set inital and compare values
 */
void TIMER0_init(const timer0_config *config) {
    280c:	df 93       	push	r29
    280e:	cf 93       	push	r28
    2810:	00 d0       	rcall	.+0      	; 0x2812 <TIMER0_init+0x6>
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	9a 83       	std	Y+2, r25	; 0x02
    2818:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 = 0;
    281a:	e3 e5       	ldi	r30, 0x53	; 83
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	10 82       	st	Z, r1
	SET_BIT(TCCR0, FOC0);
    2820:	a3 e5       	ldi	r26, 0x53	; 83
    2822:	b0 e0       	ldi	r27, 0x00	; 0
    2824:	e3 e5       	ldi	r30, 0x53	; 83
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	80 81       	ld	r24, Z
    282a:	80 68       	ori	r24, 0x80	; 128
    282c:	8c 93       	st	X, r24
	if(config->mode) {
    282e:	e9 81       	ldd	r30, Y+1	; 0x01
    2830:	fa 81       	ldd	r31, Y+2	; 0x02
    2832:	81 81       	ldd	r24, Z+1	; 0x01
    2834:	88 23       	and	r24, r24
    2836:	d9 f0       	breq	.+54     	; 0x286e <TIMER0_init+0x62>
		TCCR0 |= (1<<WGM01);
    2838:	a3 e5       	ldi	r26, 0x53	; 83
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	e3 e5       	ldi	r30, 0x53	; 83
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	88 60       	ori	r24, 0x08	; 8
    2844:	8c 93       	st	X, r24
		SET_BIT(TIMSK, OCIE0);
    2846:	a9 e5       	ldi	r26, 0x59	; 89
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	e9 e5       	ldi	r30, 0x59	; 89
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	82 60       	ori	r24, 0x02	; 2
    2852:	8c 93       	st	X, r24
		TCNT0 = config->initial_value;
    2854:	a2 e5       	ldi	r26, 0x52	; 82
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	e9 81       	ldd	r30, Y+1	; 0x01
    285a:	fa 81       	ldd	r31, Y+2	; 0x02
    285c:	82 81       	ldd	r24, Z+2	; 0x02
    285e:	8c 93       	st	X, r24
		OCR0 = config->compare_value;
    2860:	ac e5       	ldi	r26, 0x5C	; 92
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e9 81       	ldd	r30, Y+1	; 0x01
    2866:	fa 81       	ldd	r31, Y+2	; 0x02
    2868:	83 81       	ldd	r24, Z+3	; 0x03
    286a:	8c 93       	st	X, r24
    286c:	0d c0       	rjmp	.+26     	; 0x2888 <TIMER0_init+0x7c>
	}
	else {
		SET_BIT(TIMSK, TOIE0);
    286e:	a9 e5       	ldi	r26, 0x59	; 89
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	e9 e5       	ldi	r30, 0x59	; 89
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	81 60       	ori	r24, 0x01	; 1
    287a:	8c 93       	st	X, r24
		TCNT0 = config->initial_value;
    287c:	a2 e5       	ldi	r26, 0x52	; 82
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e9 81       	ldd	r30, Y+1	; 0x01
    2882:	fa 81       	ldd	r31, Y+2	; 0x02
    2884:	82 81       	ldd	r24, Z+2	; 0x02
    2886:	8c 93       	st	X, r24
	}
}
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	08 95       	ret

00002892 <setInitialValue>:
/*
 * Description : Function to set the initial value of the timer
 *     1. put given value inside the initial count register
 */
void setInitialValue(uint8 value) {
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	0f 92       	push	r0
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
    289c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = value;
    289e:	e2 e5       	ldi	r30, 0x52	; 82
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	80 83       	st	Z, r24
}
    28a6:	0f 90       	pop	r0
    28a8:	cf 91       	pop	r28
    28aa:	df 91       	pop	r29
    28ac:	08 95       	ret

000028ae <setCallbackNormal>:
/*
 * Description : Function to set the call back function of the normal mode
 *     1. set a global function pointer pointing to given function
 */
void setCallbackNormal(const void(*fun)) {
    28ae:	df 93       	push	r29
    28b0:	cf 93       	push	r28
    28b2:	00 d0       	rcall	.+0      	; 0x28b4 <setCallbackNormal+0x6>
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
    28b8:	9a 83       	std	Y+2, r25	; 0x02
    28ba:	89 83       	std	Y+1, r24	; 0x01
	ISR_ptr_normal = fun;
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	9a 81       	ldd	r25, Y+2	; 0x02
    28c0:	90 93 7d 01 	sts	0x017D, r25
    28c4:	80 93 7c 01 	sts	0x017C, r24
}
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	08 95       	ret

000028d2 <setCallbackCompare>:
/*
 * Description : Function to set the call back function of the compare mode
 *     1. set a global function pointer pointing to given function
 */
void setCallbackCompare(const void (*fun)) {
    28d2:	df 93       	push	r29
    28d4:	cf 93       	push	r28
    28d6:	00 d0       	rcall	.+0      	; 0x28d8 <setCallbackCompare+0x6>
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    28dc:	9a 83       	std	Y+2, r25	; 0x02
    28de:	89 83       	std	Y+1, r24	; 0x01
	ISR_ptr_compare = fun;
    28e0:	89 81       	ldd	r24, Y+1	; 0x01
    28e2:	9a 81       	ldd	r25, Y+2	; 0x02
    28e4:	90 93 7f 01 	sts	0x017F, r25
    28e8:	80 93 7e 01 	sts	0x017E, r24
}
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	cf 91       	pop	r28
    28f2:	df 91       	pop	r29
    28f4:	08 95       	ret

000028f6 <timerStart>:
/*
 * Description : Function to start the timer
 *     1. give the timer prescaler clock
 */
void timerStart(const timer0_config *config) {
    28f6:	df 93       	push	r29
    28f8:	cf 93       	push	r28
    28fa:	00 d0       	rcall	.+0      	; 0x28fc <timerStart+0x6>
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
    2900:	9a 83       	std	Y+2, r25	; 0x02
    2902:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 |= config->clock;
    2904:	a3 e5       	ldi	r26, 0x53	; 83
    2906:	b0 e0       	ldi	r27, 0x00	; 0
    2908:	e3 e5       	ldi	r30, 0x53	; 83
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	90 81       	ld	r25, Z
    290e:	e9 81       	ldd	r30, Y+1	; 0x01
    2910:	fa 81       	ldd	r31, Y+2	; 0x02
    2912:	80 81       	ld	r24, Z
    2914:	89 2b       	or	r24, r25
    2916:	8c 93       	st	X, r24
}
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	cf 91       	pop	r28
    291e:	df 91       	pop	r29
    2920:	08 95       	ret

00002922 <timerStop>:
/*
 * Description : Function to start the timer
 *     1. stop the timer (NO CLOCK)
 */
void timerStop(void) {
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= ~(3);
    292a:	a3 e5       	ldi	r26, 0x53	; 83
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	e3 e5       	ldi	r30, 0x53	; 83
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
    2934:	8c 7f       	andi	r24, 0xFC	; 252
    2936:	8c 93       	st	X, r24
}
    2938:	cf 91       	pop	r28
    293a:	df 91       	pop	r29
    293c:	08 95       	ret

0000293e <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void UART_init(const UART_config* config) {
    293e:	0f 93       	push	r16
    2940:	1f 93       	push	r17
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	00 d0       	rcall	.+0      	; 0x2948 <UART_init+0xa>
    2948:	00 d0       	rcall	.+0      	; 0x294a <UART_init+0xc>
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	9a 83       	std	Y+2, r25	; 0x02
    2950:	89 83       	std	Y+1, r24	; 0x01
	//RESET
	UCSRA = 0;
    2952:	eb e2       	ldi	r30, 0x2B	; 43
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	10 82       	st	Z, r1
	UCSRB = 0;
    2958:	ea e2       	ldi	r30, 0x2A	; 42
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	10 82       	st	Z, r1
	UCSRC = 0;
    295e:	e0 e4       	ldi	r30, 0x40	; 64
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	10 82       	st	Z, r1

	//BAUDRATE
	UBRRL= (BAUD_PRESCALE);
    2964:	09 e2       	ldi	r16, 0x29	; 41
    2966:	10 e0       	ldi	r17, 0x00	; 0
    2968:	e9 81       	ldd	r30, Y+1	; 0x01
    296a:	fa 81       	ldd	r31, Y+2	; 0x02
    296c:	82 85       	ldd	r24, Z+10	; 0x0a
    296e:	93 85       	ldd	r25, Z+11	; 0x0b
    2970:	cc 01       	movw	r24, r24
    2972:	a0 e0       	ldi	r26, 0x00	; 0
    2974:	b0 e0       	ldi	r27, 0x00	; 0
    2976:	88 0f       	add	r24, r24
    2978:	99 1f       	adc	r25, r25
    297a:	aa 1f       	adc	r26, r26
    297c:	bb 1f       	adc	r27, r27
    297e:	88 0f       	add	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	aa 1f       	adc	r26, r26
    2984:	bb 1f       	adc	r27, r27
    2986:	88 0f       	add	r24, r24
    2988:	99 1f       	adc	r25, r25
    298a:	aa 1f       	adc	r26, r26
    298c:	bb 1f       	adc	r27, r27
    298e:	9c 01       	movw	r18, r24
    2990:	ad 01       	movw	r20, r26
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	92 e1       	ldi	r25, 0x12	; 18
    2996:	aa e7       	ldi	r26, 0x7A	; 122
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	bc 01       	movw	r22, r24
    299c:	cd 01       	movw	r24, r26
    299e:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__udivmodsi4>
    29a2:	da 01       	movw	r26, r20
    29a4:	c9 01       	movw	r24, r18
    29a6:	81 50       	subi	r24, 0x01	; 1
    29a8:	f8 01       	movw	r30, r16
    29aa:	80 83       	st	Z, r24
	UBRRH= (BAUD_PRESCALE>>8);
    29ac:	00 e4       	ldi	r16, 0x40	; 64
    29ae:	10 e0       	ldi	r17, 0x00	; 0
    29b0:	e9 81       	ldd	r30, Y+1	; 0x01
    29b2:	fa 81       	ldd	r31, Y+2	; 0x02
    29b4:	82 85       	ldd	r24, Z+10	; 0x0a
    29b6:	93 85       	ldd	r25, Z+11	; 0x0b
    29b8:	cc 01       	movw	r24, r24
    29ba:	a0 e0       	ldi	r26, 0x00	; 0
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	88 0f       	add	r24, r24
    29c0:	99 1f       	adc	r25, r25
    29c2:	aa 1f       	adc	r26, r26
    29c4:	bb 1f       	adc	r27, r27
    29c6:	88 0f       	add	r24, r24
    29c8:	99 1f       	adc	r25, r25
    29ca:	aa 1f       	adc	r26, r26
    29cc:	bb 1f       	adc	r27, r27
    29ce:	88 0f       	add	r24, r24
    29d0:	99 1f       	adc	r25, r25
    29d2:	aa 1f       	adc	r26, r26
    29d4:	bb 1f       	adc	r27, r27
    29d6:	9c 01       	movw	r18, r24
    29d8:	ad 01       	movw	r20, r26
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	92 e1       	ldi	r25, 0x12	; 18
    29de:	aa e7       	ldi	r26, 0x7A	; 122
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	bc 01       	movw	r22, r24
    29e4:	cd 01       	movw	r24, r26
    29e6:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__udivmodsi4>
    29ea:	da 01       	movw	r26, r20
    29ec:	c9 01       	movw	r24, r18
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	a1 09       	sbc	r26, r1
    29f2:	b1 09       	sbc	r27, r1
    29f4:	89 2f       	mov	r24, r25
    29f6:	9a 2f       	mov	r25, r26
    29f8:	ab 2f       	mov	r26, r27
    29fa:	bb 27       	eor	r27, r27
    29fc:	f8 01       	movw	r30, r16
    29fe:	80 83       	st	Z, r24
	//Asynchronus or Synchronus
	if(config->USART_MODE) {SET_BIT(UCSRC, UMSEL);}
    2a00:	e9 81       	ldd	r30, Y+1	; 0x01
    2a02:	fa 81       	ldd	r31, Y+2	; 0x02
    2a04:	86 81       	ldd	r24, Z+6	; 0x06
    2a06:	88 23       	and	r24, r24
    2a08:	39 f0       	breq	.+14     	; 0x2a18 <UART_init+0xda>
    2a0a:	a0 e4       	ldi	r26, 0x40	; 64
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	e0 e4       	ldi	r30, 0x40	; 64
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	80 64       	ori	r24, 0x40	; 64
    2a16:	8c 93       	st	X, r24

	//Stop bit
	if(config->stopbit) {SET_BIT(UCSRC, USBS);}
    2a18:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a1c:	87 81       	ldd	r24, Z+7	; 0x07
    2a1e:	88 23       	and	r24, r24
    2a20:	39 f0       	breq	.+14     	; 0x2a30 <UART_init+0xf2>
    2a22:	a0 e4       	ldi	r26, 0x40	; 64
    2a24:	b0 e0       	ldi	r27, 0x00	; 0
    2a26:	e0 e4       	ldi	r30, 0x40	; 64
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	88 60       	ori	r24, 0x08	; 8
    2a2e:	8c 93       	st	X, r24

	//Parity Error
	if(config->ParityError) {SET_BIT(UCSRA, PE);}
    2a30:	e9 81       	ldd	r30, Y+1	; 0x01
    2a32:	fa 81       	ldd	r31, Y+2	; 0x02
    2a34:	80 81       	ld	r24, Z
    2a36:	88 23       	and	r24, r24
    2a38:	39 f0       	breq	.+14     	; 0x2a48 <UART_init+0x10a>
    2a3a:	ab e2       	ldi	r26, 0x2B	; 43
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	eb e2       	ldi	r30, 0x2B	; 43
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	84 60       	ori	r24, 0x04	; 4
    2a46:	8c 93       	st	X, r24

	//Data Overrun Error
	if(config->DataOverrunError) {SET_BIT(UCSRA, DOR);}
    2a48:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4c:	82 81       	ldd	r24, Z+2	; 0x02
    2a4e:	88 23       	and	r24, r24
    2a50:	39 f0       	breq	.+14     	; 0x2a60 <UART_init+0x122>
    2a52:	ab e2       	ldi	r26, 0x2B	; 43
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	eb e2       	ldi	r30, 0x2B	; 43
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	88 60       	ori	r24, 0x08	; 8
    2a5e:	8c 93       	st	X, r24

	//Frame Error
	if(config->FrameError) {SET_BIT(UCSRA, FE);}
    2a60:	e9 81       	ldd	r30, Y+1	; 0x01
    2a62:	fa 81       	ldd	r31, Y+2	; 0x02
    2a64:	81 81       	ldd	r24, Z+1	; 0x01
    2a66:	88 23       	and	r24, r24
    2a68:	39 f0       	breq	.+14     	; 0x2a78 <UART_init+0x13a>
    2a6a:	ab e2       	ldi	r26, 0x2B	; 43
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	eb e2       	ldi	r30, 0x2B	; 43
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	80 61       	ori	r24, 0x10	; 16
    2a76:	8c 93       	st	X, r24

	//Transmission Speed
	if(config->DoubleTransmission) {SET_BIT(UCSRA, U2X);}
    2a78:	e9 81       	ldd	r30, Y+1	; 0x01
    2a7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a7c:	83 81       	ldd	r24, Z+3	; 0x03
    2a7e:	88 23       	and	r24, r24
    2a80:	39 f0       	breq	.+14     	; 0x2a90 <UART_init+0x152>
    2a82:	ab e2       	ldi	r26, 0x2B	; 43
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	eb e2       	ldi	r30, 0x2B	; 43
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	82 60       	ori	r24, 0x02	; 2
    2a8e:	8c 93       	st	X, r24

	//Multi-Processor Communication
	if(config->MPCMmode) {SET_BIT(UCSRA, MPCM);}
    2a90:	e9 81       	ldd	r30, Y+1	; 0x01
    2a92:	fa 81       	ldd	r31, Y+2	; 0x02
    2a94:	84 81       	ldd	r24, Z+4	; 0x04
    2a96:	88 23       	and	r24, r24
    2a98:	39 f0       	breq	.+14     	; 0x2aa8 <UART_init+0x16a>
    2a9a:	ab e2       	ldi	r26, 0x2B	; 43
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	eb e2       	ldi	r30, 0x2B	; 43
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	80 81       	ld	r24, Z
    2aa4:	81 60       	ori	r24, 0x01	; 1
    2aa6:	8c 93       	st	X, r24

	UCSRB = (1<<RXEN) | (1<<TXEN);   //Enabling Transmission and Recieving
    2aa8:	ea e2       	ldi	r30, 0x2A	; 42
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	88 e1       	ldi	r24, 0x18	; 24
    2aae:	80 83       	st	Z, r24

	//Character Size
	switch (config->characterSize) {
    2ab0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab4:	81 85       	ldd	r24, Z+9	; 0x09
    2ab6:	28 2f       	mov	r18, r24
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	3c 83       	std	Y+4, r19	; 0x04
    2abc:	2b 83       	std	Y+3, r18	; 0x03
    2abe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac2:	82 30       	cpi	r24, 0x02	; 2
    2ac4:	91 05       	cpc	r25, r1
    2ac6:	f1 f0       	breq	.+60     	; 0x2b04 <UART_init+0x1c6>
    2ac8:	eb 81       	ldd	r30, Y+3	; 0x03
    2aca:	fc 81       	ldd	r31, Y+4	; 0x04
    2acc:	e3 30       	cpi	r30, 0x03	; 3
    2ace:	f1 05       	cpc	r31, r1
    2ad0:	34 f4       	brge	.+12     	; 0x2ade <UART_init+0x1a0>
    2ad2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ad4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ad6:	21 30       	cpi	r18, 0x01	; 1
    2ad8:	31 05       	cpc	r19, r1
    2ada:	61 f0       	breq	.+24     	; 0x2af4 <UART_init+0x1b6>
    2adc:	3f c0       	rjmp	.+126    	; 0x2b5c <UART_init+0x21e>
    2ade:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae2:	83 30       	cpi	r24, 0x03	; 3
    2ae4:	91 05       	cpc	r25, r1
    2ae6:	b1 f0       	breq	.+44     	; 0x2b14 <UART_init+0x1d6>
    2ae8:	eb 81       	ldd	r30, Y+3	; 0x03
    2aea:	fc 81       	ldd	r31, Y+4	; 0x04
    2aec:	e4 30       	cpi	r30, 0x04	; 4
    2aee:	f1 05       	cpc	r31, r1
    2af0:	01 f1       	breq	.+64     	; 0x2b32 <UART_init+0x1f4>
    2af2:	34 c0       	rjmp	.+104    	; 0x2b5c <UART_init+0x21e>
		case six:
			SET_BIT(UCSRC, UCSZ0);
    2af4:	a0 e4       	ldi	r26, 0x40	; 64
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	e0 e4       	ldi	r30, 0x40	; 64
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	82 60       	ori	r24, 0x02	; 2
    2b00:	8c 93       	st	X, r24
    2b02:	2c c0       	rjmp	.+88     	; 0x2b5c <UART_init+0x21e>
			break;
		case seven:
			SET_BIT(UCSRC, UCSZ1);
    2b04:	a0 e4       	ldi	r26, 0x40	; 64
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	e0 e4       	ldi	r30, 0x40	; 64
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	84 60       	ori	r24, 0x04	; 4
    2b10:	8c 93       	st	X, r24
    2b12:	24 c0       	rjmp	.+72     	; 0x2b5c <UART_init+0x21e>
			break;
		case eight:
			SET_BIT(UCSRC, UCSZ1);
    2b14:	a0 e4       	ldi	r26, 0x40	; 64
    2b16:	b0 e0       	ldi	r27, 0x00	; 0
    2b18:	e0 e4       	ldi	r30, 0x40	; 64
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	80 81       	ld	r24, Z
    2b1e:	84 60       	ori	r24, 0x04	; 4
    2b20:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ0);
    2b22:	a0 e4       	ldi	r26, 0x40	; 64
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	e0 e4       	ldi	r30, 0x40	; 64
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	82 60       	ori	r24, 0x02	; 2
    2b2e:	8c 93       	st	X, r24
    2b30:	15 c0       	rjmp	.+42     	; 0x2b5c <UART_init+0x21e>
			break;
		case nine:
			SET_BIT(UCSRC, UCSZ1);
    2b32:	a0 e4       	ldi	r26, 0x40	; 64
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	e0 e4       	ldi	r30, 0x40	; 64
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	84 60       	ori	r24, 0x04	; 4
    2b3e:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ0);
    2b40:	a0 e4       	ldi	r26, 0x40	; 64
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	e0 e4       	ldi	r30, 0x40	; 64
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	82 60       	ori	r24, 0x02	; 2
    2b4c:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ2);
    2b4e:	a0 e4       	ldi	r26, 0x40	; 64
    2b50:	b0 e0       	ldi	r27, 0x00	; 0
    2b52:	e0 e4       	ldi	r30, 0x40	; 64
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	80 81       	ld	r24, Z
    2b58:	84 60       	ori	r24, 0x04	; 4
    2b5a:	8c 93       	st	X, r24
		default:
			break;
	}

	//Parity Mode
	if(config->parity) {SET_BIT(UCSRC, UPM1);}
    2b5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b60:	85 81       	ldd	r24, Z+5	; 0x05
    2b62:	88 23       	and	r24, r24
    2b64:	41 f0       	breq	.+16     	; 0x2b76 <UART_init+0x238>
    2b66:	a0 e4       	ldi	r26, 0x40	; 64
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	e0 e4       	ldi	r30, 0x40	; 64
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	80 81       	ld	r24, Z
    2b70:	80 62       	ori	r24, 0x20	; 32
    2b72:	8c 93       	st	X, r24
    2b74:	13 c0       	rjmp	.+38     	; 0x2b9c <UART_init+0x25e>
	else if(config->parity) {SET_BIT(UCSRC, UPM1); SET_BIT(UCSRC, UPM0);}
    2b76:	e9 81       	ldd	r30, Y+1	; 0x01
    2b78:	fa 81       	ldd	r31, Y+2	; 0x02
    2b7a:	85 81       	ldd	r24, Z+5	; 0x05
    2b7c:	88 23       	and	r24, r24
    2b7e:	71 f0       	breq	.+28     	; 0x2b9c <UART_init+0x25e>
    2b80:	a0 e4       	ldi	r26, 0x40	; 64
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	e0 e4       	ldi	r30, 0x40	; 64
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	80 81       	ld	r24, Z
    2b8a:	80 62       	ori	r24, 0x20	; 32
    2b8c:	8c 93       	st	X, r24
    2b8e:	a0 e4       	ldi	r26, 0x40	; 64
    2b90:	b0 e0       	ldi	r27, 0x00	; 0
    2b92:	e0 e4       	ldi	r30, 0x40	; 64
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	80 81       	ld	r24, Z
    2b98:	80 61       	ori	r24, 0x10	; 16
    2b9a:	8c 93       	st	X, r24

	//Clock Polarity
	if(config->clockPolarity == RISING) {SET_BIT(UCSRC, UCPOL);}
    2b9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2ba0:	80 85       	ldd	r24, Z+8	; 0x08
    2ba2:	81 30       	cpi	r24, 0x01	; 1
    2ba4:	39 f4       	brne	.+14     	; 0x2bb4 <UART_init+0x276>
    2ba6:	a0 e4       	ldi	r26, 0x40	; 64
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	e0 e4       	ldi	r30, 0x40	; 64
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	81 60       	ori	r24, 0x01	; 1
    2bb2:	8c 93       	st	X, r24

}
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
    2bbc:	cf 91       	pop	r28
    2bbe:	df 91       	pop	r29
    2bc0:	1f 91       	pop	r17
    2bc2:	0f 91       	pop	r16
    2bc4:	08 95       	ret

00002bc6 <UART_sendByte>:

void UART_sendByte(const uint8 data) {
    2bc6:	df 93       	push	r29
    2bc8:	cf 93       	push	r28
    2bca:	0f 92       	push	r0
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    2bd0:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2bd2:	eb e2       	ldi	r30, 0x2B	; 43
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	80 81       	ld	r24, Z
    2bd8:	88 2f       	mov	r24, r24
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	80 72       	andi	r24, 0x20	; 32
    2bde:	90 70       	andi	r25, 0x00	; 0
    2be0:	00 97       	sbiw	r24, 0x00	; 0
    2be2:	b9 f3       	breq	.-18     	; 0x2bd2 <UART_sendByte+0xc>
	UDR = data;
    2be4:	ec e2       	ldi	r30, 0x2C	; 44
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	80 83       	st	Z, r24
}
    2bec:	0f 90       	pop	r0
    2bee:	cf 91       	pop	r28
    2bf0:	df 91       	pop	r29
    2bf2:	08 95       	ret

00002bf4 <UART_sendString>:


void UART_sendString(uint8 *str) {
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	00 d0       	rcall	.+0      	; 0x2bfa <UART_sendString+0x6>
    2bfa:	0f 92       	push	r0
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    2c00:	9b 83       	std	Y+3, r25	; 0x03
    2c02:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c04:	19 82       	std	Y+1, r1	; 0x01
    2c06:	0e c0       	rjmp	.+28     	; 0x2c24 <UART_sendString+0x30>
	while(str[i] != '\0')
	{
		UART_sendByte(str[i]);
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	28 2f       	mov	r18, r24
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c10:	9b 81       	ldd	r25, Y+3	; 0x03
    2c12:	fc 01       	movw	r30, r24
    2c14:	e2 0f       	add	r30, r18
    2c16:	f3 1f       	adc	r31, r19
    2c18:	80 81       	ld	r24, Z
    2c1a:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
		i++;
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	8f 5f       	subi	r24, 0xFF	; 255
    2c22:	89 83       	std	Y+1, r24	; 0x01
}


void UART_sendString(uint8 *str) {
	uint8 i = 0;
	while(str[i] != '\0')
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
    2c26:	28 2f       	mov	r18, r24
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c2e:	fc 01       	movw	r30, r24
    2c30:	e2 0f       	add	r30, r18
    2c32:	f3 1f       	adc	r31, r19
    2c34:	80 81       	ld	r24, Z
    2c36:	88 23       	and	r24, r24
    2c38:	39 f7       	brne	.-50     	; 0x2c08 <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}
	UART_sendByte('*');
    2c3a:	8a e2       	ldi	r24, 0x2A	; 42
    2c3c:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
}
    2c40:	0f 90       	pop	r0
    2c42:	0f 90       	pop	r0
    2c44:	0f 90       	pop	r0
    2c46:	cf 91       	pop	r28
    2c48:	df 91       	pop	r29
    2c4a:	08 95       	ret

00002c4c <UART_recieveByte>:

uint8 UART_recieveByte() {
    2c4c:	df 93       	push	r29
    2c4e:	cf 93       	push	r28
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2c54:	eb e2       	ldi	r30, 0x2B	; 43
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	88 23       	and	r24, r24
    2c5c:	dc f7       	brge	.-10     	; 0x2c54 <UART_recieveByte+0x8>
    return UDR;
    2c5e:	ec e2       	ldi	r30, 0x2C	; 44
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	80 81       	ld	r24, Z
}
    2c64:	cf 91       	pop	r28
    2c66:	df 91       	pop	r29
    2c68:	08 95       	ret

00002c6a <UART_receiveString>:


void UART_receiveString(uint8 *str) {
    2c6a:	0f 93       	push	r16
    2c6c:	1f 93       	push	r17
    2c6e:	df 93       	push	r29
    2c70:	cf 93       	push	r28
    2c72:	00 d0       	rcall	.+0      	; 0x2c74 <UART_receiveString+0xa>
    2c74:	0f 92       	push	r0
    2c76:	cd b7       	in	r28, 0x3d	; 61
    2c78:	de b7       	in	r29, 0x3e	; 62
    2c7a:	9b 83       	std	Y+3, r25	; 0x03
    2c7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c7e:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_recieveByte();
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	28 2f       	mov	r18, r24
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	8a 81       	ldd	r24, Y+2	; 0x02
    2c88:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8a:	8c 01       	movw	r16, r24
    2c8c:	02 0f       	add	r16, r18
    2c8e:	13 1f       	adc	r17, r19
    2c90:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <UART_recieveByte>
    2c94:	f8 01       	movw	r30, r16
    2c96:	80 83       	st	Z, r24
    2c98:	0f c0       	rjmp	.+30     	; 0x2cb8 <UART_receiveString+0x4e>
	while(str[i] != '*')
	{
		i++;
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	8f 5f       	subi	r24, 0xFF	; 255
    2c9e:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_recieveByte();
    2ca0:	89 81       	ldd	r24, Y+1	; 0x01
    2ca2:	28 2f       	mov	r18, r24
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca8:	9b 81       	ldd	r25, Y+3	; 0x03
    2caa:	8c 01       	movw	r16, r24
    2cac:	02 0f       	add	r16, r18
    2cae:	13 1f       	adc	r17, r19
    2cb0:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <UART_recieveByte>
    2cb4:	f8 01       	movw	r30, r16
    2cb6:	80 83       	st	Z, r24


void UART_receiveString(uint8 *str) {
	uint8 i = 0;
	str[i] = UART_recieveByte();
	while(str[i] != '*')
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	28 2f       	mov	r18, r24
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	e2 0f       	add	r30, r18
    2cc6:	f3 1f       	adc	r31, r19
    2cc8:	80 81       	ld	r24, Z
    2cca:	8a 32       	cpi	r24, 0x2A	; 42
    2ccc:	31 f7       	brne	.-52     	; 0x2c9a <UART_receiveString+0x30>
	{
		i++;
		str[i] = UART_recieveByte();
	}
	str[i] = '\0';
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	28 2f       	mov	r18, r24
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd8:	fc 01       	movw	r30, r24
    2cda:	e2 0f       	add	r30, r18
    2cdc:	f3 1f       	adc	r31, r19
    2cde:	10 82       	st	Z, r1
}
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	1f 91       	pop	r17
    2cec:	0f 91       	pop	r16
    2cee:	08 95       	ret

00002cf0 <__divmodhi4>:
    2cf0:	97 fb       	bst	r25, 7
    2cf2:	09 2e       	mov	r0, r25
    2cf4:	07 26       	eor	r0, r23
    2cf6:	0a d0       	rcall	.+20     	; 0x2d0c <__divmodhi4_neg1>
    2cf8:	77 fd       	sbrc	r23, 7
    2cfa:	04 d0       	rcall	.+8      	; 0x2d04 <__divmodhi4_neg2>
    2cfc:	2e d0       	rcall	.+92     	; 0x2d5a <__udivmodhi4>
    2cfe:	06 d0       	rcall	.+12     	; 0x2d0c <__divmodhi4_neg1>
    2d00:	00 20       	and	r0, r0
    2d02:	1a f4       	brpl	.+6      	; 0x2d0a <__divmodhi4_exit>

00002d04 <__divmodhi4_neg2>:
    2d04:	70 95       	com	r23
    2d06:	61 95       	neg	r22
    2d08:	7f 4f       	sbci	r23, 0xFF	; 255

00002d0a <__divmodhi4_exit>:
    2d0a:	08 95       	ret

00002d0c <__divmodhi4_neg1>:
    2d0c:	f6 f7       	brtc	.-4      	; 0x2d0a <__divmodhi4_exit>
    2d0e:	90 95       	com	r25
    2d10:	81 95       	neg	r24
    2d12:	9f 4f       	sbci	r25, 0xFF	; 255
    2d14:	08 95       	ret

00002d16 <__udivmodsi4>:
    2d16:	a1 e2       	ldi	r26, 0x21	; 33
    2d18:	1a 2e       	mov	r1, r26
    2d1a:	aa 1b       	sub	r26, r26
    2d1c:	bb 1b       	sub	r27, r27
    2d1e:	fd 01       	movw	r30, r26
    2d20:	0d c0       	rjmp	.+26     	; 0x2d3c <__udivmodsi4_ep>

00002d22 <__udivmodsi4_loop>:
    2d22:	aa 1f       	adc	r26, r26
    2d24:	bb 1f       	adc	r27, r27
    2d26:	ee 1f       	adc	r30, r30
    2d28:	ff 1f       	adc	r31, r31
    2d2a:	a2 17       	cp	r26, r18
    2d2c:	b3 07       	cpc	r27, r19
    2d2e:	e4 07       	cpc	r30, r20
    2d30:	f5 07       	cpc	r31, r21
    2d32:	20 f0       	brcs	.+8      	; 0x2d3c <__udivmodsi4_ep>
    2d34:	a2 1b       	sub	r26, r18
    2d36:	b3 0b       	sbc	r27, r19
    2d38:	e4 0b       	sbc	r30, r20
    2d3a:	f5 0b       	sbc	r31, r21

00002d3c <__udivmodsi4_ep>:
    2d3c:	66 1f       	adc	r22, r22
    2d3e:	77 1f       	adc	r23, r23
    2d40:	88 1f       	adc	r24, r24
    2d42:	99 1f       	adc	r25, r25
    2d44:	1a 94       	dec	r1
    2d46:	69 f7       	brne	.-38     	; 0x2d22 <__udivmodsi4_loop>
    2d48:	60 95       	com	r22
    2d4a:	70 95       	com	r23
    2d4c:	80 95       	com	r24
    2d4e:	90 95       	com	r25
    2d50:	9b 01       	movw	r18, r22
    2d52:	ac 01       	movw	r20, r24
    2d54:	bd 01       	movw	r22, r26
    2d56:	cf 01       	movw	r24, r30
    2d58:	08 95       	ret

00002d5a <__udivmodhi4>:
    2d5a:	aa 1b       	sub	r26, r26
    2d5c:	bb 1b       	sub	r27, r27
    2d5e:	51 e1       	ldi	r21, 0x11	; 17
    2d60:	07 c0       	rjmp	.+14     	; 0x2d70 <__udivmodhi4_ep>

00002d62 <__udivmodhi4_loop>:
    2d62:	aa 1f       	adc	r26, r26
    2d64:	bb 1f       	adc	r27, r27
    2d66:	a6 17       	cp	r26, r22
    2d68:	b7 07       	cpc	r27, r23
    2d6a:	10 f0       	brcs	.+4      	; 0x2d70 <__udivmodhi4_ep>
    2d6c:	a6 1b       	sub	r26, r22
    2d6e:	b7 0b       	sbc	r27, r23

00002d70 <__udivmodhi4_ep>:
    2d70:	88 1f       	adc	r24, r24
    2d72:	99 1f       	adc	r25, r25
    2d74:	5a 95       	dec	r21
    2d76:	a9 f7       	brne	.-22     	; 0x2d62 <__udivmodhi4_loop>
    2d78:	80 95       	com	r24
    2d7a:	90 95       	com	r25
    2d7c:	bc 01       	movw	r22, r24
    2d7e:	cd 01       	movw	r24, r26
    2d80:	08 95       	ret

00002d82 <__prologue_saves__>:
    2d82:	2f 92       	push	r2
    2d84:	3f 92       	push	r3
    2d86:	4f 92       	push	r4
    2d88:	5f 92       	push	r5
    2d8a:	6f 92       	push	r6
    2d8c:	7f 92       	push	r7
    2d8e:	8f 92       	push	r8
    2d90:	9f 92       	push	r9
    2d92:	af 92       	push	r10
    2d94:	bf 92       	push	r11
    2d96:	cf 92       	push	r12
    2d98:	df 92       	push	r13
    2d9a:	ef 92       	push	r14
    2d9c:	ff 92       	push	r15
    2d9e:	0f 93       	push	r16
    2da0:	1f 93       	push	r17
    2da2:	cf 93       	push	r28
    2da4:	df 93       	push	r29
    2da6:	cd b7       	in	r28, 0x3d	; 61
    2da8:	de b7       	in	r29, 0x3e	; 62
    2daa:	ca 1b       	sub	r28, r26
    2dac:	db 0b       	sbc	r29, r27
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	f8 94       	cli
    2db2:	de bf       	out	0x3e, r29	; 62
    2db4:	0f be       	out	0x3f, r0	; 63
    2db6:	cd bf       	out	0x3d, r28	; 61
    2db8:	09 94       	ijmp

00002dba <__epilogue_restores__>:
    2dba:	2a 88       	ldd	r2, Y+18	; 0x12
    2dbc:	39 88       	ldd	r3, Y+17	; 0x11
    2dbe:	48 88       	ldd	r4, Y+16	; 0x10
    2dc0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dc2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dc4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2dc6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dc8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dca:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dcc:	b9 84       	ldd	r11, Y+9	; 0x09
    2dce:	c8 84       	ldd	r12, Y+8	; 0x08
    2dd0:	df 80       	ldd	r13, Y+7	; 0x07
    2dd2:	ee 80       	ldd	r14, Y+6	; 0x06
    2dd4:	fd 80       	ldd	r15, Y+5	; 0x05
    2dd6:	0c 81       	ldd	r16, Y+4	; 0x04
    2dd8:	1b 81       	ldd	r17, Y+3	; 0x03
    2dda:	aa 81       	ldd	r26, Y+2	; 0x02
    2ddc:	b9 81       	ldd	r27, Y+1	; 0x01
    2dde:	ce 0f       	add	r28, r30
    2de0:	d1 1d       	adc	r29, r1
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	de bf       	out	0x3e, r29	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	cd bf       	out	0x3d, r28	; 61
    2dec:	ed 01       	movw	r28, r26
    2dee:	08 95       	ret

00002df0 <itoa>:
    2df0:	fb 01       	movw	r30, r22
    2df2:	9f 01       	movw	r18, r30
    2df4:	e8 94       	clt
    2df6:	42 30       	cpi	r20, 0x02	; 2
    2df8:	c4 f0       	brlt	.+48     	; 0x2e2a <itoa+0x3a>
    2dfa:	45 32       	cpi	r20, 0x25	; 37
    2dfc:	b4 f4       	brge	.+44     	; 0x2e2a <itoa+0x3a>
    2dfe:	4a 30       	cpi	r20, 0x0A	; 10
    2e00:	29 f4       	brne	.+10     	; 0x2e0c <itoa+0x1c>
    2e02:	97 fb       	bst	r25, 7
    2e04:	1e f4       	brtc	.+6      	; 0x2e0c <itoa+0x1c>
    2e06:	90 95       	com	r25
    2e08:	81 95       	neg	r24
    2e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e0c:	64 2f       	mov	r22, r20
    2e0e:	77 27       	eor	r23, r23
    2e10:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__udivmodhi4>
    2e14:	80 5d       	subi	r24, 0xD0	; 208
    2e16:	8a 33       	cpi	r24, 0x3A	; 58
    2e18:	0c f0       	brlt	.+2      	; 0x2e1c <itoa+0x2c>
    2e1a:	89 5d       	subi	r24, 0xD9	; 217
    2e1c:	81 93       	st	Z+, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	00 97       	sbiw	r24, 0x00	; 0
    2e22:	a1 f7       	brne	.-24     	; 0x2e0c <itoa+0x1c>
    2e24:	16 f4       	brtc	.+4      	; 0x2e2a <itoa+0x3a>
    2e26:	5d e2       	ldi	r21, 0x2D	; 45
    2e28:	51 93       	st	Z+, r21
    2e2a:	10 82       	st	Z, r1
    2e2c:	c9 01       	movw	r24, r18
    2e2e:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <strrev>

00002e32 <strrev>:
    2e32:	dc 01       	movw	r26, r24
    2e34:	fc 01       	movw	r30, r24
    2e36:	67 2f       	mov	r22, r23
    2e38:	71 91       	ld	r23, Z+
    2e3a:	77 23       	and	r23, r23
    2e3c:	e1 f7       	brne	.-8      	; 0x2e36 <strrev+0x4>
    2e3e:	32 97       	sbiw	r30, 0x02	; 2
    2e40:	04 c0       	rjmp	.+8      	; 0x2e4a <strrev+0x18>
    2e42:	7c 91       	ld	r23, X
    2e44:	6d 93       	st	X+, r22
    2e46:	70 83       	st	Z, r23
    2e48:	62 91       	ld	r22, -Z
    2e4a:	ae 17       	cp	r26, r30
    2e4c:	bf 07       	cpc	r27, r31
    2e4e:	c8 f3       	brcs	.-14     	; 0x2e42 <strrev+0x10>
    2e50:	08 95       	ret

00002e52 <_exit>:
    2e52:	f8 94       	cli

00002e54 <__stop_program>:
    2e54:	ff cf       	rjmp	.-2      	; 0x2e54 <__stop_program>
